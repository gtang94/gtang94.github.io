<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>重定向</title>
      <link href="/2020/08/14/%E9%87%8D%E5%AE%9A%E5%90%91/"/>
      <url>/2020/08/14/%E9%87%8D%E5%AE%9A%E5%90%91/</url>
      
        <content type="html"><![CDATA[<h2 id="WHAT"><a href="#WHAT" class="headerlink" title="WHAT"></a>WHAT</h2><h3 id="重定向和转发"><a href="#重定向和转发" class="headerlink" title="重定向和转发"></a>重定向和转发</h3><h4 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h4><blockquote><p>重定向 是一种当实际资源，如单个页面、域名等被迁移到新的位置的时候，保持原有地址可用的技术。HTTP协议提供了一种特殊形式的响应，HTTP重定向来处理这种情况。</p></blockquote><blockquote><p>HTTP重定向是由浏览器进行跳转的，浏览器根据收到的Http Code和Location具体决定挑战到哪个新位置，它本质上是发送了两个http请求，并且重定向后浏览器的地址栏会变成Location中的值。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line">浏览器 -&gt; 服务器: GET &#x2F;api HTTP&#x2F;1.1</span><br><span class="line">服务器 --&gt; 浏览器: HTTP&#x2F;1.1 301 Moved Permanently\n Location: &#x2F;api_new</span><br><span class="line">浏览器 --&gt; 服务器: GET &#x2F;api_new HTTP&#x2F;1.1</span><br><span class="line">服务器 -&gt; 浏览器: HTTP&#x2F;1.1 200 OK</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><h4 id="转发"><a href="#转发" class="headerlink" title="转发"></a>转发</h4><blockquote><p>转发是由服务器完成的，在转发时，浏览器的地址栏是不会发生变化的，并且转发是对浏览器透明的，也就是浏览器并不知道本次请求发生了转发。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line">浏览器 -&gt; 网关服务器: GET &#x2F;api HTTP&#x2F;1.1</span><br><span class="line">网关服务器 --&gt; 上游服务器: GET &#x2F;api2 HTTP&#x2F;1.1</span><br><span class="line">上游服务器 --&gt; 网关服务器: HTTP&#x2F;1.1 200 OK</span><br><span class="line">网关服务器 -&gt; 浏览器: HTTP&#x2F;1.1 200 OK</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><h3 id="Http重定向分类"><a href="#Http重定向分类" class="headerlink" title="Http重定向分类"></a>Http重定向分类</h3><h4 id="永久重定向"><a href="#永久重定向" class="headerlink" title="永久重定向"></a>永久重定向</h4><blockquote><p>永久重定向的操作是 <strong>永久性</strong> 的。它表示原有的URL不应再被使用，应该优先选用新的URL。</p></blockquote><blockquote><p>谷歌搜索引擎在遇到301时，会直接收录新的URL。</p></blockquote><table><thead><tr><th>HTTP状态码</th><th>处理</th><th>应用场景</th></tr></thead><tbody><tr><td>301 Moved Permanent</td><td>GET方法不会发生改变，其他方法有可能会变为GET方法</td><td>请求的 URL 已被移除时使用；默认情况下，永久重定向是会被浏览器缓存的</td></tr><tr><td><strong>308 Permanent Redirect</strong></td><td>方法和消息体都不会发生变化</td><td>用于非GET方法，被浏览器默认缓存</td></tr></tbody></table><h4 id="临时重定向"><a href="#临时重定向" class="headerlink" title="临时重定向"></a>临时重定向</h4><blockquote><p>可以简单的理解为被访问的资源原本确实存在，但已经被 <strong>临时</strong> 改变了位置。</p></blockquote><blockquote><p>这种情况下，谷歌搜索引擎不会记录新的、临时的URL。</p></blockquote><table><thead><tr><th>HTTP状态码</th><th>处理</th><th>备注</th></tr></thead><tbody><tr><td>302 Found</td><td>GET方法不会发生变更，其他方法有可能变更为GET方法</td><td>由于不可预见的原因该页面暂时不可用。在这种情况下，搜索引擎不会更新它们的链接</td></tr><tr><td>303 See Other</td><td>GET方法不会发生变更，其他方法会变更为GET方法</td><td>用户PUT或POST请求完成之后进行页面跳转来防止由于页面刷新导致的操作重复触发</td></tr><tr><td><strong>307 Temporary Redirect</strong></td><td>方法和消息体都不发生变化</td><td>由于不可预见的原因该页面暂时不可用。在这种情况下，搜索引擎不会更新它们的链接。当站点支持非GET方法的链接或操作的时候，该状态码优于302状态码。<strong>307与302相比，307不允许修改请求方法</strong></td></tr></tbody></table><h4 id="特殊重定向"><a href="#特殊重定向" class="headerlink" title="特殊重定向"></a>特殊重定向</h4><blockquote><p>特殊重定向的状态码包括304和300，304表示资源未被修改，会使页面跳转到本地就的缓存版本中；而300表示多项选择，是一种手动重定向：以web页面形式呈现在浏览器中的消息主体包含了一个可能的重定向链接的列表，用户可以从中选择。</p></blockquote><table><thead><tr><th>HTTP状态码</th><th>应用场景</th></tr></thead><tbody><tr><td>300 Multiple Choice</td><td>不常用。所有的选项在消息主体的HTML页面中列出，可在Link头部加入机器可读的rel=alternate</td></tr><tr><td>304 Not Modified</td><td>发送用于重新验证的条件请求。表示缓存的响应仍然是最新的并且可以使用</td></tr></tbody></table><h2 id="HOW"><a href="#HOW" class="headerlink" title="HOW"></a>HOW</h2><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><h4 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h4><blockquote><p>略</p></blockquote><h4 id="lamp环境配置"><a href="#lamp环境配置" class="headerlink" title="lamp环境配置"></a>lamp环境配置</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拉取现成别人做好的lamp镜像</span></span><br><span class="line">[gtang94@izwz9hvzt7nfcuosqsmqtfz ~]$ docker pull xiaowenxiao/lamp:latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看拉取的镜像</span></span><br><span class="line">[gtang94@izwz9hvzt7nfcuosqsmqtfz ~]$ docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">xiaowenxiao/lamp    latest              fb7c111e75ee        12 months ago       3.86GB</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建挂载路径</span></span><br><span class="line">[gtang94@izwz9hvzt7nfcuosqsmqtfz ~]$ mkdir /usr/<span class="built_in">local</span>/lamp/project &amp;&amp; chmod 777 /usr/<span class="built_in">local</span>/lamp/project</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动容器</span></span><br><span class="line">[gtang94@izwz9hvzt7nfcuosqsmqtfz ~]$ docker run --privileged -tid -p 3307:3306 -p 81:80 -v /usr/<span class="built_in">local</span>/lamp/project:/var/www/project --name=lamp xiaowenxiao/lamp:latest /usr/sbin/init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看容器启动状态</span></span><br><span class="line">[gtang94@izwz9hvzt7nfcuosqsmqtfz ~]$ docker ps</span><br><span class="line">CONTAINER ID        IMAGE                     COMMAND             CREATED             STATUS              PORTS                                                NAMES</span><br><span class="line">bfdb64914288        xiaowenxiao/lamp:latest   <span class="string">"/usr/sbin/init"</span>    4 seconds ago       Up 4 seconds        22/tcp, 0.0.0.0:81-&gt;80/tcp, 0.0.0.0:3307-&gt;3306/tcp   lamp</span><br></pre></td></tr></table></figure><h3 id="Apache重定向"><a href="#Apache重定向" class="headerlink" title="Apache重定向"></a>Apache重定向</h3><h4 id="Apache支持-htaccess"><a href="#Apache支持-htaccess" class="headerlink" title="Apache支持.htaccess"></a>Apache支持.htaccess</h4><blockquote><ul><li>修改 /etc/httpd/conf/httpd.conf， 将 &lt;Directory “/var/www/project”&gt; 中的 AllowOverride None 改成 AllowOverride All</li><li>重启apache : <code>systemctl restart httpd.service</code></li></ul></blockquote><blockquote><p>启用 .htaccess 后，每次请求资源时，无论是否真正用到，都需要在每个目录下查找读取.htaccess文件。例如访，问 /gateway/user/list.html，需要依次查找：</p><ul><li>/.htaccess</li><li>/gateway/.htaccess</li><li>/gateway/user/.htaccess</li></ul></blockquote><h4 id="htaccess基本正则"><a href="#htaccess基本正则" class="headerlink" title=".htaccess基本正则"></a>.htaccess基本正则</h4><table><thead><tr><th>字符</th><th>描述</th></tr></thead><tbody><tr><td>.</td><td>匹配换行符以外的所有字符</td></tr><tr><td>\w</td><td>匹配字母、数字、下划线、汉字</td></tr><tr><td>\s</td><td>匹配任意空白符</td></tr><tr><td>\d</td><td>匹配数字</td></tr><tr><td>\b</td><td>匹配单词的开始或结束</td></tr><tr><td>^</td><td>匹配以某个字符串开始</td></tr><tr><td>$</td><td>匹配以某个字符串结束</td></tr><tr><td>*</td><td>匹配零次或多次</td></tr><tr><td>+</td><td>匹配依次或多次</td></tr><tr><td>?</td><td>匹配零次或一次</td></tr><tr><td>{n}</td><td>重复n次</td></tr><tr><td>{n,}</td><td>重复n次或n次以上</td></tr><tr><td>{n,m}</td><td>重复n到m次</td></tr><tr><td>()</td><td>一个括号代表一个分组，第一个括号的内容用 $1 引用，第二个括号的内容用 $2 引用，依次类推</td></tr></tbody></table><h4 id="htaccess语法"><a href="#htaccess语法" class="headerlink" title=".htaccess语法"></a>.htaccess语法</h4><h5 id="RewriteEngine"><a href="#RewriteEngine" class="headerlink" title="RewriteEngine"></a>RewriteEngine</h5><blockquote><p>RewriteEngine 用于开启或停用rewrite功能，值为 On 或 Off，例：<code>RewriteEngine On</code></p></blockquote><h5 id="RewriteBase"><a href="#RewriteBase" class="headerlink" title="RewriteBase"></a>RewriteBase</h5><blockquote><p>RewriteBase 用于设置重写的基准目录，根目录使用 / ，例：<code>RewriteBase /</code></p></blockquote><h5 id="RewriteCond"><a href="#RewriteCond" class="headerlink" title="RewriteCond"></a>RewriteCond</h5><blockquote><p>RewriteCond 用于设置匹配的条件，只有匹配所有的 RewriteCond 后才能进入下面的 RewriteRule </p></blockquote><blockquote><p>RewriteCond 的语法格式：<code>RewriteCond TestString CondPattern [flags]</code></p></blockquote><blockquote><p>TestString 是一个纯文本的字符串，主要参数如下：</p></blockquote><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>HTTP_HOST</td><td>当前请求的 Host: 头部的内容</td></tr><tr><td>HTTP_COOKIE</td><td>cookie</td></tr><tr><td>HTTP_UPGRADE_INSECURE_REQUESTS</td><td>表示浏览器可读懂服务器发过来的请求</td></tr><tr><td>HTTP_USER_AGENT</td><td>获取用户相关信息，包括用户浏览器、操作系统等信息</td></tr><tr><td>HTTP_ACCEPT</td><td>当前请求的ACCEPT头部信息</td></tr><tr><td>HTTP_ACCEPT_LANGUAGE</td><td><em>当前请求的 Accept-Language: 头部的内容。例如：“en”</em></td></tr><tr><td>SERVER_SIGNATURE</td><td><em>包含服务器版本和 虚拟主机名的字符串</em></td></tr><tr><td>SERVER_SOFTWARE</td><td><em>服务器标识的字串，在响应请求时的头部中给出</em></td></tr><tr><td>SERVER_NAME</td><td>当前 运行脚本所在服务器 主机的名称</td></tr><tr><td>SERVER_ADDR</td><td>当前 运行脚本所在服务器 IP地址</td></tr><tr><td>SERVER_PORT</td><td>当前 运行脚本所在服务器 端口</td></tr><tr><td>REMOTE_ADDR</td><td>正在浏览当前页面用户的 IP 地址</td></tr><tr><td>DOCUMENT_ROOT</td><td>当前 运行脚本所在的文档根目录。在服务器配置文件中定义</td></tr><tr><td>SERVER_ADMIN</td><td>管理员信息</td></tr><tr><td>SCRIPT_FILENAME</td><td>当前执行 脚本的 绝对路径名</td></tr><tr><td>REMOTE_PORT</td><td>用户连接到服务器时所使用的端口</td></tr><tr><td>GATEWAY_INTERFACE</td><td>服务器使用的 CGI 规范的版本。例如，“CGI/1.1”</td></tr><tr><td>SERVER_PROTOCOL</td><td>请求页面时通信协议的名称和版本。例如，“HTTP/1.0”</td></tr><tr><td>REQUEST_METHOD</td><td>访问页面时的请求方法。例如：“GET”、“HEAD”，“POST”，“PUT”</td></tr><tr><td>QUERY_STRING</td><td>查询(query)的字符串</td></tr><tr><td>REQUEST_URI</td><td>访问此页面所需的 URI。例如，“/index.html”</td></tr><tr><td>SCRIPT_NAME</td><td>包含当前 脚本的路径。这在页面需要指向自己时非常有用</td></tr><tr><td>PHP_SELF</td><td>当前正在执行 脚本的文件名，与 document root相关</td></tr><tr><td>PATH_TRANSLATED</td><td>当前 脚本所在文件系统（不是文档根目录）的基本路径</td></tr><tr><td>argv</td><td>传递给该 脚本的参数</td></tr></tbody></table><blockquote><p>CondPattern 是条件pattern，也就是TestString的具体值会被计算与CondPattern匹配，用 ! 是表示匹配的反转</p><p>flags 是RewriteCond的标志符，有以下参数：</p></blockquote><table><thead><tr><th>字符</th><th>描述</th></tr></thead><tbody><tr><td>nocase|NC</td><td>忽略大小</td></tr><tr><td>ornext|OR</td><td>逻辑或，可以同时匹配多个RewriteCond条件RewriteRule适用的标志符</td></tr><tr><td>redirect|R [=code]</td><td>强迫重写为基于http开头的外部转向(注意URL的变化) 如：[R=301,L]</td></tr><tr><td>forbidden|F</td><td>重写为禁止访问</td></tr><tr><td>proxy|P</td><td>重写为通过代理访问的http路径</td></tr><tr><td>last|L</td><td>最后的重写规则标志，如果匹配，不再执行以后的规则</td></tr><tr><td>next|N</td><td>循环同一个规则，直到不能满足匹配</td></tr><tr><td>chain|C</td><td>如果匹配该规则，则继续下面的有Chain标志的规则</td></tr><tr><td>type|T=MIME-type</td><td>指定MIME类型</td></tr><tr><td>nosubreq|NS</td><td>如果是内部子请求则跳过</td></tr><tr><td>nocase|NC</td><td>忽略大小</td></tr><tr><td>qsappend|QSA</td><td>附加查询字符串</td></tr><tr><td>noescape|NE</td><td>禁止URL中的字符自动转义成%[0-9]+的形式</td></tr><tr><td>passthrough|PT</td><td>将重写结果运用于mod_alias</td></tr><tr><td>skip|S=num</td><td>跳过下面几个规则</td></tr></tbody></table><h5 id="RewriteRule"><a href="#RewriteRule" class="headerlink" title="RewriteRule"></a>RewriteRule</h5><blockquote><p>RewriteRule 是具体的重定向规则， 语法格式：<code>RewriteRule Pattern Substitution [flags]</code></p></blockquote><blockquote><p>Pattern：一般是重定向前的URL</p><p>Substitution：一般是重定向后的新URL</p><p>flags 是Rewrite的标志符，一般有以下参数：</p></blockquote><table><thead><tr><th>字符</th><th>描述</th></tr></thead><tbody><tr><td>R</td><td>表示强制重定向，后面可跟返回给浏览器的HTTP状态码（常用）</td></tr><tr><td>F</td><td>表示禁止访问（常用）</td></tr><tr><td>L</td><td>表示当前规则是最后一条规则，停止读取后面的条件和规则，立即执行当前重定向（常用）</td></tr><tr><td>G</td><td>表示强制URL变为GONE，返回410的HTTP状态码</td></tr><tr><td>P</td><td>表示强制使用代理转发</td></tr><tr><td>N</td><td>表示重新从第一条规则开始重新允许重写过程</td></tr><tr><td>C</td><td>表示与下一条规则关联</td></tr><tr><td>T</td><td>表示强制转为MIME类型</td></tr><tr><td>NS</td><td>只用于不是内部的子请求</td></tr><tr><td>NC</td><td>不区分大小写</td></tr><tr><td>QSA</td><td>追加请求字符串</td></tr><tr><td>NE</td><td>不再输出转义特殊字符</td></tr><tr><td>PT</td><td>表示传递给下一个处理</td></tr></tbody></table><h5 id="AcceptPathInfo"><a href="#AcceptPathInfo" class="headerlink" title="AcceptPathInfo"></a>AcceptPathInfo</h5><blockquote><p>改指令决定是否在接受附带多余路径名信息的请求，语法：<code>AcceptPathInfo On|Off|Default</code> ，此指令默认是Default，指令取值范围如下：</p></blockquote><table><thead><tr><th>取值</th><th>描述</th></tr></thead><tbody><tr><td>On</td><td>只要前导路径可以映射到一个真实存在的路径，就可以接受该请求</td></tr><tr><td>Off</td><td>只有当一个请求映射到真实存在的路径时，才会被接受</td></tr><tr><td>Default</td><td>是否接收附带多余路径名信息的请求又其处理器(cgi-script、isapi-isa)决定</td></tr></tbody></table><h3 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h3><h4 id="将H5的客户端发送的请求重定向到指定文件"><a href="#将H5的客户端发送的请求重定向到指定文件" class="headerlink" title="将H5的客户端发送的请求重定向到指定文件"></a>将H5的客户端发送的请求重定向到指定文件</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RewriteCond %&#123;HTTP_USER_AGENT&#125; (iPhone|Android|dream|CUPCAKE|blackberry9500|blackberry9530|blackberry9520|blackberry9550|blackberry9800|webOS|incognito|webmate)</span><br><span class="line">RewriteRule ^a.html b.html [R=301,L]</span><br></pre></td></tr></table></figure><h4 id="重定向死循环"><a href="#重定向死循环" class="headerlink" title="重定向死循环"></a>重定向死循环</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果是sp的URL，用pc客户但打开后URL变成pc的URL，用sp的客户端打开后URL变成pc的URL</span></span><br><span class="line"><span class="comment"># 如果是pc的URL，用pc客户但打开后URL变成pc的URL，用sp的客户端打开后URL变成pc的URL</span></span><br><span class="line">RewriteCond %&#123;HTTP_USER_AGENT&#125; (iPhone|Android|dream|CUPCAKE|blackberry9500|blackberry9530|blackberry9520|blackberry9550|blackberry9800|webOS|incognito|webmate)</span><br><span class="line">RewriteRule die_pc.html die_sp.html</span><br><span class="line"></span><br><span class="line">RewriteRule die_sp.html die_pc.html [R=301,L]</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">RewriteCond %&#123;HTTP_USER_AGENT&#125; (iPhone|Android|dream|CUPCAKE|blackberry9500|blackberry9530|blackberry9520|blackberry9550|blackberry9800|webOS|incognito|webmate)</span><br><span class="line">RewriteRule die_pc.html die_sp.html [L]</span><br><span class="line"></span><br><span class="line">RewriteCond %&#123;ENV:REDIRECT_STATUS&#125; ^$</span><br><span class="line">RewriteRule die_sp.html die_pc.html [R=301,L]</span><br></pre></td></tr></table></figure><h4 id="多条件满足"><a href="#多条件满足" class="headerlink" title="多条件满足"></a>多条件满足</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RewriteCond %&#123;REMOTE_ADDR&#125; ^1\.80\.146\.247$ [OR]</span><br><span class="line">RewriteCond %&#123;HTTP_USER_AGENT&#125; (iPhone|Android|dream|CUPCAKE|blackberry9500|blackberry9530|blackberry9520|blackberry9550|blackberry9800|webOS|incognito|webmate)</span><br><span class="line">RewriteRule mul.html 404.html</span><br></pre></td></tr></table></figure><h4 id="按照请求的资源类型匹配"><a href="#按照请求的资源类型匹配" class="headerlink" title="按照请求的资源类型匹配"></a>按照请求的资源类型匹配</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RewriteCond %&#123;REQUEST_FILENAME&#125; -f</span><br><span class="line">RewriteRule ^ft(.*)\.html ft.html [R=301,L]</span><br></pre></td></tr></table></figure><h4 id="按资源类型转发-排除特定文件"><a href="#按资源类型转发-排除特定文件" class="headerlink" title="按资源类型转发(排除特定文件)"></a>按资源类型转发(排除特定文件)</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RewriteCond %&#123;REQUEST_FILENAME&#125; !ft1.html</span><br><span class="line">RewriteCond %&#123;REQUEST_FILENAME&#125; -f</span><br><span class="line">RewriteRule ^ft(\d+)\.html ft.html [R=301,L]</span><br></pre></td></tr></table></figure><h4 id="全目录下的资源重定向"><a href="#全目录下的资源重定向" class="headerlink" title="全目录下的资源重定向"></a>全目录下的资源重定向</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RewriteCond %&#123;HTTP_USER_AGENT&#125; (iPhone|Android|dream|CUPCAKE|blackberry9500|blackberry9530|blackberry9520|blackberry9550|blackberry9800|webOS|incognito|webmate)</span><br><span class="line">RewriteRule ^learn/(\d+).html learn.html [L]</span><br></pre></td></tr></table></figure><h4 id="参数匹配重定向"><a href="#参数匹配重定向" class="headerlink" title="参数匹配重定向"></a>参数匹配重定向</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RewriteCond %&#123;QUERY_STRING&#125; (p=2)$</span><br><span class="line">RewriteRule ^param1.html param2.html [L]</span><br></pre></td></tr></table></figure><h4 id="请求转发"><a href="#请求转发" class="headerlink" title="请求转发"></a>请求转发</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RewriteRule a.html b.html</span><br></pre></td></tr></table></figure><h4 id="添加参数重定向"><a href="#添加参数重定向" class="headerlink" title="添加参数重定向"></a>添加参数重定向</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RewriteRule ^addp1.php addp2.php?p2=22222 [QSA,L]</span><br></pre></td></tr></table></figure><h4 id="POST请求的重定向"><a href="#POST请求的重定向" class="headerlink" title="POST请求的重定向"></a>POST请求的重定向</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--index.html--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>This is a simple HTML form!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"out_before.php"</span> <span class="attr">method</span>=<span class="string">"POST"</span>&gt;</span></span><br><span class="line">name:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">select some products: <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"products[]"</span> <span class="attr">size</span>=<span class="string">6</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"c++"</span>&gt;</span>c++<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"c#"</span>&gt;</span>c#<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"php"</span>&gt;</span>php<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"Python"</span>&gt;</span>Python<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"lua"</span>&gt;</span>lua<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"JavaScript"</span>&gt;</span>JavaScript<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">Message:<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">"message"</span> <span class="attr">rows</span>=<span class="string">"5"</span> <span class="attr">cols</span>=<span class="string">"40"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"ok"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//out_before.php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;pre&gt;"</span>;</span><br><span class="line">print_r($_SERVER);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;/pre&gt;"</span>;</span><br><span class="line"><span class="keyword">exit</span>;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// out_after.php</span></span><br><span class="line">header(<span class="string">"Content-Type: text/html; charset=UTF-8"</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">"username"</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"输入的名户名为："</span> . $_POST[<span class="string">"username"</span>] . <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">"products"</span>])) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (is_array($_POST[<span class="string">"products"</span>]) &amp;&amp; !<span class="keyword">empty</span>($_POST[<span class="string">"products"</span>]))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"选择的科目为："</span> . <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">        <span class="keyword">foreach</span> ($_POST[<span class="string">"products"</span>] <span class="keyword">as</span>  $value ) &#123;</span><br><span class="line">            <span class="keyword">echo</span>  <span class="string">"$value &lt;br /&gt;"</span>;&#125;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"选择的个数为："</span> . count($_POST[<span class="string">"products"</span></span><br><span class="line">        ]) . <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">"message"</span>])) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"输入的消息为："</span> . $_POST[<span class="string">"message"</span>] . <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .htaccess</span></span><br><span class="line">RewriteEngine On</span><br><span class="line">RewriteBase /</span><br><span class="line"></span><br><span class="line"><span class="comment">#RewriteRule ^out_before.php p308/out_after.php [R=301,L]</span></span><br><span class="line"></span><br><span class="line">RewriteRule ^out_before.php p308/out_after.php [R=308,L]</span><br></pre></td></tr></table></figure><h3 id="代码中重定向"><a href="#代码中重定向" class="headerlink" title="代码中重定向"></a>代码中重定向</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">'HTTP/1.1 301 Moved Permanently'</span>);</span><br><span class="line">header(<span class="string">"Location: phpr2.php"</span>);</span><br></pre></td></tr></table></figure><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="HTTP-Code"><a href="#HTTP-Code" class="headerlink" title="HTTP Code"></a><a href="[https://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81](https://zh.wikipedia.org/wiki/HTTP状态码)">HTTP Code</a></h3><h3 id="在线调试"><a href="#在线调试" class="headerlink" title="在线调试"></a><a href="https://htaccess.madewithlove.be/" target="_blank" rel="noopener">在线调试</a></h3><h3 id="Apache配置文件参数"><a href="#Apache配置文件参数" class="headerlink" title="Apache配置文件参数"></a>Apache配置文件参数</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">ServerRoot <span class="string">"/etc/httpd"</span> <span class="comment"># 你的apache软件安装的位置。其它指定的目录如果没有指定绝对路径，则目录是相对于该目录</span></span><br><span class="line"></span><br><span class="line">Listen 80 <span class="comment"># #服务器监听的端口号</span></span><br><span class="line"></span><br><span class="line">Include conf.modules.d/*.conf</span><br><span class="line"></span><br><span class="line">User apache</span><br><span class="line"></span><br><span class="line">Group apache</span><br><span class="line"></span><br><span class="line">ServerAdmin root@localhost <span class="comment">#管理员的邮件地址</span></span><br><span class="line"></span><br><span class="line">&lt;Directory /&gt;</span><br><span class="line">    AllowOverride none</span><br><span class="line">    Require all denied</span><br><span class="line">&lt;/Directory&gt;</span><br><span class="line"></span><br><span class="line">DocumentRoot <span class="string">"/var/www/project"</span> <span class="comment">#主站点的网页存储位置</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># == 主站点的目录进行访问控制 start ==</span></span><br><span class="line">&lt;Directory <span class="string">"/var/www/project"</span>&gt;</span><br><span class="line">    AllowOverride None</span><br><span class="line">    Require all granted</span><br><span class="line">&lt;/Directory&gt;</span><br><span class="line"></span><br><span class="line">&lt;Directory <span class="string">"/var/www/project"</span>&gt;</span><br><span class="line"><span class="comment"># Options：配置在特定目录使用哪些特性，常用的值和基本含义如下:</span></span><br><span class="line"><span class="comment"># ExecCGI: 在该目录下允许执行CGI脚本</span></span><br><span class="line"><span class="comment"># FollowSymLinks: 在该目录下允许文件系统使用符号连接</span></span><br><span class="line"><span class="comment"># Indexes: 当用户访问该目录时，如果用户找不到DirectoryIndex指定的主页文件(例如index.html),则返回该目录下的文件列表给用户</span></span><br><span class="line"><span class="comment"># SymLinksIfOwnerMatch: 当使用符号连接时，只有当符号连接的文件拥有者与实际文件的拥有者相同时才可以访问</span></span><br><span class="line">    Options Indexes FollowSymLinks</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># AllowOverride：允许存在于.htaccess文件中的指令类型(.htaccess文件名是可以改变的，其文件名由AccessFileName指令决定):</span></span><br><span class="line">    <span class="comment"># None: 当AllowOverride被设置为None时。不搜索该目录下的.htaccess文件（可以减小服务器开销）</span></span><br><span class="line">    <span class="comment"># All: 在.htaccess文件中可以使用所有的指令</span></span><br><span class="line">    <span class="comment"># Order：控制在访问时Allow和Deny两个访问规则哪个优先</span></span><br><span class="line">    <span class="comment"># Allow：允许访问的主机列表</span></span><br><span class="line">    <span class="comment"># Deny：拒绝访问的主机列表</span></span><br><span class="line">    AllowOverride All</span><br><span class="line">    </span><br><span class="line">    Require all granted</span><br><span class="line">&lt;/Directory&gt;</span><br><span class="line"><span class="comment"># == 主站点的目录进行访问控制 end ==</span></span><br><span class="line"></span><br><span class="line">&lt;IfModule dir_module&gt;</span><br><span class="line">    DirectoryIndex index.php index.html</span><br><span class="line">&lt;/IfModule&gt;</span><br><span class="line"></span><br><span class="line">&lt;Files <span class="string">".ht*"</span>&gt;</span><br><span class="line">    Require all denied</span><br><span class="line">&lt;/Files&gt;</span><br><span class="line"></span><br><span class="line">ErrorLog <span class="string">"logs/error_log"</span> <span class="comment"># 日志的保存位置</span></span><br><span class="line"></span><br><span class="line">LogLevel warn <span class="comment"># 日志的级别</span></span><br><span class="line"></span><br><span class="line">&lt;IfModule log_config_module&gt;</span><br><span class="line">    LogFormat <span class="string">"%h %l %u %t \"%r\" %&gt;s %b \"%&#123;Referer&#125;i\" \"%&#123;User-Agent&#125;i\""</span> combined</span><br><span class="line">    LogFormat <span class="string">"%h %l %u %t \"%r\" %&gt;s %b"</span> common</span><br><span class="line"></span><br><span class="line">    &lt;IfModule logio_module&gt;</span><br><span class="line">      <span class="comment"># You need to enable mod_logio.c to use %I and %O</span></span><br><span class="line">      LogFormat <span class="string">"%h %l %u %t \"%r\" %&gt;s %b \"%&#123;Referer&#125;i\" \"%&#123;User-Agent&#125;i\" %I %O"</span> combinedio</span><br><span class="line">    &lt;/IfModule&gt;</span><br><span class="line">        CustomLog <span class="string">"logs/access_log"</span> combined</span><br><span class="line">&lt;/IfModule&gt;</span><br><span class="line"></span><br><span class="line">&lt;IfModule alias_module&gt;</span><br><span class="line">    ScriptAlias /cgi-bin/ <span class="string">"/var/www/cgi-bin/"</span></span><br><span class="line">&lt;/IfModule&gt;</span><br><span class="line"></span><br><span class="line">&lt;Directory <span class="string">"/var/www/cgi-bin"</span>&gt;</span><br><span class="line">    AllowOverride None</span><br><span class="line">    Options None</span><br><span class="line">    Require all granted</span><br><span class="line">&lt;/Directory&gt;</span><br><span class="line"></span><br><span class="line">&lt;IfModule mime_module&gt;</span><br><span class="line">    TypesConfig /etc/mime.types</span><br><span class="line">    </span><br><span class="line">    AddType application/x-compress .Z</span><br><span class="line">    AddType application/x-gzip .gz .tgz</span><br><span class="line">    AddType application/x-httpd-php .php</span><br><span class="line">    AddType application/x-httpd-php-source .php5</span><br><span class="line">    </span><br><span class="line">    AddType text/html .shtml</span><br><span class="line">    AddOutputFilter INCLUDES .shtml</span><br><span class="line">&lt;/IfModule&gt;</span><br><span class="line"></span><br><span class="line">AddDefaultCharset UTF-8</span><br><span class="line"></span><br><span class="line">&lt;IfModule mime_magic_module&gt;</span><br><span class="line">    MIMEMagicFile conf/magic</span><br><span class="line">&lt;/IfModule&gt;</span><br><span class="line"></span><br><span class="line">EnableSendfile on</span><br><span class="line"></span><br><span class="line">IncludeOptional conf.d/*.conf</span><br><span class="line">ServerName localhost:80 <span class="comment"># 主站点名称（网站的主机名）</span></span><br><span class="line">AddType application/x-httpd-php .php</span><br><span class="line">DirectoryIndex index.php index.htm index.html <span class="comment"># 主页文件的设置（本例将主页文件设置为：index.html,index.htm和index.php）</span></span><br><span class="line">AddHandler php7-script .php</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 301 </tag>
            
            <tag> 302 </tag>
            
            <tag> 重定向 </tag>
            
            <tag> apache </tag>
            
            <tag> lamp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代理模式</title>
      <link href="/2020/07/26/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/07/26/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="WHAT"><a href="#WHAT" class="headerlink" title="WHAT"></a>WHAT</h2><h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><blockquote><p>代理模式是一种常见的设计模式，代理模式为另一个对象提供一个替身或占位符以控制对这个对象的访问</p></blockquote><h3 id="代理模式的用途"><a href="#代理模式的用途" class="headerlink" title="代理模式的用途"></a>代理模式的用途</h3><blockquote><p>代理模式为其他对象提供了一种代理以控制对这个对象的访问。在某些情况下，一个客户不想或者不能直接引用另一个对象，而代理对象可以在客户端和目标对象之间起到中介的作用</p></blockquote><blockquote><p>代理模式的应用场景主要有：</p><ul><li>Spring AOP </li><li>RPC</li><li>Java注解</li><li>性能监控</li></ul></blockquote><h3 id="代理模式的基本概念"><a href="#代理模式的基本概念" class="headerlink" title="代理模式的基本概念"></a>代理模式的基本概念</h3><h4 id="subject"><a href="#subject" class="headerlink" title="subject"></a>subject</h4><blockquote><p>抽象主题角色。定义代理类和真实主题的公共对外方法，也是代理类代理真实主题的方法</p></blockquote><h4 id="realsubject"><a href="#realsubject" class="headerlink" title="realsubject"></a>realsubject</h4><blockquote><p>真实主题角色。真正实现业务逻辑的类</p></blockquote><h4 id="proxy"><a href="#proxy" class="headerlink" title="proxy"></a>proxy</h4><blockquote><p>代理主题角色。用来代理和封装真实的主题</p></blockquote><h4 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line">left to right direction</span><br><span class="line"></span><br><span class="line">class client &#123;&#125;</span><br><span class="line">note left: 客户端</span><br><span class="line"></span><br><span class="line">interface Subject &#123;</span><br><span class="line">    + request()</span><br><span class="line">&#125;</span><br><span class="line">note top: 抽象主题角色</span><br><span class="line"></span><br><span class="line">class Proxy &#123;</span><br><span class="line">    - before()</span><br><span class="line">    + request()</span><br><span class="line">    - after()</span><br><span class="line">&#125;</span><br><span class="line">note left: 代理主题类</span><br><span class="line"></span><br><span class="line">class RealSubject &#123;</span><br><span class="line">    + request()</span><br><span class="line">&#125;</span><br><span class="line">note right: 真实主题类</span><br><span class="line"></span><br><span class="line">Subject &lt;|- RealSubject</span><br><span class="line">Subject &lt;|- Proxy</span><br><span class="line">Proxy --&gt; RealSubject: 调用真实主题的request方法</span><br><span class="line">client ..&gt; Subject</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><h4 id="按场景分类"><a href="#按场景分类" class="headerlink" title="按场景分类"></a>按场景分类</h4><blockquote><ul><li>远程代理</li><li>虚拟代理</li><li>Copy-on-Write代理</li><li>保护代理</li><li>Cache代理</li><li>防火墙代理</li><li>同步化代理</li><li>智能引用代理</li></ul></blockquote><h4 id="按字节码创建时机分类"><a href="#按字节码创建时机分类" class="headerlink" title="按字节码创建时机分类"></a>按字节码创建时机分类</h4><h5 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h5><blockquote><p>在程序运行前就已经存在代理类的字节码文件，代理类和真实主题角色的关系在程序运行前就确定了</p></blockquote><h5 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h5><blockquote><p>动态代理的代码不用程序员写，也就是程序编译后，并没有代理类的.class文件；代理类是在程序运行期间，由JVM根据反射机制动态的生成的</p></blockquote><h2 id="HOW"><a href="#HOW" class="headerlink" title="HOW"></a>HOW</h2><h3 id="静态代理实现"><a href="#静态代理实现" class="headerlink" title="静态代理实现"></a>静态代理实现</h3><h4 id="Subject"><a href="#Subject" class="headerlink" title="Subject"></a>Subject</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> club.hermit.study.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">request</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="RealSubject"><a href="#RealSubject" class="headerlink" title="RealSubject"></a>RealSubject</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> club.hermit.study.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RealSubject</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"real subject"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> club.hermit.study.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Subject subject;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Proxy</span><span class="params">(Subject subject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.subject = subject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        before();</span><br><span class="line">        subject.request();</span><br><span class="line">        after();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"proxy before"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"proxy after"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> club.hermit.study.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Subject proxy = <span class="keyword">new</span> Proxy(<span class="keyword">new</span> RealSubject());</span><br><span class="line">        proxy.request();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">proxy before</span><br><span class="line">real subject</span><br><span class="line">proxy after</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code 0</span><br></pre></td></tr></table></figure><h3 id="动态代理实现"><a href="#动态代理实现" class="headerlink" title="动态代理实现"></a>动态代理实现</h3><h4 id="JDK动态代理实现"><a href="#JDK动态代理实现" class="headerlink" title="JDK动态代理实现"></a>JDK动态代理实现</h4><h5 id="Subject-1"><a href="#Subject-1" class="headerlink" title="Subject"></a>Subject</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> club.hermit.study.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">request</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="RealSubject-1"><a href="#RealSubject-1" class="headerlink" title="RealSubject"></a>RealSubject</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> club.hermit.study.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RealSubject</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"real subject"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="JdkProxyHandler"><a href="#JdkProxyHandler" class="headerlink" title="JdkProxyHandler"></a>JdkProxyHandler</h5><blockquote><p>该类实现了InvocationHandler接口，此接口在后面的原理中详解</p><p>该类只是一个调用逻辑处理类，在该类的invode方法中，编写动态生成的Proxy中的X方法的处理逻辑（X方法也就是Proxy实现了Subject类中那个方法，此处就是request方法）</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> club.hermit.study.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdkProxyHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Object target; <span class="comment">// 被代理的对象，也就是上面的RealSubject类</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JdkProxyHandler</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">        before();</span><br><span class="line">        Object res = method.invoke(target, args);</span><br><span class="line">        after();</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"jdk proxy handler before"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"jdk proxy handler after"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="JdkProxyClient"><a href="#JdkProxyClient" class="headerlink" title="JdkProxyClient"></a>JdkProxyClient</h5><blockquote><p>在该Client类中，动态生成jdkProxy代理类是通过Proxy的newProxyInstance方法（注：该处的Proxy是java.lang.reflect.Proxy类）</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> club.hermit.study.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdkProxyClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        RealSubject realSubject = <span class="keyword">new</span> RealSubject();</span><br><span class="line">        ClassLoader classLoader = realSubject.getClass().getClassLoader();</span><br><span class="line">        Class[] interfaces = realSubject.getClass().getInterfaces();<span class="comment">// 获取被代理类实现的所有接口</span></span><br><span class="line">        InvocationHandler handler = <span class="keyword">new</span> JdkProxyHandler(realSubject);</span><br><span class="line">        <span class="comment">//此处动态创建代理类：</span></span><br><span class="line">        <span class="comment">// 1. JDK会根据传入的参数动态的在内存中创建和.class文件等同的字节码</span></span><br><span class="line">        <span class="comment">// 2. 然后根据创建的.class字节码在内存中生成一个代表该类的 java.lang.Class 对象</span></span><br><span class="line">        <span class="comment">// 3. 通过newProxyInstance创建实例</span></span><br><span class="line">        Subject jdkProxy = (Subject) Proxy.newProxyInstance(classLoader, interfaces, handler);</span><br><span class="line">        jdkProxy.request();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="输出结果-1"><a href="#输出结果-1" class="headerlink" title="输出结果"></a>输出结果</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">jdk proxy handler before</span><br><span class="line">real subject</span><br><span class="line">jdk proxy handler after</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code 0</span><br></pre></td></tr></table></figure><h4 id="CGLIB动态代理实现"><a href="#CGLIB动态代理实现" class="headerlink" title="CGLIB动态代理实现"></a>CGLIB动态代理实现</h4><blockquote><p>Maven中引入cglib相关包：</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="Subject-2"><a href="#Subject-2" class="headerlink" title="Subject"></a>Subject</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> club.hermit.study.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">request</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="RealSubject-2"><a href="#RealSubject-2" class="headerlink" title="RealSubject"></a>RealSubject</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> club.hermit.study.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RealSubject</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"real subject"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="CglibProxyInterceptor"><a href="#CglibProxyInterceptor" class="headerlink" title="CglibProxyInterceptor"></a>CglibProxyInterceptor</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> club.hermit.study.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodProxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CglibProxyInterceptor</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        before();</span><br><span class="line">        Object res = methodProxy.invokeSuper(o, objects);</span><br><span class="line">        after();</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"cglib proxy interceptor before"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"cglib proxy interceptor after"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="CglibProxyClient"><a href="#CglibProxyClient" class="headerlink" title="CglibProxyClient"></a>CglibProxyClient</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> club.hermit.study.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.Enhancer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CglibProxyClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        CglibProxyInterceptor cglibProxyInterceptor = <span class="keyword">new</span> CglibProxyInterceptor();</span><br><span class="line">        Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">        enhancer.setSuperclass(RealSubject<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        enhancer.setCallback(cglibProxyInterceptor);</span><br><span class="line"></span><br><span class="line">        Subject proxy = (Subject) enhancer.create();<span class="comment">//创建代理类</span></span><br><span class="line">        proxy.request();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="输出结果-2"><a href="#输出结果-2" class="headerlink" title="输出结果"></a>输出结果</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cglib proxy interceptor before</span><br><span class="line">real subject</span><br><span class="line">cglib proxy interceptor after</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code 0</span><br></pre></td></tr></table></figure><h2 id="WHY"><a href="#WHY" class="headerlink" title="WHY"></a>WHY</h2><h3 id="静态代理实现原理"><a href="#静态代理实现原理" class="headerlink" title="静态代理实现原理"></a>静态代理实现原理</h3><blockquote><p>静态代理的实现体现了 面向对象中的 面向interface编程！</p></blockquote><h3 id="静态代理的缺陷"><a href="#静态代理的缺陷" class="headerlink" title="静态代理的缺陷"></a>静态代理的缺陷</h3><blockquote><p>静态代理在复杂业务场景下并不适用，如：</p><ul><li>当Proxy类中要代理多种Subject类时，静态代理的实现方式会使Proxy类变的特别复杂，因为Proxy中要实现各种代理的各种Subject接口中声明的所有方法</li><li>当要增、删、改Subject类中方法时，Proxy类也要跟着改动</li></ul><p>而动态代理刚好解决了以上问题</p></blockquote><h3 id="动态代理实现原理"><a href="#动态代理实现原理" class="headerlink" title="动态代理实现原理"></a>动态代理实现原理</h3><blockquote><p>在<a href="[https://gtang94.github.io/2020/07/11/Java%E7%B1%BB%E5%9E%8B%E4%BF%A1%E6%81%AF/](https://gtang94.github.io/2020/07/11/Java类型信息/)">类加载机制</a>的加载阶段中，首先是通过类的全限定名来获取该类的二进制字节流(.class字节码)，此处的获取途径就有很多：</p><ul><li>从ZIP包获取</li><li>从网络中获取，如Applet</li><li>运行时计算生成。这中途径使用最多的是动态代理技术，在 java.lang.reflect.Proxy 类中，就是用了 ProxyGenerator.generateProxyClass 来为特定接口生成形式为 *$Proxy 的代理类的二进制字节流</li><li>由其他文件生成，如由JSP文件生成对应的Class类</li><li>从DB中获取</li></ul></blockquote><blockquote><p>动态代理就是根据接口或者RealSubject对象，由程序计算得到Proxy类的字节码，然后将该Proxy加载到JVM中使用的</p><p>那程序是怎么计算得到Proxy类字节码的呢？？</p><p>Java中有许多<a href="https://java-source.net/open-source/bytecode-libraries" target="_blank" rel="noopener">操作字节码的类库</a>，通常是通过这些类库来实现上面的计算Proxy字节码的。最常用的方式有以下两种：</p><ul><li>通过实现接口的方式： JDK动态代理</li><li>通过继承类的方式：CGLIB动态代理</li></ul></blockquote><h4 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h4><blockquote><p>JDK动态代理主要涉及 java.lang.reflect.Proxy 和 java.lang.reflect.InvocationHandler 类</p></blockquote><h5 id="java-lang-reflect-InvocationHandler"><a href="#java-lang-reflect-InvocationHandler" class="headerlink" title="java.lang.reflect.InvocationHandler"></a>java.lang.reflect.InvocationHandler</h5><blockquote><p>InvocationHandler 是由代理实例的调用处理程序实现的接口</p><p>该方法主要有invoke方法，用来处理代理实例上的方法调用并返回结果的</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.lang.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> Throwable</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="java-lang-reflect-Proxy"><a href="#java-lang-reflect-Proxy" class="headerlink" title="java.lang.reflect.Proxy"></a>java.lang.reflect.Proxy</h5><blockquote><p>该类提供了创建动态代理类和实体的静态方法，它也是由这些方法创建的所有动态代理类的超类</p></blockquote><blockquote><p>getInvocationHandler() 方法用于获取指定代理对象所关联的调用处理器</p></blockquote><blockquote><p>getProxyClass() 方法用于返回指定接口的代理类</p></blockquote><blockquote><p>newProxyInstance() 方法用于构造实现指定接口的代理类的一个新实例，所有方法会调用给定处理器对象的invoke方法</p></blockquote><blockquote><p>isProxyClass() 该方法用于返回cl类是否为一个代理类</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line">class Proxy &#123;</span><br><span class="line">    - serialVersionUID</span><br><span class="line">    - constructorParams</span><br><span class="line">    - proxyClassCache</span><br><span class="line">    # h</span><br><span class="line">    - key0</span><br><span class="line"></span><br><span class="line">    + getProxyClass(ClassLoader, Class&lt;?&gt;...)</span><br><span class="line">    - checkProxyAccess(Class&lt;?&gt;, ClassLoader, Class&lt;?&gt;...)</span><br><span class="line">    - getProxyClass0(ClassLoader, Class&lt;?&gt;...)</span><br><span class="line">    + newProxyInstance(ClassLoader, Class&lt;?&gt;[], InvocationHandler)</span><br><span class="line">    - checkNewProxyPermission(Class&lt;?&gt;, Class&lt;?&gt;)</span><br><span class="line">    + isProxyClass(Class&lt;?&gt;)</span><br><span class="line">    + getInvocationHandler(Object)</span><br><span class="line">    - defineClass0(ClassLoader, String, byte[], int, int)</span><br><span class="line">&#125;</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><h5 id="持久化JDK动态生成的Proxy类"><a href="#持久化JDK动态生成的Proxy类" class="headerlink" title="持久化JDK动态生成的Proxy类"></a>持久化JDK动态生成的Proxy类</h5><blockquote><p>改写JdkProxyClient类，将生成的Proxy持久化到硬盘中</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> club.hermit.study.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sun.misc.ProxyGenerator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdkProxyClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        RealSubject realSubject = <span class="keyword">new</span> RealSubject();</span><br><span class="line">        ClassLoader classLoader = realSubject.getClass().getClassLoader();</span><br><span class="line">        Class[] interfaces = realSubject.getClass().getInterfaces();</span><br><span class="line">        InvocationHandler handler = <span class="keyword">new</span> JdkProxyHandler(realSubject);</span><br><span class="line">        Subject proxy = (Subject) Proxy.newProxyInstance(classLoader, interfaces, handler);</span><br><span class="line">        proxy.request();</span><br><span class="line">        saveJdkProxy(realSubject.getClass(), <span class="string">"Proxy"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">saveJdkProxy</span><span class="params">(Class clz, String proxyName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] file = ProxyGenerator.generateProxyClass(proxyName, clz.getInterfaces());</span><br><span class="line">        String path = clz.getResource(<span class="string">"."</span>).getPath();</span><br><span class="line">        FileOutputStream out = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            out = <span class="keyword">new</span> FileOutputStream(path + proxyName + <span class="string">".class"</span>);</span><br><span class="line">            out.write(file);</span><br><span class="line">            out.flush();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                out.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>动态生成的代理类Proxy如下：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> club.hermit.study.proxy.Subject;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.UndeclaredThrowableException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">extends</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">reflect</span>.<span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m1;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m2;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m3;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m0;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Proxy</span><span class="params">(InvocationHandler var1)</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(var1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object var1)</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Boolean)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m1, <span class="keyword">new</span> Object[]&#123;var1&#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var3;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var4) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var4);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (String)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m2, (Object[])<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m3, (Object[])<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Integer)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m0, (Object[])<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            m1 = Class.forName(<span class="string">"java.lang.Object"</span>).getMethod(<span class="string">"equals"</span>, Class.forName(<span class="string">"java.lang.Object"</span>));</span><br><span class="line">            m2 = Class.forName(<span class="string">"java.lang.Object"</span>).getMethod(<span class="string">"toString"</span>);</span><br><span class="line">            m3 = Class.forName(<span class="string">"club.hermit.study.proxy.Subject"</span>).getMethod(<span class="string">"request"</span>);</span><br><span class="line">            m0 = Class.forName(<span class="string">"java.lang.Object"</span>).getMethod(<span class="string">"hashCode"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchMethodError(var2.getMessage());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoClassDefFoundError(var3.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>从上面动态生成的Proxy可以看到：</p><ul><li>该类生成了equals、toString、hashCode、request方法</li><li>该类继承了java.lang.reflect.Proxy 类，实现了Subject类</li><li>该类的参数h是Proxy类中的InvocationHandler接口的实例变量，并且在request中，h调用了InvocationHandler接口的invode方法，也就是调用了上面手动实现的JdkProxyHandler接口中的invoke方法</li><li>该类中的m3是静态代码块中通过反射获取到的Subject接口中的request方法</li></ul></blockquote><h5 id="调用时序图"><a href="#调用时序图" class="headerlink" title="调用时序图"></a>调用时序图</h5><blockquote><p>所以，整个类的调用时序图如下：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line"></span><br><span class="line">class JdkProxyClient &#123;&#125;</span><br><span class="line">class JdkProxy &#123;</span><br><span class="line">    - m0</span><br><span class="line">    - m1</span><br><span class="line">    - m2</span><br><span class="line">    - m3</span><br><span class="line">    + equals()</span><br><span class="line">    + hashCode()</span><br><span class="line">    + toString()</span><br><span class="line">    + request()</span><br><span class="line">&#125;</span><br><span class="line">class JdkProxyHandler &#123;</span><br><span class="line">    ~ target</span><br><span class="line">    + invoke()</span><br><span class="line">    - before</span><br><span class="line">    - after</span><br><span class="line">&#125;</span><br><span class="line">class RealSubject &#123;</span><br><span class="line">    ~ request()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">JdkProxyClient -&gt; JdkProxy: request()</span><br><span class="line">JdkProxy -&gt; JdkProxyHandler: h.invode()</span><br><span class="line">JdkProxyHandler -&gt; RealSubject: method.invoke()</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><h4 id="CGLIB动态代理"><a href="#CGLIB动态代理" class="headerlink" title="CGLIB动态代理"></a>CGLIB动态代理</h4><blockquote><p>GBLIB创建动态代理类的模式是：</p><ul><li>查找目标类上的所有非final的public类型的方法定义</li><li>将这些方法的定义转换成字节码</li><li>将组成的字节码转换成响应的代理的class对象</li><li>实现MethodInterceptor接口，用来处理对代理类上所有方法的请求</li></ul></blockquote><h4 id="JDK和CGLIB实现动态代理的对比"><a href="#JDK和CGLIB实现动态代理的对比" class="headerlink" title="JDK和CGLIB实现动态代理的对比"></a>JDK和CGLIB实现动态代理的对比</h4><table><thead><tr><th>代理方式</th><th>实现</th><th>优点</th></tr></thead><tbody><tr><td>JDK</td><td>实现被代理对象的接口</td><td>1. 最小依赖关系，减少依赖意味着简化开发和维护，JDK本身支持，比CGLIB更可靠；2. 平滑进行JDK版本升级，而字节码类库通常需要进行更新以保证在新版本的Java上能够正常使用；3.代码实现简单</td></tr><tr><td>CGLIB</td><td>继承被代理类</td><td>1. 无需实现接口，达到代码类无侵入；2. 值操作我们关系的类，而不必为其他相关类增加工作量；3. 高性能</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java动态代理 </tag>
            
            <tag> Java静态代理 </tag>
            
            <tag> JDK动态代理 </tag>
            
            <tag> CGLIB动态代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java注解</title>
      <link href="/2020/07/25/Java%E6%B3%A8%E8%A7%A3/"/>
      <url>/2020/07/25/Java%E6%B3%A8%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="WHAT"><a href="#WHAT" class="headerlink" title="WHAT"></a>WHAT</h2><h3 id="注解是什么"><a href="#注解是什么" class="headerlink" title="注解是什么"></a>注解是什么</h3><blockquote><p>Java注解又叫Java标注，是Java5.0开始支持加入源代码的特殊语法元数据</p></blockquote><blockquote><p>Java语言中的类、方法、变量、参数、包都可以被标注，Java标注可以通过反射获取标注内容，在编译生成class文件时，可以嵌入到字节码中，JVM可以保留标注的内容，在运行时可以获取到标注内容</p></blockquote><h3 id="注解应用场景"><a href="#注解应用场景" class="headerlink" title="注解应用场景"></a>注解应用场景</h3><blockquote><ul><li>生成文档，Java最早提供的注解</li><li>跟踪代码依赖，替代配置文件，Spring中大量使用注解</li><li>参数校验 / 拦截器 等等</li></ul></blockquote><blockquote><p>自定义注解一般有两种用法：</p><ul><li>自定义注解处理器</li><li>配合Spring等框架使用</li></ul></blockquote><h3 id="JDK内置注解"><a href="#JDK内置注解" class="headerlink" title="JDK内置注解"></a>JDK内置注解</h3><blockquote><p>Java定义的注解一共有7个，3个在 java.lang 中，4个在 java.lang.annotation 中（JDK7之前）</p></blockquote><h4 id="作用在代码中的注解"><a href="#作用在代码中的注解" class="headerlink" title="作用在代码中的注解"></a>作用在代码中的注解</h4><h5 id="Override"><a href="#Override" class="headerlink" title="@Override"></a>@Override</h5><blockquote><p>检查该方法是否是重写方法</p><p>如果发现其父类，或者是引用的接口中并没有该方法时，会报编译错误</p></blockquote><h5 id="Deprecated"><a href="#Deprecated" class="headerlink" title="@Deprecated"></a>@Deprecated</h5><blockquote><p>标记过时方法</p><p>如果使用了注解为它的元素，编译器就会发出警告消息</p></blockquote><h5 id="Suppress-Warnings"><a href="#Suppress-Warnings" class="headerlink" title="@Suppress Warnings"></a>@Suppress Warnings</h5><blockquote><p>指示编译器去忽略注解中声明的警告</p></blockquote><h4 id="作用在注解上的注解（也叫-元注解）"><a href="#作用在注解上的注解（也叫-元注解）" class="headerlink" title="作用在注解上的注解（也叫 元注解）"></a>作用在注解上的注解（也叫 元注解）</h4><h5 id="Target"><a href="#Target" class="headerlink" title="@Target"></a>@Target</h5><blockquote><p>描述了该注解可以用于什么地方，它的值在 java.lang.annotation.ElementType 中定义</p></blockquote><blockquote><p>ElementType的参数包括：</p><ul><li>CONSTRUCTOR：声明构造器</li><li>FIELD：声明域（包括enum实例）</li><li>LOCAL_VARIABLE：局部变量声明</li><li>METHOD：声明方法</li><li>PACKAGE：声明包</li><li>PARAMETER：声明参数</li><li>TYPE：类、接口（包括注解类型）或enum的声明</li></ul></blockquote><h5 id="Retention"><a href="#Retention" class="headerlink" title="@Retention"></a>@Retention</h5><blockquote><p>描述了在什么级别保存该注解信息（注解的保留时间范围），值在 java.lang.annotatioin.RetentionPolicy中定义</p></blockquote><blockquote><p>RetentionPolicy参数包括：</p><ul><li>SOURCE：在源文件中保留，编译时该注解就会被忽略</li><li>CLASS：跟随源文件编译到.class文件中，运行时就会被忽略</li><li>RUNTIME：在运行时候也保留，因此可通过反射机制读取注解的信息</li></ul></blockquote><h5 id="Documented"><a href="#Documented" class="headerlink" title="@Documented"></a>@Documented</h5><blockquote><p>将此注解包含在Javadoc中</p></blockquote><h5 id="Inherited"><a href="#Inherited" class="headerlink" title="@Inherited"></a>@Inherited</h5><blockquote><p>允许子类继承父类中的注解</p></blockquote><h4 id="Java7新增的注解"><a href="#Java7新增的注解" class="headerlink" title="Java7新增的注解"></a>Java7新增的注解</h4><h5 id="SafeVarargs"><a href="#SafeVarargs" class="headerlink" title="@SafeVarargs"></a>@SafeVarargs</h5><blockquote><p>Java 7开始支持，忽略任何使用参数为泛型变量的方法或构造函数调用产生的警告</p></blockquote><h5 id="FunctionalInterface"><a href="#FunctionalInterface" class="headerlink" title="@FunctionalInterface"></a>@FunctionalInterface</h5><blockquote><p>Java 8开始支持，标识一个匿名函数或函数式接口</p></blockquote><h5 id="Repeatable"><a href="#Repeatable" class="headerlink" title="@Repeatable"></a>@Repeatable</h5><blockquote><p>Java 8开始支持，标识某注解可以在同一个声明上使用多次</p></blockquote><h2 id="注解用法"><a href="#注解用法" class="headerlink" title="注解用法"></a>注解用法</h2><h3 id="自定义注解规范"><a href="#自定义注解规范" class="headerlink" title="自定义注解规范"></a>自定义注解规范</h3><blockquote><p>注释声明用 @interface，且</p><ul><li>该声明会自动继承 java.lang.annotation.Annotation 接口</li><li>用该声明后不能再继承其他类或接口</li></ul><p>声明格式为：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> 注解名 &#123;</span><br><span class="line">  修饰符 返回值 属性名() 默认值</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>修饰符 ：修饰符只能用public或default</p></blockquote><blockquote><p>返回值：返回值只能是</p><ul><li>Java基本数据类型(byte、char、short、int、float、double、long、boolean)</li><li>String类型</li><li>Class类型</li><li>enum类型</li><li>Annotation类型</li><li>以类型的数组</li></ul></blockquote><blockquote><p>属性名：该注解的属性名，如@UseCase(id=12,name=”gg”)中的id和name</p></blockquote><blockquote><p>默认值：不指定属性名时的默认值，这块可以不要</p></blockquote><h3 id="定义注解"><a href="#定义注解" class="headerlink" title="定义注解"></a>定义注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> club.hermit.study.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.FIELD)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Name &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注解处理器"><a href="#注解处理器" class="headerlink" title="注解处理器"></a>注解处理器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> club.hermit.study.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NameAnnotationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getInfo</span><span class="params">(Class&lt;?&gt; clz)</span> </span>&#123;</span><br><span class="line">        String res = <span class="string">""</span>;</span><br><span class="line">        Field[] declaredFieds = clz.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field : declaredFieds) &#123;</span><br><span class="line">            <span class="keyword">if</span> (field.isAnnotationPresent(Name<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">                Name nameAnnotation = field.getAnnotation(Name<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">                res = nameAnnotation.value();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注解属性"><a href="#注解属性" class="headerlink" title="注解属性"></a>注解属性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> club.hermit.study.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Name</span>(<span class="string">"gtang94"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="NameTest"><a href="#NameTest" class="headerlink" title="NameTest"></a>NameTest</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> club.hermit.study.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NameTest</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String name = NameAnnotationHandler.getInfo(Person<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gtang94</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code 0</span><br></pre></td></tr></table></figure><h2 id="注解源码"><a href="#注解源码" class="headerlink" title="注解源码"></a>注解源码</h2><h3 id="java-lang-annotation包"><a href="#java-lang-annotation包" class="headerlink" title="java.lang.annotation包"></a>java.lang.annotation包</h3><h4 id="Annotation"><a href="#Annotation" class="headerlink" title="Annotation"></a>Annotation</h4><blockquote><p>所有注释类型扩展的公共接口。该接口本身并不定义注释类型</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Annotation</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">toString</span><span class="params">()</span></span>;</span><br><span class="line">    Class&lt;? extends Annotation&gt; annotationType();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>annotationType()方法返回此注释的注释类型</p></blockquote><h4 id="异常或错误"><a href="#异常或错误" class="headerlink" title="异常或错误"></a>异常或错误</h4><h5 id="AnnotationFormatError"><a href="#AnnotationFormatError" class="headerlink" title="AnnotationFormatError"></a>AnnotationFormatError</h5><blockquote><p>该类继承 Error 类</p></blockquote><blockquote><p>当注释解析器尝试从类文件读取注释并确认注释格式错误时抛出错误</p></blockquote><h5 id="AnnotationTypeMismatchException"><a href="#AnnotationTypeMismatchException" class="headerlink" title="AnnotationTypeMismatchException"></a>AnnotationTypeMismatchException</h5><blockquote><p>继承 RuntimeException 类</p></blockquote><blockquote><p>抛出以指示程序已尝试访问主机编辑后类已更改的注释元素</p></blockquote><h5 id="IncompleteAnnotationException"><a href="#IncompleteAnnotationException" class="headerlink" title="IncompleteAnnotationException"></a>IncompleteAnnotationException</h5><blockquote><p>抛出以指示程序已尝试访问在编辑或序列化注释后添加到注释类型定义的注释类型的元素的异常</p></blockquote><h4 id="元注释"><a href="#元注释" class="headerlink" title="元注释"></a>元注释</h4><h5 id="Documented-1"><a href="#Documented-1" class="headerlink" title="Documented"></a>Documented</h5><h5 id="Inherited-1"><a href="#Inherited-1" class="headerlink" title="Inherited"></a>Inherited</h5><h5 id="Native"><a href="#Native" class="headerlink" title="Native"></a>Native</h5><blockquote><p>Java1.8才引入的元注释</p></blockquote><h5 id="Repeatable-1"><a href="#Repeatable-1" class="headerlink" title="Repeatable"></a>Repeatable</h5><blockquote><p>Java1.8才引入的元注释</p></blockquote><h5 id="Retention-1"><a href="#Retention-1" class="headerlink" title="Retention"></a>Retention</h5><h5 id="Target-1"><a href="#Target-1" class="headerlink" title="Target"></a>Target</h5><h4 id="ElementType"><a href="#ElementType" class="headerlink" title="ElementType"></a>ElementType</h4><blockquote><p>该枚举类中定义了在Java程序中可能出现注释的位置的分类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> ElementType &#123;</span><br><span class="line">    <span class="comment">/** Class, interface (including annotation type), or enum declaration */</span></span><br><span class="line">    TYPE,</span><br><span class="line">    <span class="comment">/** Field declaration (includes enum constants) */</span></span><br><span class="line">    FIELD,</span><br><span class="line">    <span class="comment">/** Method declaration */</span></span><br><span class="line">    METHOD,</span><br><span class="line">    <span class="comment">/** Formal parameter declaration */</span></span><br><span class="line">    PARAMETER,</span><br><span class="line">    <span class="comment">/** Constructor declaration */</span></span><br><span class="line">    CONSTRUCTOR,</span><br><span class="line">    <span class="comment">/** Local variable declaration */</span></span><br><span class="line">    LOCAL_VARIABLE,</span><br><span class="line">    <span class="comment">/** Annotation type declaration */</span></span><br><span class="line">    ANNOTATION_TYPE,</span><br><span class="line">    <span class="comment">/** Package declaration */</span></span><br><span class="line">    PACKAGE,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Type parameter declaration</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TYPE_PARAMETER,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Use of a type</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TYPE_USE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="RetentionPolicy"><a href="#RetentionPolicy" class="headerlink" title="RetentionPolicy"></a>RetentionPolicy</h4><blockquote><p>注释保留策略。这个枚举类型的常量标识了在何时保留注释</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> RetentionPolicy &#123;</span><br><span class="line">    SOURCE,</span><br><span class="line">    CLASS,</span><br><span class="line">    RUNTIME</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注解原理"><a href="#注解原理" class="headerlink" title="注解原理"></a>注解原理</h3><blockquote><p>注解本质是一个继承了Annotation 的特殊接口，其具体实现类是Java 运行时生成的动态代理类。而我们通过反射获取注解时，返回的是Java 运行时生成的动态代理对象$Proxy1。通过代理对象调用自定义注解（接口）的方法，会最终调用AnnotationInvocationHandler 的invoke 方法。该方法会从memberValues 这个Map 中索引出对应的值。而memberValues 的来源是Java 常量池。</p><p>— 摘自《<a href="https://www.cnblogs.com/acm-bingzi/p/javaAnnotation.html" target="_blank" rel="noopener">注解Annotation实现原理与自定义注解例子</a>》</p></blockquote><h4 id="将动态代理对象-Proxy1持久化到硬盘"><a href="#将动态代理对象-Proxy1持久化到硬盘" class="headerlink" title="将动态代理对象$Proxy1持久化到硬盘"></a>将动态代理对象$Proxy1持久化到硬盘</h4><blockquote><p>在NameAnnotationHandler断点debug，可知动态生成了$Proxy1代理类</p></blockquote><p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1595751725/WechatIMG1_kerabq.png" alt="=annotation"></p><blockquote><p>修改NameTest，将$Proxy1持久化</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> club.hermit.study.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NameTest</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.setProperty(<span class="string">"sun.misc.ProxyGenerator.saveGeneratedFiles"</span>, <span class="string">"true"</span>);</span><br><span class="line">        String name = NameAnnotationHandler.getInfo(Person<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>点击重新运行后得到$Proxy1.class源码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by Fernflower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.sun.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> club.hermit.study.annotation.Name;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.UndeclaredThrowableException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> $<span class="title">Proxy1</span> <span class="keyword">extends</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">Name</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m1;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m2;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m4;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m0;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m3;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $Proxy1(InvocationHandler var1) <span class="keyword">throws</span>  &#123;</span><br><span class="line">        <span class="keyword">super</span>(var1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object var1)</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Boolean)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m1, <span class="keyword">new</span> Object[]&#123;var1&#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var3;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var4) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var4);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (String)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m2, (Object[])<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Class <span class="title">annotationType</span><span class="params">()</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Class)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m4, (Object[])<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Integer)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m0, (Object[])<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">value</span><span class="params">()</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (String)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m3, (Object[])<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            m1 = Class.forName(<span class="string">"java.lang.Object"</span>).getMethod(<span class="string">"equals"</span>, Class.forName(<span class="string">"java.lang.Object"</span>));</span><br><span class="line">            m2 = Class.forName(<span class="string">"java.lang.Object"</span>).getMethod(<span class="string">"toString"</span>);</span><br><span class="line">            m4 = Class.forName(<span class="string">"club.hermit.study.annotation.Name"</span>).getMethod(<span class="string">"annotationType"</span>);</span><br><span class="line">            m0 = Class.forName(<span class="string">"java.lang.Object"</span>).getMethod(<span class="string">"hashCode"</span>);</span><br><span class="line">            m3 = Class.forName(<span class="string">"club.hermit.study.annotation.Name"</span>).getMethod(<span class="string">"value"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchMethodError(var2.getMessage());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoClassDefFoundError(var3.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>由$Proxy1.class源码可知：</p><ul><li>$Proxy1继承了 Proxy 类，实现了Name接口（但Name是@interface声明的，并不是一个接口啊!?）</li><li>value()方法中，调用InvocationHandler接口的invoke方法</li></ul></blockquote><h4 id="反编译Name接口"><a href="#反编译Name接口" class="headerlink" title="反编译Name接口"></a>反编译Name接口</h4><h5 id="反编译工具"><a href="#反编译工具" class="headerlink" title="反编译工具"></a>反编译工具</h5><blockquote><p>javap是java内置的反编译工具，具体用法如下：</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">gtang94MacBook-Pro:note tangguoqiang$ javap -<span class="built_in">help</span></span><br><span class="line">用法: javap &lt;options&gt; &lt;classes&gt;</span><br><span class="line">其中, 可能的选项包括:</span><br><span class="line">  -<span class="built_in">help</span>  --<span class="built_in">help</span>  -?        输出此用法消息</span><br><span class="line">  -version                 版本信息</span><br><span class="line">  -v  -verbose             输出附加信息</span><br><span class="line">  -l                       输出行号和本地变量表</span><br><span class="line">  -public                  仅显示公共类和成员</span><br><span class="line">  -protected               显示受保护的/公共类和成员</span><br><span class="line">  -package                 显示程序包/受保护的/公共类</span><br><span class="line">                           和成员 (默认)</span><br><span class="line">  -p  -private             显示所有类和成员</span><br><span class="line">  -c                       对代码进行反汇编</span><br><span class="line">  -s                       输出内部类型签名</span><br><span class="line">  -sysinfo                 显示正在处理的类的</span><br><span class="line">                           系统信息 (路径, 大小, 日期, MD5 散列)</span><br><span class="line">  -constants               显示最终常量</span><br><span class="line">  -classpath &lt;path&gt;        指定查找用户类文件的位置</span><br><span class="line">  -cp &lt;path&gt;               指定查找用户类文件的位置</span><br><span class="line">  -bootclasspath &lt;path&gt;    覆盖引导类文件的位置</span><br></pre></td></tr></table></figure><h5 id="反编译Name"><a href="#反编译Name" class="headerlink" title="反编译Name"></a>反编译Name</h5><blockquote><p>执行 javap -v Name.class 后输出Name.class信息，可知：</p><ul><li>Name 接口继承了 java.lang.annotation.Annotation 接口</li><li>ACC_ANNOTATION 表名Name是一个注解</li></ul></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">gtang94MacBook-Pro:annotation tangguoqiang$ javap -v Name.class</span><br><span class="line">Classfile /Users/gtang94/data/recharge/study/study/target/classes/club/hermit/study/annotation/Name.class</span><br><span class="line">  Last modified 2020-7-26; size 452 bytes</span><br><span class="line">  MD5 checksum 37d757a80b01e1ac9855c35355f0afc1</span><br><span class="line">  Compiled from <span class="string">"Name.java"</span></span><br><span class="line">public interface club.hermit.study.annotation.Name extends java.lang.annotation.Annotation</span><br><span class="line">  minor version: 0</span><br><span class="line">  major version: 52</span><br><span class="line">  flags: ACC_PUBLIC, ACC_INTERFACE, ACC_ABSTRACT, ACC_ANNOTATION</span><br><span class="line">Constant pool:</span><br><span class="line">   <span class="comment">#1 = Class              #17            // club/hermit/study/annotation/Name</span></span><br><span class="line">   <span class="comment">#2 = Class              #18            // java/lang/Object</span></span><br><span class="line">   <span class="comment">#3 = Class              #19            // java/lang/annotation/Annotation</span></span><br><span class="line">   <span class="comment">#4 = Utf8               value</span></span><br><span class="line">   <span class="comment">#5 = Utf8               ()Ljava/lang/String;</span></span><br><span class="line">   <span class="comment">#6 = Utf8               AnnotationDefault</span></span><br><span class="line">   <span class="comment">#7 = Utf8</span></span><br><span class="line">   <span class="comment">#8 = Utf8               SourceFile</span></span><br><span class="line">   <span class="comment">#9 = Utf8               Name.java</span></span><br><span class="line">  <span class="comment">#10 = Utf8               RuntimeVisibleAnnotations</span></span><br><span class="line">  <span class="comment">#11 = Utf8               Ljava/lang/annotation/Retention;</span></span><br><span class="line">  <span class="comment">#12 = Utf8               Ljava/lang/annotation/RetentionPolicy;</span></span><br><span class="line">  <span class="comment">#13 = Utf8               RUNTIME</span></span><br><span class="line">  <span class="comment">#14 = Utf8               Ljava/lang/annotation/Target;</span></span><br><span class="line">  <span class="comment">#15 = Utf8               Ljava/lang/annotation/ElementType;</span></span><br><span class="line">  <span class="comment">#16 = Utf8               FIELD</span></span><br><span class="line">  <span class="comment">#17 = Utf8               club/hermit/study/annotation/Name</span></span><br><span class="line">  <span class="comment">#18 = Utf8               java/lang/Object</span></span><br><span class="line">  <span class="comment">#19 = Utf8               java/lang/annotation/Annotation</span></span><br><span class="line">&#123;</span><br><span class="line">  public abstract java.lang.String value();</span><br><span class="line">    descriptor: ()Ljava/lang/String;</span><br><span class="line">    flags: ACC_PUBLIC, ACC_ABSTRACT</span><br><span class="line">    AnnotationDefault:</span><br><span class="line">      default_value: s<span class="comment">#7&#125;</span></span><br><span class="line">SourceFile: <span class="string">"Name.java"</span></span><br><span class="line">RuntimeVisibleAnnotations:</span><br><span class="line">  0: <span class="comment">#11(#4=e#12.#13)</span></span><br><span class="line">  1: <span class="comment">#14(#4=[e#15.#16])</span></span><br></pre></td></tr></table></figure><h5 id="调用逻辑处理类"><a href="#调用逻辑处理类" class="headerlink" title="调用逻辑处理类"></a>调用逻辑处理类</h5><blockquote><p>注释是通过动态代理实现的，那调用逻辑处理类是在哪的呢？也即InvocationHandler的实现类是哪个</p><p>通过debug单步运行NameAnnotationHandler类，如下可知调用逻辑处理类是 sun.reflect.annotation.AnnotationInvocationHandler</p></blockquote><p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1595763069/WechatIMG2_umpwhf.png" alt="handler"></p><blockquote><p>sun.reflect.annotation.AnnotationInvocationHandler类的invoke()源码如下：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object var1, Method var2, Object[] var3)</span> </span>&#123;</span><br><span class="line">    String var4 = var2.getName();</span><br><span class="line">    Class[] var5 = var2.getParameterTypes();</span><br><span class="line">    <span class="keyword">if</span> (var4.equals(<span class="string">"equals"</span>) &amp;&amp; var5.length == <span class="number">1</span> &amp;&amp; var5[<span class="number">0</span>] == Object<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.equalsImpl(var3[<span class="number">0</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (var5.length != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError(<span class="string">"Too many parameters for an annotation method"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">byte</span> var7 = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">switch</span>(var4.hashCode()) &#123;</span><br><span class="line">        <span class="keyword">case</span> -<span class="number">1776922004</span>:</span><br><span class="line">            <span class="keyword">if</span> (var4.equals(<span class="string">"toString"</span>)) &#123;</span><br><span class="line">                var7 = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">147696667</span>:</span><br><span class="line">            <span class="keyword">if</span> (var4.equals(<span class="string">"hashCode"</span>)) &#123;</span><br><span class="line">                var7 = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1444986633</span>:</span><br><span class="line">            <span class="keyword">if</span> (var4.equals(<span class="string">"annotationType"</span>)) &#123;</span><br><span class="line">                var7 = <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span>(var7) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.toStringImpl();</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.hashCodeImpl();</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.type;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            Object var6 = <span class="keyword">this</span>.memberValues.get(var4);</span><br><span class="line">            <span class="keyword">if</span> (var6 == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IncompleteAnnotationException(<span class="keyword">this</span>.type, var4);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (var6 <span class="keyword">instanceof</span> ExceptionProxy) &#123;</span><br><span class="line">                <span class="keyword">throw</span> ((ExceptionProxy)var6).generateException();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (var6.getClass().isArray() &amp;&amp; Array.getLength(var6) != <span class="number">0</span>) &#123;</span><br><span class="line">                    var6 = <span class="keyword">this</span>.cloneArray(var6);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> var6;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 源码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 注解 </tag>
            
            <tag> 反编译 </tag>
            
            <tag> 动态代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java类型信息</title>
      <link href="/2020/07/11/Java%E7%B1%BB%E5%9E%8B%E4%BF%A1%E6%81%AF/"/>
      <url>/2020/07/11/Java%E7%B1%BB%E5%9E%8B%E4%BF%A1%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在某些情况下，Java需要在运行时再发现和确定类型信息，发现和确定用到的方法就是RTTI（Runtime Type Infomation，运行时类型信息），Java中的RTTI主要有个下面两种方式：</p><ul><li>传统RTTI ： 假定在编译时已经知道了所有的类型</li><li>反射 ： 允许在运行时发现和使用类的信息</li></ul></blockquote><blockquote><p><strong>运行时类型信息</strong> 使得程序员从只能在编译期执行面向类型的操作的禁锢中解脱了出来</p></blockquote><h2 id="传统RTTI"><a href="#传统RTTI" class="headerlink" title="传统RTTI"></a>传统RTTI</h2><blockquote><p>也叫RTTI。是通过继承和多态来实现的，在运行时通过调用超类的方法来实现具体的功能</p></blockquote><blockquote><p>传统RTTI有3中实现方式：</p><ul><li>向上转型或向下转型</li><li>通过Class对象(注：用了Class类并不代表就是反射)</li><li>通过instanceof或isInstance()</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span> + <span class="string">".draw()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Circle"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Square"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShapeTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Shape&gt; list = Arrays.asList(</span><br><span class="line">                <span class="keyword">new</span> Circle(),</span><br><span class="line">                <span class="keyword">new</span> Square()</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">for</span> (Shape shape : list) &#123;</span><br><span class="line">            shape.draw();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Circle.draw()</span><br><span class="line">Square.draw()</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code 0</span><br></pre></td></tr></table></figure><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><h3 id="反射是什么"><a href="#反射是什么" class="headerlink" title="反射是什么"></a>反射是什么</h3><blockquote><p>反射是RTTI的另一种实现方式，是在Java程序运行时，动态的获取信息已经动态调用对象方法的机制</p></blockquote><h3 id="反射用在啥地方"><a href="#反射用在啥地方" class="headerlink" title="反射用在啥地方"></a>反射用在啥地方</h3><blockquote><p>在平时项目开发中，很少用反射，但在更深层次的模块化开发、框架开发中，经常用到反射。例如：</p><ul><li>动态代理设计模式</li><li>Spring框架</li><li>JDBC</li></ul></blockquote><h3 id="传统RTTI和反射的区别"><a href="#传统RTTI和反射的区别" class="headerlink" title="传统RTTI和反射的区别"></a>传统RTTI和反射的区别</h3><blockquote><p>RTTI在编译期就需要.class文件，而反射不需要</p></blockquote><h2 id="反射基本用法"><a href="#反射基本用法" class="headerlink" title="反射基本用法"></a>反射基本用法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span> + <span class="string">".draw()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String nameStr = <span class="string">"CircleNameStr"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> redius;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> PI = <span class="number">3.1415</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Circle</span><span class="params">(<span class="keyword">float</span> redius)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.redius = redius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getRedius</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRedius</span><span class="params">(<span class="keyword">float</span> redius)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.redius = redius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> PI * <span class="keyword">this</span>.redius * redius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Circle"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取类的所有变量"><a href="#获取类的所有变量" class="headerlink" title="获取类的所有变量"></a>获取类的所有变量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShapeTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Class circle = Circle<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">        System.out.println(circle.getName()); <span class="comment">// 获取类名</span></span><br><span class="line">        Field[] fields1 = circle.getFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field : fields1) &#123;</span><br><span class="line">            <span class="keyword">int</span> modifiers = field.getModifiers(); <span class="comment">// 获取访问权限</span></span><br><span class="line">            System.out.println(Modifier.toString(modifiers));</span><br><span class="line">            System.out.println(field.getType().getName() + <span class="string">" : "</span> + field.getName()); <span class="comment">//获取变量类型和变量名称</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">        Field[] fields2 = circle.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field : fields2) &#123;</span><br><span class="line">            <span class="keyword">int</span> modifiers = field.getModifiers();</span><br><span class="line">            System.out.println(Modifier.toString(modifiers));</span><br><span class="line">            System.out.println(field.getType().getName() + <span class="string">" : "</span> + field.getName());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">club.hermit.study.reflect.Circle</span><br><span class="line">public</span><br><span class="line">java.lang.String : nameStr</span><br><span class="line">public static final</span><br><span class="line">double : PI</span><br><span class="line"></span><br><span class="line">public</span><br><span class="line">java.lang.String : nameStr</span><br><span class="line">private</span><br><span class="line"><span class="built_in">float</span> : redius</span><br><span class="line">public static final</span><br><span class="line">double : PI</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code 0</span><br></pre></td></tr></table></figure><h3 id="获取类的所有方法"><a href="#获取类的所有方法" class="headerlink" title="获取类的所有方法"></a>获取类的所有方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShapeTest2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Class circle = Circle<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">        System.out.println(<span class="string">"类名: "</span> + circle.getName()); <span class="comment">// 获取类名</span></span><br><span class="line"></span><br><span class="line">        Method[] methods1 = circle.getMethods(); <span class="comment">// 获取所有public方法</span></span><br><span class="line">        System.out.println(<span class="string">"=====所有public方法：====="</span>);</span><br><span class="line">        <span class="keyword">for</span> (Method method : methods1) &#123;</span><br><span class="line">            <span class="keyword">int</span> modifiers = method.getModifiers(); <span class="comment">// 获取权限修饰符</span></span><br><span class="line">            System.out.println(<span class="string">"方法修饰符: "</span> + Modifier.toString(modifiers));</span><br><span class="line"></span><br><span class="line">            Class resType = method.getReturnType(); <span class="comment">// 获取返回值</span></span><br><span class="line">            System.out.println(<span class="string">"方法返回值: "</span> + resType.getName() + <span class="string">" : "</span> + method.getName());</span><br><span class="line"></span><br><span class="line">            Parameter[] parameters = method.getParameters(); <span class="comment">// 获取参数</span></span><br><span class="line">            <span class="keyword">if</span> (parameters.length != <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.print(<span class="string">"方法参数: "</span>);</span><br><span class="line">                <span class="keyword">for</span> (Parameter parameter : parameters) &#123;</span><br><span class="line">                    System.out.print(parameter.getType().getName() + <span class="string">" : "</span> + parameter.getName());</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">""</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Class[] ex = method.getExceptionTypes(); <span class="comment">// 获取异常</span></span><br><span class="line">            <span class="keyword">if</span> (ex.length != <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.print(<span class="string">"方法异常: "</span>);</span><br><span class="line">                <span class="keyword">for</span> (Class <span class="keyword">var</span> : ex) &#123;</span><br><span class="line">                    System.out.print(<span class="keyword">var</span>.getName());</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">""</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"=====所有方法====="</span>);</span><br><span class="line"></span><br><span class="line">        Method[] methods2 = circle.getDeclaredMethods(); <span class="comment">// 获取所有方法</span></span><br><span class="line">        <span class="keyword">for</span> (Method method : methods2) &#123;</span><br><span class="line">            <span class="keyword">int</span> modifiers = method.getModifiers(); <span class="comment">// 获取权限修饰符</span></span><br><span class="line">            System.out.println(<span class="string">"方法修饰符: "</span> + Modifier.toString(modifiers));</span><br><span class="line"></span><br><span class="line">            Class resType = method.getReturnType(); <span class="comment">// 获取返回值</span></span><br><span class="line">            System.out.println(<span class="string">"方法返回值: "</span> + resType.getName() + <span class="string">" : "</span> + method.getName());</span><br><span class="line"></span><br><span class="line">            Parameter[] parameters = method.getParameters(); <span class="comment">// 获取参数</span></span><br><span class="line">            <span class="keyword">if</span> (parameters.length != <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.print(<span class="string">"方法参数: "</span>);</span><br><span class="line">                <span class="keyword">for</span> (Parameter parameter : parameters) &#123;</span><br><span class="line">                    System.out.print(parameter.getType().getName() + <span class="string">" : "</span> + parameter.getName());</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">""</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Class[] ex = method.getExceptionTypes(); <span class="comment">// 获取异常</span></span><br><span class="line">            <span class="keyword">if</span> (ex.length != <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.print(<span class="string">"方法异常: "</span>);</span><br><span class="line">                <span class="keyword">for</span> (Class <span class="keyword">var</span> : ex) &#123;</span><br><span class="line">                    System.out.print(<span class="keyword">var</span>.getName());</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">""</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">类名: club.hermit.study.reflect.Circle</span><br><span class="line">=====所有public方法：=====</span><br><span class="line">方法修饰符: public</span><br><span class="line">方法返回值: java.lang.String : toString</span><br><span class="line"></span><br><span class="line">方法修饰符: public</span><br><span class="line">方法返回值: <span class="built_in">float</span> : getRedius</span><br><span class="line"></span><br><span class="line">方法修饰符: public</span><br><span class="line">方法返回值: void : setRedius</span><br><span class="line">方法参数: <span class="built_in">float</span> : arg0</span><br><span class="line"></span><br><span class="line">方法修饰符: public final</span><br><span class="line">方法返回值: void : <span class="built_in">wait</span></span><br><span class="line">方法参数: long : arg0int : arg1</span><br><span class="line">方法异常: java.lang.InterruptedException</span><br><span class="line"></span><br><span class="line">方法修饰符: public final native</span><br><span class="line">方法返回值: void : <span class="built_in">wait</span></span><br><span class="line">方法参数: long : arg0</span><br><span class="line">方法异常: java.lang.InterruptedException</span><br><span class="line"></span><br><span class="line">方法修饰符: public final</span><br><span class="line">方法返回值: void : <span class="built_in">wait</span></span><br><span class="line">方法异常: java.lang.InterruptedException</span><br><span class="line"></span><br><span class="line">方法修饰符: public</span><br><span class="line">方法返回值: boolean : equals</span><br><span class="line">方法参数: java.lang.Object : arg0</span><br><span class="line"></span><br><span class="line">方法修饰符: public native</span><br><span class="line">方法返回值: int : hashCode</span><br><span class="line"></span><br><span class="line">方法修饰符: public final native</span><br><span class="line">方法返回值: java.lang.Class : getClass</span><br><span class="line"></span><br><span class="line">方法修饰符: public final native</span><br><span class="line">方法返回值: void : notify</span><br><span class="line"></span><br><span class="line">方法修饰符: public final native</span><br><span class="line">方法返回值: void : notifyAll</span><br><span class="line"></span><br><span class="line">=====所有方法=====</span><br><span class="line">方法修饰符: public</span><br><span class="line">方法返回值: java.lang.String : toString</span><br><span class="line"></span><br><span class="line">方法修饰符: public</span><br><span class="line">方法返回值: <span class="built_in">float</span> : getRedius</span><br><span class="line"></span><br><span class="line">方法修饰符: public</span><br><span class="line">方法返回值: void : setRedius</span><br><span class="line">方法参数: <span class="built_in">float</span> : arg0</span><br><span class="line"></span><br><span class="line">方法修饰符: private</span><br><span class="line">方法返回值: double : getArea</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code 0</span><br></pre></td></tr></table></figure><blockquote><p>此处，Circle.class 和 Class.forName(“Circle”) 都可以创建Circle类的Class对象，但用Circle.class创建时，不会自动初始化该Class对象，也就是不会执行Circle中的static{}部分的代码(如果有这部分代码的话)</p></blockquote><h3 id="反射访问private方法"><a href="#反射访问private方法" class="headerlink" title="反射访问private方法"></a>反射访问private方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShapeTest3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Circle circle = <span class="keyword">new</span> Circle(<span class="number">12</span>);</span><br><span class="line">        Class circleClass = circle.getClass(); <span class="comment">// 获取Class类实例</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Method area = circleClass.getDeclaredMethod(<span class="string">"getArea"</span>, <span class="keyword">null</span>); <span class="comment">// 获取circleClass中的方法</span></span><br><span class="line">            <span class="keyword">if</span> (area != <span class="keyword">null</span>) &#123;</span><br><span class="line">                area.setAccessible(<span class="keyword">true</span>); <span class="comment">// 获取私有方法的访问权限</span></span><br><span class="line">                System.out.println(area.invoke(circle)); <span class="comment">// 使用invoke调用</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">452.376</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code 0</span><br></pre></td></tr></table></figure><h3 id="反射修改private变量"><a href="#反射修改private变量" class="headerlink" title="反射修改private变量"></a>反射修改private变量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShapeTest4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Circle circle = <span class="keyword">new</span> Circle(<span class="number">12</span>);</span><br><span class="line">        Class circleClass = circle.getClass(); <span class="comment">// 获取Class类实例</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Field field = circleClass.getDeclaredField(<span class="string">"redius"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (field != <span class="keyword">null</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">"更改前: "</span> + circle.getRedius());</span><br><span class="line">                field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                field.set(circle, <span class="number">10</span>);</span><br><span class="line">                System.out.println(<span class="string">"更改后: "</span> + circle.getRedius());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">更改前: 12.0</span><br><span class="line">更改后: 10.0</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code 0</span><br></pre></td></tr></table></figure><h3 id="反射修改private常量"><a href="#反射修改private常量" class="headerlink" title="反射修改private常量"></a>反射修改private常量</h3><blockquote><p>Java在编译时，JVM会对<strong>已赋值的</strong>int、float、double等基本类型以及String类的常量做优化，将常量直接替换成具体值，但包装类型Integer、Float、Double及其他类就不会。</p><p>如下Circle类的.class文件：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by Fernflower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> club.hermit.study.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String nameStr = <span class="string">"CircleNameStr"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> redius;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> PI = <span class="number">3.1415</span>D;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Circle</span><span class="params">(<span class="keyword">float</span> redius)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.redius = redius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getRedius</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.redius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRedius</span><span class="params">(<span class="keyword">float</span> redius)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.redius = redius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3.1415</span>D * (<span class="keyword">double</span>)<span class="keyword">this</span>.redius * (<span class="keyword">double</span>)<span class="keyword">this</span>.redius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Circle"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>所以，在这个时候就算通过反射替换了这种常量，依旧没有用</p></blockquote><blockquote><p>但如果将int、float、double、String这类常量不直接赋值，而是在构造方法中赋值，则可以修改，因为在编译后的.class文件中是通过变量名使用这种变量的。</p><p>例如，修改Circle类，去掉PI的static修饰符，不给PI直接赋值，而是放在构造方法中，则编译后的.class文件变为:</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String nameStr = <span class="string">"CircleNameStr"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> redius;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">double</span> PI;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Circle</span><span class="params">(<span class="keyword">float</span> redius)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.redius = redius;</span><br><span class="line">        <span class="keyword">this</span>.PI = <span class="number">3.1415</span>D;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getRedius</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.redius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRedius</span><span class="params">(<span class="keyword">float</span> redius)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.redius = redius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.PI * (<span class="keyword">double</span>)<span class="keyword">this</span>.redius * (<span class="keyword">double</span>)<span class="keyword">this</span>.redius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Circle"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>所以此时是可以通过反射修改此处的PI值的</p></blockquote><h2 id="反射原理"><a href="#反射原理" class="headerlink" title="反射原理"></a>反射原理</h2><h3 id="类的加载机制"><a href="#类的加载机制" class="headerlink" title="类的加载机制"></a>类的加载机制</h3><h4 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h4><blockquote><p>每个类编译后都会生成一个.class文件，JVM使用类加载器(Class Loader)来加载这个.class文件，类加载器实质上是一条类加载器链，一般的，只会用到一个原生的类加载器，通常只是在本地磁盘中加载。如果需要从远程或DB中加载.class文件时，就需要挂载额外的类加载器来实现了。</p></blockquote><blockquote><p>一般来说，类加载器是按照树形层次结构组织的，每个加载器都有一个父类加载器。另外，每个类加载器都支持代理模式，也就是可以自己完成.class的加载工作，也可以代理给其他加载器完成。</p></blockquote><blockquote><p>类加载器的加载顺序有两种：</p><ul><li>父类优先策略：JDK就采用这种方式，在这种策略下，类加载某个.class之前，会尝试先代理给父类加载器，只有当父类加载器找不到时，才会自己加载</li><li>子类优先策略：与父类优先策略相反，先尝试子类加载，找不到时候使用父类加载器加载</li></ul></blockquote><h4 id="动态加载"><a href="#动态加载" class="headerlink" title="动态加载"></a>动态加载</h4><blockquote><p>不论是采用 <strong>父类优先策略</strong> 加载还是采用 <strong>子类优先策略</strong> 加载，类都是在第一次被用到时动态加载到JVM的，即：</p><ul><li>Java程序在运行时，并不是一起把所有.class都加载，而是只有在使用的时候发现该类还未被加载时才会加载</li><li>当程序创建第一个对类的静态成员的引用时，才会加载该类。Java这个特性就叫<strong>动态加载</strong></li></ul></blockquote><blockquote><p>注：当加载一个.class文件时，并不意味着就会初始化这个对象。</p><p>类的初始化包括:</p><ul><li>加载：由类加载器执行，加载.class字节码，并创建一个Class对象</li><li>链接：验证字节码，为静态域分配存储空间（只是分配，并不初始化该存储空间），解析该类创建所需要的对其他类的应用</li><li>初始化：首先执行静态初始化块static{}，初始化静态变量，执行静态方法（如静态方法）</li></ul></blockquote><h4 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h4><blockquote><p>加载阶段主要完成以下几件事：</p><ul><li>通过一个类的全限定类名来获取定义此类的二进制字节流</li><li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构</li><li>在内存中生成一个代表这个类的 java.lang.Class 对象，作为方法区这个类的各种数据访问入口</li></ul></blockquote><h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><blockquote><p>Java在加载了类之后，需要进行链接的步骤，链接简单的说，就是将已经加载的Java二进制代码组合到JVM运行状态中去。它包含三个步骤：</p><ul><li>验证：验证是保证二进制字节码在结构上的正确性，具体来说，工作包括检测类型的正确性、接入属性正确性、检查final class没有被继承、检查静态变量的正确性等</li><li>准备：准备阶段主要是创建静态域、分配空间、给这些域设置默认值，需要注意的是：1. 在准备阶段不会执行任何代码，仅仅是ishezhi默认值；2. 这些默认值是这样分配的，原生类型全部设为0，其他引用类型设置为null</li><li>解析：解析的过程就是对类中的接口、类、方法、变量的符号引用进行解析和定位，解析成直接引用（符号引用就是编码是用字符串表示某个变量、接口的位置，直接引用就是根据符号引用翻译出来的地址），并保证这些类被正确的找到。解析的过程可能导致其他的类被加载。需要注意的是：根据不同的解析策略，这一步不是必须的，有些解析策略在解析时递归的把所有引用姐写，这是early resolution，要求所有引用都必须存在；还有一种策略是late resolution，这也是oracle的JDK所采用的策略，即在类只是被引用了，还没有别真正用到时，并不进行解析，只有当真正用到了，才去加载和解析这个类</li></ul></blockquote><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><blockquote><p>根据JVM规范，所有JVM实现必须在每个类或接口被Java程序首次使用时才初始化。主要有以下几种：</p><ul><li>创建类的实例</li><li>访问某个类或者接口的静态变量，或者对该静态变量赋值</li><li>调用类的静态方法</li><li>反射</li><li>初始化一个类的子类，不过直接通过子类引用父类元素，不会引起子类的初始化</li><li>JVM被标明为启动类的类</li></ul></blockquote><h3 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h3><blockquote><p>Class的实例代表了Java运行程序中的类或接口。一个枚举就是一种类，一个注释就是一种接口。每个数组也属于反映Class对象的一个类，这个类被具有相同元素类型和数量维度的所有数组共享。而Java的原始类型，如：booealn、byte、char、short、int、long、float、double、及void也被表示为Class对象</p></blockquote><h4 id="类声明"><a href="#类声明" class="headerlink" title="类声明"></a>类声明</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Class</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span>,</span></span><br><span class="line"><span class="class">                              <span class="title">GenericDeclaration</span>,</span></span><br><span class="line"><span class="class">                              <span class="title">Type</span>,</span></span><br><span class="line"><span class="class">                              <span class="title">AnnotatedElement</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Class类被声明为final，做了阉割，不能有子类</p></blockquote><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><h5 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Class</span><span class="params">(ClassLoader loader)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Initialize final field for classLoader.  The initialization value of non-null</span></span><br><span class="line">  <span class="comment">// prevents future JIT optimizations from assuming this final field is null.</span></span><br><span class="line">  classLoader = loader;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Class类没有public的构造方法；该private的构造方法也是为了阻止默认构造方法被使用（在Java中，如果创建了一个带有三处的构造方法，那么无参的构造方法必须显式的写出来）</p><p>当.class字节码文件在类加载器(Class Loader)中被加载并且被已定义的类方法被调用时，JVM才会自动构造Class对象</p></blockquote><h5 id="生成实例"><a href="#生成实例" class="headerlink" title="生成实例"></a>生成实例</h5><blockquote><p>该类方法主要是根据给定的类名，加载类信息并执行初始化</p></blockquote><h6 id="forName"><a href="#forName" class="headerlink" title="forName"></a>forName</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CallerSensitive</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Class&lt;?&gt; forName(String className)</span><br><span class="line">            <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">    Class&lt;?&gt; caller = Reflection.getCallerClass();</span><br><span class="line">    <span class="keyword">return</span> forName0(className, <span class="keyword">true</span>, ClassLoader.getClassLoader(caller), caller);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@CallerSensitive</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Class&lt;?&gt; forName(String name, <span class="keyword">boolean</span> initialize,</span><br><span class="line">                               ClassLoader loader)</span><br><span class="line">    <span class="keyword">throws</span> ClassNotFoundException</span><br><span class="line">&#123;</span><br><span class="line">    Class&lt;?&gt; caller = <span class="keyword">null</span>;</span><br><span class="line">    SecurityManager sm = System.getSecurityManager();</span><br><span class="line">    <span class="keyword">if</span> (sm != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// Reflective call to get caller class is only needed if a security manager</span></span><br><span class="line">        <span class="comment">// is present.  Avoid the overhead of making this call otherwise.</span></span><br><span class="line">        caller = Reflection.getCallerClass();</span><br><span class="line">        <span class="keyword">if</span> (sun.misc.VM.isSystemDomainLoader(loader)) &#123;</span><br><span class="line">            ClassLoader ccl = ClassLoader.getClassLoader(caller);</span><br><span class="line">            <span class="keyword">if</span> (!sun.misc.VM.isSystemDomainLoader(ccl)) &#123;</span><br><span class="line">                sm.checkPermission(</span><br><span class="line">                    SecurityConstants.GET_CLASSLOADER_PERMISSION);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> forName0(name, initialize, loader, caller);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Called after security check for system loader access checks have been made. */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> Class&lt;?&gt; forName0(String name, <span class="keyword">boolean</span> initialize,</span><br><span class="line">                                        ClassLoader loader,</span><br><span class="line">                                        Class&lt;?&gt; caller)</span><br><span class="line">    <span class="keyword">throws</span> ClassNotFoundException;</span><br></pre></td></tr></table></figure><blockquote><p>forName()方法共有两个重载方法，他们最终都调用navite方法forName0()</p><p>在只有一个形参的forName方法中，通过获得类加载器，调用forName0方法</p><p>在另一个forName方法中，通过SecurityManager类，JVM在应用层进行安全检查，按照各种权限判断是否可获取类加载器</p></blockquote><h6 id="newInstance"><a href="#newInstance" class="headerlink" title="newInstance"></a>newInstance</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CallerSensitive</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">newInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> InstantiationException, IllegalAccessException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (System.getSecurityManager() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        checkMemberAccess(Member.PUBLIC, Reflection.getCallerClass(), <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag">NOTE:</span> the following code may not be strictly correct under</span></span><br><span class="line">    <span class="comment">// the current Java memory model.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Constructor lookup</span></span><br><span class="line">    <span class="keyword">if</span> (cachedConstructor == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == Class<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalAccessException(</span><br><span class="line">                <span class="string">"Can not call newInstance() on the Class for java.lang.Class"</span></span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class&lt;?&gt;[] empty = &#123;&#125;;</span><br><span class="line">            <span class="keyword">final</span> Constructor&lt;T&gt; c = getConstructor0(empty, Member.DECLARED);</span><br><span class="line">            <span class="comment">// Disable accessibility checks on the constructor</span></span><br><span class="line">            <span class="comment">// since we have to do the security check here anyway</span></span><br><span class="line">            <span class="comment">// (the stack depth is wrong for the Constructor's</span></span><br><span class="line">            <span class="comment">// security check to work)</span></span><br><span class="line">            java.security.AccessController.doPrivileged(</span><br><span class="line">                <span class="keyword">new</span> java.security.PrivilegedAction&lt;Void&gt;() &#123;</span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Void <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                            c.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">            cachedConstructor = c;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> (InstantiationException)</span><br><span class="line">                <span class="keyword">new</span> InstantiationException(getName()).initCause(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Constructor&lt;T&gt; tmpConstructor = cachedConstructor;</span><br><span class="line">    <span class="comment">// Security check (same as in java.lang.reflect.Constructor)</span></span><br><span class="line">    <span class="keyword">int</span> modifiers = tmpConstructor.getModifiers();</span><br><span class="line">    <span class="keyword">if</span> (!Reflection.quickCheckMemberAccess(<span class="keyword">this</span>, modifiers)) &#123;</span><br><span class="line">        Class&lt;?&gt; caller = Reflection.getCallerClass();</span><br><span class="line">        <span class="keyword">if</span> (newInstanceCallerCache != caller) &#123;</span><br><span class="line">            Reflection.ensureMemberAccess(caller, <span class="keyword">this</span>, <span class="keyword">null</span>, modifiers);</span><br><span class="line">            newInstanceCallerCache = caller;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Run constructor</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> tmpConstructor.newInstance((Object[])<span class="keyword">null</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">        Unsafe.getUnsafe().throwException(e.getTargetException());</span><br><span class="line">        <span class="comment">// Not reached</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>通过该方法，可以创建一个被Class表示的类的新实例，如果该类尚未没初始化时该类就会在此时被初始化</p><p>在该方法中，通过getConstructor0()、privateGetDeclaredConstructors()、reflectionData()等方法获取构造函数数组，接着根据参数列表为空判断找到空构造函数，拷贝并返回该构造函数</p><p>最后调用Constructor类的newInstance方法返回一个新实例</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Constructor&lt;T&gt; <span class="title">getConstructor0</span><span class="params">(Class&lt;?&gt;[] parameterTypes,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    <span class="keyword">int</span> which)</span> <span class="keyword">throws</span> NoSuchMethodException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Constructor&lt;T&gt;[] constructors = privateGetDeclaredConstructors((which == Member.PUBLIC));</span><br><span class="line">    <span class="keyword">for</span> (Constructor&lt;T&gt; constructor : constructors) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arrayContentsEq(parameterTypes,</span><br><span class="line">                            constructor.getParameterTypes())) &#123;</span><br><span class="line">            <span class="keyword">return</span> getReflectionFactory().copyConstructor(constructor);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchMethodException(getName() + <span class="string">".&lt;init&gt;"</span> + argumentTypesToString(parameterTypes));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="获取类信息"><a href="#获取类信息" class="headerlink" title="获取类信息"></a>获取类信息</h5><blockquote><p>这一类方法比较多，包括获取类的构造函数、已经声明的字段、方法，该类的注解、包名、父类，以及判断该类是否是数组、枚举、接口等</p><p>这类方法有：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Package <span class="title">getPackage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> Package.getPackage(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> Class&lt;? <span class="keyword">super</span> T&gt; getSuperclass();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">getModifiers</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> Object[] getSigners();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CallerSensitive</span></span><br><span class="line"><span class="keyword">public</span> Field[] getFields() <span class="keyword">throws</span> SecurityException &#123;</span><br><span class="line">  checkMemberAccess(Member.PUBLIC, Reflection.getCallerClass(), <span class="keyword">true</span>);</span><br><span class="line">  <span class="keyword">return</span> copyFields(privateGetPublicFields(<span class="keyword">null</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CallerSensitive</span></span><br><span class="line"><span class="keyword">public</span> Method[] getMethods() <span class="keyword">throws</span> SecurityException &#123;</span><br><span class="line">  checkMemberAccess(Member.PUBLIC, Reflection.getCallerClass(), <span class="keyword">true</span>);</span><br><span class="line">  <span class="keyword">return</span> copyMethods(privateGetPublicMethods());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CallerSensitive</span></span><br><span class="line"><span class="keyword">public</span> Constructor&lt;?&gt;[] getConstructors() <span class="keyword">throws</span> SecurityException &#123;</span><br><span class="line">  checkMemberAccess(Member.PUBLIC, Reflection.getCallerClass(), <span class="keyword">true</span>);</span><br><span class="line">  <span class="keyword">return</span> copyConstructors(privateGetDeclaredConstructors(<span class="keyword">true</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CallerSensitive</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Field <span class="title">getField</span><span class="params">(String name)</span></span></span><br><span class="line"><span class="function">  <span class="keyword">throws</span> NoSuchFieldException, SecurityException </span>&#123;</span><br><span class="line">  checkMemberAccess(Member.PUBLIC, Reflection.getCallerClass(), <span class="keyword">true</span>);</span><br><span class="line">  Field field = getField0(name);</span><br><span class="line">  <span class="keyword">if</span> (field == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchFieldException(name);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> field;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CallerSensitive</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Method <span class="title">getMethod</span><span class="params">(String name, Class&lt;?&gt;... parameterTypes)</span></span></span><br><span class="line"><span class="function">  <span class="keyword">throws</span> NoSuchMethodException, SecurityException </span>&#123;</span><br><span class="line">  checkMemberAccess(Member.PUBLIC, Reflection.getCallerClass(), <span class="keyword">true</span>);</span><br><span class="line">  Method method = getMethod0(name, parameterTypes, <span class="keyword">true</span>);</span><br><span class="line">  <span class="keyword">if</span> (method == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchMethodException(getName() + <span class="string">"."</span> + name + argumentTypesToString(parameterTypes));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> method;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>等一系列方法……</p></blockquote><h5 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h5><h6 id="asSubclass"><a href="#asSubclass" class="headerlink" title="asSubclass"></a>asSubclass</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;U&gt; Class&lt;? extends U&gt; asSubclass(Class&lt;U&gt; clazz) &#123;</span><br><span class="line">  <span class="keyword">if</span> (clazz.isAssignableFrom(<span class="keyword">this</span>))</span><br><span class="line">    <span class="keyword">return</span> (Class&lt;? extends U&gt;) <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> ClassCastException(<span class="keyword">this</span>.toString());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">boolean</span> <span class="title">isAssignableFrom</span><span class="params">(Class&lt;?&gt; cls)</span></span>;</span><br></pre></td></tr></table></figure><blockquote><p>该asSubclass方法将类转换为它的子类</p><p>isAssignableFrom方法用来判断clazz是否是当前实例，或者是当前实例的父类</p></blockquote><h6 id="cast"><a href="#cast" class="headerlink" title="cast"></a>cast</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">cast</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (obj != <span class="keyword">null</span> &amp;&amp; !isInstance(obj))</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> ClassCastException(cannotCastMsg(obj));</span><br><span class="line">  <span class="keyword">return</span> (T) obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">boolean</span> <span class="title">isInstance</span><span class="params">(Object obj)</span></span>;</span><br></pre></td></tr></table></figure><blockquote><p>将obj对象转换成Class类表示的类或接口</p></blockquote><h3 id="Reflect包"><a href="#Reflect包" class="headerlink" title="Reflect包"></a>Reflect包</h3><h4 id="Constructor"><a href="#Constructor" class="headerlink" title="Constructor"></a>Constructor</h4><blockquote><p>该类提供了有关单个类的构造函数，该类用在newInstance()方法中</p></blockquote><h5 id="newInstance方法"><a href="#newInstance方法" class="headerlink" title="newInstance方法"></a>newInstance方法</h5><blockquote><p>使用被 Constructor类表示的构造器初始化一个、声明了该构造器的类的是实例，</p></blockquote><h2 id="QA"><a href="#QA" class="headerlink" title="QA"></a>QA</h2><h3 id="三种获取Class对象-new-Object-getClass、Object-class、Class-forName-“className”-区别"><a href="#三种获取Class对象-new-Object-getClass、Object-class、Class-forName-“className”-区别" class="headerlink" title="三种获取Class对象( new Object().getClass、Object.class、Class.forName(“className”) )区别"></a>三种获取Class对象( new Object().getClass、Object.class、Class.forName(“className”) )区别</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">reflect1</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"reflect1 静态代码块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"reflect1 动态代码块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">reflect1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行reflect1构造方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">reflect2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"reflect2 静态代码块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"reflect2 动态代码块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">reflect2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行reflect2构造方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">reflect3</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"reflect3 静态代码块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"reflect3 动态代码块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">reflect3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行reflect3构造方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"=========clz1========="</span>);</span><br><span class="line">        Class clz1 = reflect1<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">        System.out.println(<span class="string">"=========clz1========="</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"=========clz2========="</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class clz2 = Class.forName(<span class="string">"club.hermit.study.reflect.reflect2"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"=========clz2========="</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"=========clz3========="</span>);</span><br><span class="line">        Class clz3 = <span class="keyword">new</span> reflect3().getClass();</span><br><span class="line">        System.out.println(<span class="string">"=========clz3========="</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">=========clz1=========</span><br><span class="line">=========clz1=========</span><br><span class="line">=========clz2=========</span><br><span class="line">reflect2 静态代码块</span><br><span class="line">=========clz2=========</span><br><span class="line">=========clz3=========</span><br><span class="line">reflect3 静态代码块</span><br><span class="line">reflect3 动态代码块</span><br><span class="line">执行reflect3构造方法</span><br><span class="line">=========clz3=========</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code 0</span><br></pre></td></tr></table></figure><blockquote><p>由上可知，</p><ul><li>object.class 静态、动态代码块和构造方法都不会执行</li><li>Class.forName(“”) 只执行静态代码块</li><li>new Object().getClass()  会执行静态代码块、动态代码块、构造方法</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 源码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Class </tag>
            
            <tag> 类加载器 </tag>
            
            <tag> 反射 </tag>
            
            <tag> Reflect </tag>
            
            <tag> Class Loader </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>序列化源码分析</title>
      <link href="/2020/07/05/%E5%BA%8F%E5%88%97%E5%8C%96%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>/2020/07/05/%E5%BA%8F%E5%88%97%E5%8C%96%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="what"><a href="#what" class="headerlink" title="what"></a>what</h2><h3 id="序列化-反序列化是什么"><a href="#序列化-反序列化是什么" class="headerlink" title="序列化/反序列化是什么"></a>序列化/反序列化是什么</h3><blockquote><p>Java序列化是把Java Bean转化成有序字节流的过程</p><p>Java反序列化是把有序字节流转化成Java Bean的过程</p></blockquote><h3 id="序列化-反序列化有什么用"><a href="#序列化-反序列化有什么用" class="headerlink" title="序列化/反序列化有什么用"></a>序列化/反序列化有什么用</h3><blockquote><p>在网络通信过程中，所有的数据，如图片、文本都是以二进制序列的形式传输的。而将这些图片、文本对应的对象转化成二进制序列就是通过序列化实现的</p></blockquote><blockquote><p>而将网络中的二进制数据流恢复成对象就是通过Java Bean实现的</p></blockquote><h3 id="序列化用在什么情况下"><a href="#序列化用在什么情况下" class="headerlink" title="序列化用在什么情况下"></a>序列化用在什么情况下</h3><blockquote><ul><li>将对象持久化到硬盘中</li><li>将对象传输到网络中</li><li>进程间的对象传输</li></ul></blockquote><h2 id="序列化-反序列化怎么用"><a href="#序列化-反序列化怎么用" class="headerlink" title="序列化/反序列化怎么用"></a>序列化/反序列化怎么用</h2><blockquote><p>Java的序列化有两种方式：</p><ul><li>实现 Serializable 接口</li><li>实现 Externalizable 接口</li></ul></blockquote><h3 id="实现-Serializable-接口"><a href="#实现-Serializable-接口" class="headerlink" title="实现 Serializable 接口"></a>实现 Serializable 接口</h3><h4 id="默认方式实现序列化"><a href="#默认方式实现序列化" class="headerlink" title="默认方式实现序列化"></a>默认方式实现序列化</h4><blockquote><p>用FileOutputStream类实例化ObjectOutputStream类，然后使用ObjectOutputStream的默认的序列化方式，对非transient变量进行序列化</p></blockquote><blockquote><p>用FileInputStream类实例化ObjectInputStream类，然后使用ObjectInputStream的默认反序列化方式，对非transient变量进行反序列化</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerialParent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            ObjectOutputStream oss = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"test.txt"</span>));</span><br><span class="line">            Test test = <span class="keyword">new</span> Test(<span class="number">12</span>);</span><br><span class="line">            oss.writeObject(test);</span><br><span class="line"></span><br><span class="line">            ObjectInputStream iss = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"test.txt"</span>));</span><br><span class="line">            Test itest = (Test) iss.readObject();</span><br><span class="line">            System.out.println(itest.getAge());</span><br><span class="line">           </span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="自定义方式实现序列化"><a href="#自定义方式实现序列化" class="headerlink" title="自定义方式实现序列化"></a>自定义方式实现序列化</h4><h5 id="writeObject-readObject"><a href="#writeObject-readObject" class="headerlink" title="writeObject / readObject"></a>writeObject / readObject</h5><blockquote><p>在实现了Serializable类的子类中重写readObject和writeObject方法，在序列化/反序列化的时候，就会调用该类的readObject和writeObject方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerialParent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            ObjectOutputStream oss = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"test.txt"</span>));</span><br><span class="line">            Test test = <span class="keyword">new</span> Test(<span class="number">12</span>);</span><br><span class="line">            oss.writeObject(test);</span><br><span class="line"></span><br><span class="line">            ObjectInputStream iss = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"test.txt"</span>));</span><br><span class="line">            Test itest = (Test) iss.readObject();</span><br><span class="line">            System.out.println(itest.toString());</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(java.io.ObjectOutputStream outputStream)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            outputStream.defaultWriteObject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream inputStream)</span> <span class="keyword">throws</span> IOException,ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            inputStream.defaultReadObject();</span><br><span class="line">            age = <span class="number">1000</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Test &#123;"</span> +</span><br><span class="line">                <span class="string">"age = "</span> + age +</span><br><span class="line">                <span class="string">"&#125;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="writeReplace-readResolve"><a href="#writeReplace-readResolve" class="headerlink" title="writeReplace / readResolve"></a>writeReplace / readResolve</h5><blockquote><p>和writeObject/readObject类似，重写writeReplace/readResolve方法也能实现自定义序列化</p><p>但在序列化时，会先调用writeReplace方法，在调用writeObject方法。该方法可将任意对象代替成目标序列化对象</p><p>在反序列化时，readResolve方法会替换反序列化出的对象，反序列出来的方法会别立即丢弃。该方法在readObject之后调用</p></blockquote><h3 id="实现-Externalizable-接口"><a href="#实现-Externalizable-接口" class="headerlink" title="实现 Externalizable 接口"></a>实现 Externalizable 接口</h3><blockquote><p>实现Externalizable接口，并且实现writeExternal方法和readExternal方法，在序列化/反序列化时，会调用这两个方法进行序列化</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerialParent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            ObjectOutputStream oss = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"test.txt"</span>));</span><br><span class="line">            Test test = <span class="keyword">new</span> Test(<span class="number">12</span>);</span><br><span class="line">            oss.writeObject(test);</span><br><span class="line"></span><br><span class="line">            ObjectInputStream iss = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"test.txt"</span>));</span><br><span class="line">            Test itest = (Test) iss.readObject();</span><br><span class="line">            System.out.println(itest.toString());</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">implements</span> <span class="title">Externalizable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="string">"zhangsan"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Test &#123;"</span> +</span><br><span class="line">                <span class="string">"age = "</span> + age +</span><br><span class="line">                <span class="string">"&#125;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeExternal</span><span class="params">(ObjectOutput out)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        StringBuffer buff = <span class="keyword">new</span> StringBuffer(<span class="keyword">this</span>.name).reverse();</span><br><span class="line">        out.writeObject(buff);</span><br><span class="line">        out.writeInt(<span class="keyword">this</span>.age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readExternal</span><span class="params">(ObjectInput in)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = ((StringBuffer)in.readObject()).reverse().toString();</span><br><span class="line">        <span class="keyword">this</span>.age = in.readInt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><h3 id="标记接口"><a href="#标记接口" class="headerlink" title="标记接口"></a>标记接口</h3><blockquote><p>标记接口并不是Java语言特有的，标记接口是编程中的一种通用的设计思路。</p><p>Java中的标记接口有Serializable、Cloneable等，他们没有实际的方法，只是起到标记类的作用。比如Class A implements Serializable, Cloneable ，只是表示A可以被序列化和克隆。</p><p>在Java运行时，通过 obj instanceof Serializable 判断是否实现这些标记接口，实现则做特殊处理</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>标记接口是编程中的一种设计思路，编程语言本身并不支持为类维护元数据。而标记接口则弥补了这个功能上的缺失：当一个类实现了标记接口时，实际上从某种意义上来说就成为了这个类的元数据之一，在运行时，通过编程语言的反射机制，我们就可以拿到代码中的元数据了</p></blockquote><h3 id="元数据"><a href="#元数据" class="headerlink" title="元数据"></a>元数据</h3><blockquote><p><a href="https://www.oracle.com/technetwork/articles/hunter-meta-097643-zhs.html" target="_blank" rel="noopener">元数据</a>是用来描述数据的数据，也就是描述代码与其他资源(如：DB表)之间内在联系的数据</p><p>例如：富士苹果有一个属性：它是红色的。假定有一个 FujiApple 类，您可以使用 <code>@Color</code> 批注类型的一个批注来指定它的颜色。通过这么做，您就提供了关于苹果的元数据</p></blockquote><blockquote><p>在JDK1.5之前标记接口主要担任元数据的角色(描述代码的字节流联系的数据)，1.5之后注解主要作为元数据的角色</p></blockquote><h3 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h3><blockquote><p>在正常情况下，在使用一个类时，必须先得知道它是做什么的，有什么用，有哪些属性，有哪些方法。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Person person = <span class="keyword">new</span> Person();</span><br><span class="line">person.getAge(<span class="number">20</span>);</span><br></pre></td></tr></table></figure><blockquote><p>但在某些情况下，在程序运行时才你呢个知道要操作的是什么类，及这个类的方法属性，然后调用它的方法</p><p>在这种情况下，即在运行时操作类的方式就是反射</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Class clz = Class.forName(<span class="string">"club.hermit.study.Person"</span>);</span><br><span class="line">Method method = clz.getMethod(<span class="string">"setAge"</span>, <span class="keyword">int</span><span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">Constructor cons = clz.getConstructor();</span><br><span class="line">Object object = cons.newInstance();</span><br><span class="line">method.invoke(object, <span class="number">20</span>);</span><br></pre></td></tr></table></figure><blockquote><p>上面两个都实现了实例化Person类，已经设置Person类的age属性，但一个是通过正常实例化类的方式，后者是通过发射的方式</p></blockquote><h3 id="序列化原理"><a href="#序列化原理" class="headerlink" title="序列化原理"></a>序列化原理</h3><blockquote><p>在通过ObjectOutputStream实现序列化的过程中，writeObject0方法做以下的事：</p><ol><li>先处理以前写入或不重新写入的对象</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// handle previously written and non-replaceable objects</span></span><br><span class="line"><span class="keyword">int</span> h;</span><br><span class="line"><span class="keyword">if</span> ((obj = subs.lookup(obj)) == <span class="keyword">null</span>) &#123;</span><br><span class="line">  writeNull();</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!unshared &amp;&amp; (h = handles.lookup(obj)) != -<span class="number">1</span>) &#123;</span><br><span class="line">  writeHandle(h);</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Class) &#123;</span><br><span class="line">  writeClass((Class) obj, unshared);</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> ObjectStreamClass) &#123;</span><br><span class="line">  writeClassDesc((ObjectStreamClass) obj, unshared);</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>判断对象是否为null、对象句柄映射、Class的子类、及待序列化的类是否是序列化类的描述内，根据各自判断直接将结果写入流中</p><p>ObjectStreamClass类是类的序列化描述符，可以通过lookup方法查找或创建JVM中加的的特定类的ObjectStreamClass类。该类中包含了类名和序列化ID(serialVersionUID)</p></blockquote><blockquote><ol start="2"><li>检查是否需要更换对象</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// check for replacement object</span></span><br><span class="line">Object orig = obj;</span><br><span class="line">Class&lt;?&gt; cl = obj.getClass();</span><br><span class="line">ObjectStreamClass desc;</span><br><span class="line"><span class="keyword">for</span> (;;) &#123;</span><br><span class="line">  <span class="comment">// REMIND: skip this check for strings/arrays?</span></span><br><span class="line">  Class&lt;?&gt; repCl;</span><br><span class="line">  desc = ObjectStreamClass.lookup(cl, <span class="keyword">true</span>);</span><br><span class="line">  <span class="keyword">if</span> (!desc.hasWriteReplaceMethod() ||</span><br><span class="line">      (obj = desc.invokeWriteReplace(obj)) == <span class="keyword">null</span> ||</span><br><span class="line">      (repCl = obj.getClass()) == cl)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  cl = repCl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (enableReplace) &#123;</span><br><span class="line">  Object rep = replaceObject(obj);</span><br><span class="line">  <span class="keyword">if</span> (rep != obj &amp;&amp; rep != <span class="keyword">null</span>) &#123;</span><br><span class="line">    cl = rep.getClass();</span><br><span class="line">    desc = ObjectStreamClass.lookup(cl, <span class="keyword">true</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  obj = rep;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li>首先通过反射拿到需序列化的类的类名cl</li><li>然后通过第一步说的lookup方法查找JVM中加载的cl类对应的ObjectStreamClass描述符</li><li>如果需序列化的类中定义了writeReplace方法，则会反射执行该writeReplace方法</li></ul><p>注：该处的 if 条件用的贼鸡儿好<del>~</del> 如果未定义直接break，如果定义才之后 || 后面的条件(即反射执行的writeReplace方法)</p></blockquote><blockquote><ol start="3"><li>判断对象的父接口</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// remaining cases</span></span><br><span class="line"><span class="keyword">if</span> (obj <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">  writeString((String) obj, unshared);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (cl.isArray()) &#123;</span><br><span class="line">  writeArray(obj, desc, unshared);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Enum) &#123;</span><br><span class="line">  writeEnum((Enum&lt;?&gt;) obj, desc, unshared);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Serializable) &#123;</span><br><span class="line">  writeOrdinaryObject(obj, desc, unshared);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (extendedDebugInfo) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> NotSerializableException(</span><br><span class="line">      cl.getName() + <span class="string">"\n"</span> + debugInfoStack.toString());</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> NotSerializableException(cl.getName());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在此处判断实现序列化接口 obj instanceof Serializable ，将对象写入字节流</p></blockquote><blockquote><p>在 writeOrdinaryObject 方法中，通过 ObjectStreamClass 描述符判断此序列化是实现了 Serializable 接口还是实现了 Externalizable 接口</p></blockquote><blockquote><ul><li>在 writeSerialData 方法即实现Serializable接口是调用的方法中，按照ObjectStreamClass描述符对每个属性遍历，如果重写了writeObject方法，则反射执行该writeObject方法，否则执行默认的defaultWriteFields方法</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">ObjectStreamClass.ClassDataSlot[] slots = desc.getClassDataLayout();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; slots.length; i++) &#123;</span><br><span class="line">  ObjectStreamClass slotDesc = slots[i].desc;</span><br><span class="line">  <span class="keyword">if</span> (slotDesc.hasWriteObjectMethod()) &#123;</span><br><span class="line">    PutFieldImpl oldPut = curPut;</span><br><span class="line">    curPut = <span class="keyword">null</span>;</span><br><span class="line">    SerialCallbackContext oldContext = curContext;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (extendedDebugInfo) &#123;</span><br><span class="line">      debugInfoStack.push(</span><br><span class="line">        <span class="string">"custom writeObject data (class \""</span> +</span><br><span class="line">        slotDesc.getName() + <span class="string">"\")"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      curContext = <span class="keyword">new</span> SerialCallbackContext(obj, slotDesc);</span><br><span class="line">      bout.setBlockDataMode(<span class="keyword">true</span>);</span><br><span class="line">      slotDesc.invokeWriteObject(obj, <span class="keyword">this</span>);</span><br><span class="line">      bout.setBlockDataMode(<span class="keyword">false</span>);</span><br><span class="line">      bout.writeByte(TC_ENDBLOCKDATA);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      curContext.setUsed();</span><br><span class="line">      curContext = oldContext;</span><br><span class="line">      <span class="keyword">if</span> (extendedDebugInfo) &#123;</span><br><span class="line">        debugInfoStack.pop();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    curPut = oldPut;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    defaultWriteFields(obj, slotDesc);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li>同理，在实现了Externalizable接口后，执行writeExternalData方法，执行需序列化的类中定义的writeExternal方法</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">curContext = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (protocol == PROTOCOL_VERSION_1) &#123;</span><br><span class="line">  obj.writeExternal(<span class="keyword">this</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  bout.setBlockDataMode(<span class="keyword">true</span>);</span><br><span class="line">  obj.writeExternal(<span class="keyword">this</span>);</span><br><span class="line">  bout.setBlockDataMode(<span class="keyword">false</span>);</span><br><span class="line">  bout.writeByte(TC_ENDBLOCKDATA);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="反序列化原理"><a href="#反序列化原理" class="headerlink" title="反序列化原理"></a>反序列化原理</h3><blockquote><p>在反序列化中，根据序列化的类型逐个解析</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> TC_ARRAY:</span><br><span class="line"><span class="keyword">return</span> checkResolve(readArray(unshared));</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> TC_ENUM:</span><br><span class="line"><span class="keyword">return</span> checkResolve(readEnum(unshared));</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> TC_OBJECT:</span><br><span class="line"><span class="keyword">return</span> checkResolve(readOrdinaryObject(unshared));</span><br></pre></td></tr></table></figure><blockquote><p>根据JVM中获取的ObjectStreamClass描述符，根据反射形式，执行在类中预定义的readExternal和readObject方法反序列化对象</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ObjectStreamClass desc = readClassDesc(<span class="keyword">false</span>);</span><br><span class="line">desc.checkDeserialize();</span><br><span class="line"></span><br><span class="line">Class&lt;?&gt; cl = desc.forClass();</span><br><span class="line"><span class="keyword">if</span> (cl == String<span class="class">.<span class="keyword">class</span> || <span class="title">cl</span> </span>== Class<span class="class">.<span class="keyword">class</span></span></span><br><span class="line"><span class="class">    || <span class="title">cl</span> </span>== ObjectStreamClass<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> InvalidClassException(<span class="string">"invalid class descriptor"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (desc.isExternalizable()) &#123;</span><br><span class="line">  readExternalData((Externalizable) obj, desc);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  readSerialData(obj, desc);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (obj != <span class="keyword">null</span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    obj.readExternal(<span class="keyword">this</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line">    handles.markException(passHandle, ex);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (obj == <span class="keyword">null</span> || handles.lookupException(passHandle) != <span class="keyword">null</span>) &#123;</span><br><span class="line">  defaultReadFields(<span class="keyword">null</span>, slotDesc); <span class="comment">// skip field values</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (slotDesc.hasReadObjectMethod()) &#123;</span><br><span class="line">  ThreadDeath t = <span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">boolean</span> reset = <span class="keyword">false</span>;</span><br><span class="line">  SerialCallbackContext oldContext = curContext;</span><br><span class="line">  <span class="keyword">if</span> (oldContext != <span class="keyword">null</span>)</span><br><span class="line">    oldContext.check();</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    curContext = <span class="keyword">new</span> SerialCallbackContext(obj, slotDesc);</span><br><span class="line"></span><br><span class="line">    bin.setBlockDataMode(<span class="keyword">true</span>);</span><br><span class="line">    slotDesc.invokeReadObject(obj, <span class="keyword">this</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">                         * In most cases, the handle table has already</span></span><br><span class="line"><span class="comment">                         * propagated a CNFException to passHandle at this</span></span><br><span class="line"><span class="comment">                         * point; this mark call is included to address cases</span></span><br><span class="line"><span class="comment">                         * where the custom readObject method has cons'ed and</span></span><br><span class="line"><span class="comment">                         * thrown a new CNFException of its own.</span></span><br><span class="line"><span class="comment">                         */</span></span><br><span class="line">    handles.markException(passHandle, ex);</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        curContext.setUsed();</span><br><span class="line">        <span class="keyword">if</span> (oldContext!= <span class="keyword">null</span>)</span><br><span class="line">          oldContext.check();</span><br><span class="line">        curContext = oldContext;</span><br><span class="line">        reset = <span class="keyword">true</span>;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (ThreadDeath x) &#123;</span><br><span class="line">        t = x;  <span class="comment">// defer until reset is true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (!reset);</span><br><span class="line">    <span class="keyword">if</span> (t != <span class="keyword">null</span>)</span><br><span class="line">      <span class="keyword">throw</span> t;</span><br><span class="line">  &#125;</span><br><span class="line">  defaultDataEnd = <span class="keyword">false</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  defaultReadFields(obj, slotDesc);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (slotDesc.hasWriteObjectData()) &#123;</span><br><span class="line">  skipCustomData();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  bin.setBlockDataMode(<span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (obj != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">      slotDesc.hasReadObjectNoDataMethod() &amp;&amp;</span><br><span class="line">      handles.lookupException(passHandle) == <span class="keyword">null</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    slotDesc.invokeReadObjectNoData(obj);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="QA"><a href="#QA" class="headerlink" title="QA"></a>QA</h2><h3 id="为什么向Stream写入对象的顺序和从Stream读对象的数据的顺序要一样"><a href="#为什么向Stream写入对象的顺序和从Stream读对象的数据的顺序要一样" class="headerlink" title="为什么向Stream写入对象的顺序和从Stream读对象的数据的顺序要一样"></a>为什么向Stream写入对象的顺序和从Stream读对象的数据的顺序要一样</h3><h3 id="为什么父类实现序列化，子类会自动实现"><a href="#为什么父类实现序列化，子类会自动实现" class="headerlink" title="为什么父类实现序列化，子类会自动实现"></a>为什么父类实现序列化，子类会自动实现</h3><blockquote><p>因为父类实现了 序列化接口Externalizable或Serializable，由下来源码可知</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// remaining cases</span></span><br><span class="line"><span class="keyword">if</span> (obj <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">  writeString((String) obj, unshared);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (cl.isArray()) &#123;</span><br><span class="line">  writeArray(obj, desc, unshared);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Enum) &#123;</span><br><span class="line">  writeEnum((Enum&lt;?&gt;) obj, desc, unshared);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Serializable) &#123;</span><br><span class="line">  writeOrdinaryObject(obj, desc, unshared);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (extendedDebugInfo) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> NotSerializableException(</span><br><span class="line">      cl.getName() + <span class="string">"\n"</span> + debugInfoStack.toString());</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> NotSerializableException(cl.getName());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在此处相当于子类也实现了，所以当父类实现序列化时，子类也会自动实现</p></blockquote><h3 id="子类实现序列化，父类的属性不可以正常实例化"><a href="#子类实现序列化，父类的属性不可以正常实例化" class="headerlink" title="子类实现序列化，父类的属性不可以正常实例化"></a>子类实现序列化，父类的属性不可以正常实例化</h3><blockquote><p>实现 Externalizable 接口的类，在反序列化时需要无参的构造函数，所以为了构造父对象时，只能调用无参构造函数作为默认的父对象，因此父类的属性值是无参构造函数执行后的值</p></blockquote><h3 id="serialVersionUID如何保证版本兼容"><a href="#serialVersionUID如何保证版本兼容" class="headerlink" title="serialVersionUID如何保证版本兼容"></a>serialVersionUID如何保证版本兼容</h3>]]></content>
      
      
      <categories>
          
          <category> 源码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java序列化 </tag>
            
            <tag> Externalizable </tag>
            
            <tag> Serializable </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>黄金圈法则What-How-Why</title>
      <link href="/2020/07/01/%E9%BB%84%E9%87%91%E5%9C%88%E6%B3%95%E5%88%99What-How-Why/"/>
      <url>/2020/07/01/%E9%BB%84%E9%87%91%E5%9C%88%E6%B3%95%E5%88%99What-How-Why/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文内容转自作者[朱利安_AI产品经理]的博客 <a href="https://www.jianshu.com/p/f1185cc40c41" target="_blank" rel="noopener">思考的梯子 | 黄金圈法则What-How-Why(超干货)</a></p></blockquote><h2 id="「黄金圈」是什么？"><a href="#「黄金圈」是什么？" class="headerlink" title="「黄金圈」是什么？"></a>「黄金圈」是什么？</h2><blockquote><p>这里的「黄金圈」并不是金拱门那个</p></blockquote><p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593614321/1060404-94a6f1ba2acd1ae5_yitj9c.webp" alt="images"></p><blockquote><p>「黄金圈」法则是营销大师Simon Sinek 提出的理论</p></blockquote><p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593614413/1060404-bc89d66866e63b1c_fn4ccq.webp" alt="images"></p><blockquote><p>上面这段英文的大概意思就是消费者更愿意为「本质需求」买单。</p></blockquote><blockquote><p>举个例子（瞎编的），假设外国车在一开始中国本地化的时候</p></blockquote><ul><li><h4 id="宝马宣传策略"><a href="#宝马宣传策略" class="headerlink" title="宝马宣传策略"></a>宝马宣传策略</h4></li></ul><blockquote><p>车好，发动机好，省油，动力足，安全</p></blockquote><ul><li><h4 id="奥迪宣传策略"><a href="#奥迪宣传策略" class="headerlink" title="奥迪宣传策略"></a>奥迪宣传策略</h4></li></ul><blockquote><p>中国特有加长版，后排乘坐超舒适，尊贵</p></blockquote><blockquote><p><strong>这种情况下高端市场谁的销量好？</strong></p></blockquote><blockquote><p>肯定是「奥迪」，高端车和普通车，都是四个轮子，<strong>如何体现差异性</strong>，这时候再从表象入手已经不能体现差异，必须深入到人内心的本质。</p><p><strong>国人好面子，「加长」「尊贵」简直就是直击老板们的内心，销量自然不差</strong></p><p>上面的case中，如果只看到了「表象」，谈论的就是「是什么」，就是在「What」层面，但谈论的是「为什么」的时候，已经深入到了「Why」层面。</p></blockquote><blockquote><p><strong>将事物分为「What-How-Why」逐层深入，就是「黄金圈」法则。</strong></p><p>而在实际生活和工作中使用，网上各种版本都有，切入的角度不相同，下面总结两种我认为比较合适的切入角度。</p></blockquote><h2 id="使用「黄金圈」实现「1–-gt-0-1」的过程"><a href="#使用「黄金圈」实现「1–-gt-0-1」的过程" class="headerlink" title="使用「黄金圈」实现「1–&gt;0.1」的过程"></a>使用「黄金圈」实现「1–&gt;0.1」的过程</h2><p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593614662/1060404-bdebe9419348bd52_joe6ct.webp" alt="images"></p><blockquote><p>当一个事物，现象或者需求已经存在的时，<strong>我们想要去探寻它，了解它，学习或者分享它的时候</strong>，适合用<strong>「What - How - Why」</strong>的思维方式</p></blockquote><h3 id="我们学新事物的过程"><a href="#我们学新事物的过程" class="headerlink" title="我们学新事物的过程"></a>我们学新事物的过程</h3><blockquote><p>当面对一个新的事物，如果上来直接讲原理，多数人是会懵逼的</p><p>但如果你从表象出发</p><ul><li>What - 了解完这个东西是什么？</li><li>How - 再了解这个东西它是怎么使用的？</li><li>Why - 最终再去了解原理</li></ul><p><strong>那么这个过程就会变得顺畅很多，而这个过程实际也就是这样一个整体拆成一个个组成部分，掰开揉碎的过程</strong></p></blockquote><h3 id="给老外介绍微信支付的case"><a href="#给老外介绍微信支付的case" class="headerlink" title="给老外介绍微信支付的case"></a>给老外介绍微信支付的case</h3><blockquote><p>举一个简单例子，假如有个老外来中国，他完全没有用过移动支付，你需要给他介绍微信支付</p></blockquote><h4 id="Step1-What"><a href="#Step1-What" class="headerlink" title="Step1 - What"></a>Step1 - What</h4><blockquote><p>你需要告诉他什么是微信支付？最简单的例子就是直接给他演示一遍支付的过程。</p></blockquote><p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593614757/1060404-85b8db355ba4e86e_g1b1ef.webp" alt="images"></p><h4 id="Step2-How"><a href="#Step2-How" class="headerlink" title="Step2 - How"></a>Step2 - How</h4><blockquote><p>而当他知道了什么是微信支付之后，你教她如何使用微信支付，就需要一步一步的引导</p><ol><li>绑定银行卡</li><li>实名认证</li><li>开通微信支付</li><li>设定密码</li><li>使用</li></ol></blockquote><p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593614838/1060404-422053e0c54a3e55_umxurz.webp" alt="images"></p><h4 id="Step3-Why"><a href="#Step3-Why" class="headerlink" title="Step3 - Why"></a>Step3 - Why</h4><blockquote><p>后续随着交谈的进一步深入</p><p>你们可以<strong>再去讨论一下为什么在中国会诞生如此通用的微信支付</strong>？</p></blockquote><blockquote><p>又或者探讨一下<strong>为什么</strong>国内的人愿意使用微信支付，但是<strong>在外国更多使用信用卡？</strong></p><p>探索内容其实是围绕的<strong>微信支付引申出的更加深入的内容</strong>，可能会涉及到社会的科技，经济，文化等。</p></blockquote><p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593614882/1060404-47a0245ff32e4a25_lrrrzt.webp" alt="images"></p><blockquote><p>通过以上简单的例子，说明<strong>当一个事物它本身存在在那里，你要去介绍或者探索它的时候就可以通过「What - How - Why」的方式，实现「1-&gt;0.1」逐步拆解</strong>。</p><p>千万不要觉得这东西太简单没有用。</p><p>我们试着<strong>把场景延伸一点，例如你去分析用户需求时，实际也可以使用这个策略</strong></p></blockquote><h3 id="运营人员的数据看板的case"><a href="#运营人员的数据看板的case" class="headerlink" title="运营人员的数据看板的case"></a>运营人员的数据看板的case</h3><blockquote><p>例如你要给公司内部运营人员做「数据看板」的工具，自动获取当天的数据形成图表显示。</p><p>当你收集需求的时候，注意！<strong>这个需求是已经存在的，你是可以通过需要通过「What - How - Why」的步骤去深入挖掘</strong></p><p>例如，面对面交流时</p><ul><li>what - 运营人员口头表述的需求是什么？</li><li>How - 他们现在<strong>用什么流程实现上述需求</strong>？（没有数据看板工具时，他们用什么流程完成数据汇总展示）</li><li>Why - 为什么会有这个需求？是因为KPI指标？还是领导个人喜好？</li></ul></blockquote><h3 id="介绍一本书-一个工具-一部电影case"><a href="#介绍一本书-一个工具-一部电影case" class="headerlink" title="介绍一本书/一个工具/一部电影case"></a>介绍一本书/一个工具/一部电影case</h3><blockquote><p>再比如你在写文章介绍自己喜欢的一本书时</p><ul><li>what - 这本书是关于什么内容？</li><li>How - 作者是如何去呈现这些内容？建议读者怎样去阅读这本书？</li><li>Why - 为什么推荐这本书？为什么作者会有书中的这些观点，而我是怎么看的？等</li></ul><p>合理的使用「What - How - Why」，<strong>它能够在你大脑毫无思绪的时候，快速建立起逻辑框架</strong>，顺着这个框架往下走，能够深入的挖掘出不少有价值的内容。</p></blockquote><h2 id="使用「黄金圈」实现「0-1–-gt-1」的过程"><a href="#使用「黄金圈」实现「0-1–-gt-1」的过程" class="headerlink" title="使用「黄金圈」实现「0.1–&gt;1」的过程"></a>使用「黄金圈」实现「0.1–&gt;1」的过程</h2><blockquote><p>在产品策划需求的时候，需要<strong>将大脑中的点子，转化为最终实际可以被用户使用的产品。</strong></p><p>这个过程我认为是从「0.1–&gt;1」的过程，适合用「What - Why - How」的方式</p></blockquote><p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593615064/1060404-cfdf00fc910db12b_fbbt49.webp" alt="images"></p><blockquote><p>策划产品功能时，<strong>一开始是不知道最终的形态是什么的，所以你需要从零开始一点点的深入，积累每一个0.1，最终才能形成一个完整的1。</strong></p><p>举一个用户反馈功能策划的思考过程</p></blockquote><h3 id="用户反馈功能策划case"><a href="#用户反馈功能策划case" class="headerlink" title="用户反馈功能策划case"></a>用户反馈功能策划case</h3><h4 id="Step1-What-1"><a href="#Step1-What-1" class="headerlink" title="Step1 - What"></a>Step1 - What</h4><blockquote><p><strong>用户说需要一个反馈功能</strong>，我们设想<strong>用户能够利用该功能吐槽产品，反馈他的建议</strong>，产品人员能看到用户的建议，从而改进我们的产品</p><p>但如果直接开发，可能并没有挖到用户真实的需求</p></blockquote><p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593615165/1060404-fa613dd03c41a47f_vuhnqv.webp" alt="images"></p><h4 id="Step2-Why"><a href="#Step2-Why" class="headerlink" title="Step2 - Why"></a>Step2 - Why</h4><blockquote><p>我们继续去探索下，<strong>为什么用户会有这个需求？</strong></p><p>问用户为什么需要这个功能时，解释说<strong>因为要退货，但是不知道怎么退</strong>，产品上也没有任何的提示，希望得到你们的帮助，所以我希望有反馈功能，<strong>你们看到我的问题就可以帮我退货</strong>。</p></blockquote><blockquote><p>好吧，其实<strong>用户想要的并不是一个用户反馈的功能，而是一个帮助中心的功能</strong>，因为他不知道怎么去完成退货，APP里又不存在帮助中心。</p><p><strong>在他过往的概念里，退货就是打电话反馈给相应的人，这个问题就能解决，所以他需要一个反馈的功能。</strong></p><p>虽然用反馈功能确实能够解决这<strong>一个用户</strong>的问题，但它不是最佳的方式。反而提供<strong>「帮助中心」</strong>给他，不仅能解决他一个人的问题，也<strong>能解决其他用户的问题</strong>。</p></blockquote><p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593615229/1060404-89f4000f8db3faee_ytqw4r.webp" alt="images"></p><h4 id="Step3-How"><a href="#Step3-How" class="headerlink" title="Step3 - How"></a>Step3 - How</h4><blockquote><p>开始思考如何实现帮助中心，用「Visio」梳理清楚，当有了清晰流程后，再用「Auxre」画原型。</p></blockquote><p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593615260/1060404-7db96e912eb0dc08_ey48wc.webp" alt="images"></p><blockquote><p>上述的这个例子实际是虚构的，但做产品过程中，问题会比上述的更为复杂，而且要规划的是一整个产品的所有用功能</p><p>但其实是对于整个产品，<strong>这样的思考思路依旧是成立的，将一整个产品拆散给一个个的业务流，每一个业务流里面去使用「What - Why - How」</strong></p></blockquote><h3 id="完成老板的需求的case"><a href="#完成老板的需求的case" class="headerlink" title="完成老板的需求的case"></a>完成老板的需求的case</h3><blockquote><p>如果你不是产品策划人员，这个思考方式依旧对你有用。</p></blockquote><blockquote><p><strong>例如某天临下班的时，老板说做一个介绍公司的PPT，明天上午就要用！</strong></p><p>如果你没有任何的思考，直接去做，<strong>即使你熬夜通宵</strong>，做出了一份「公司简史」，描述过公司从创立到现今取得的种种成就，公司的愿景，使命，价值观等，<strong>但第二天老板可能大发雷霆，因为你写的东西并不是他想要的。</strong></p><p><strong>你可以使用如下的方式思考</strong></p><ul><li><strong>what</strong> - 做一个介绍公司的PPT</li><li><strong>Why</strong> - <strong>为什么需要做一个PPT？</strong></li></ul><p>老板回答「<strong>明天上午有投资人过来</strong>，需要你写个PPT，介绍一下我们公司」，价值，愿景，使命这些带过就可以了，着重描述一下我们的产品</p></blockquote><blockquote><p>需求明确了，老板是想<strong>通过**</strong>介绍我们公司的产品来获得投资人的青睐<strong>，所以你</strong>应该思考投资人希望看到什么**。</p><p>例如产品的市场占有率，增长率，日活跃等等，表现产品在市面上蒸蒸日上的感觉</p></blockquote><blockquote><ul><li><strong>How</strong> - 将上述你思考的需要给投资人看的点，通过PPT描述出来</li></ul></blockquote><h3 id="两种思考方式如何配合？"><a href="#两种思考方式如何配合？" class="headerlink" title="两种思考方式如何配合？"></a>两种思考方式如何配合？</h3><blockquote><p><strong>上述提及的两种思考方式，实际是相辅相成的。</strong></p><p>当你设计一个东西的时候，东西不存在，是「0.1 –&gt;1」的过程，用「What - Why - How」去思考整体流程。</p><p>而当你去探寻一个已知的事物的时候，实现「0.1 –&gt; 0.01」逐步拆解的过程，用「What - How - Why」的方式</p></blockquote><blockquote><p><strong>再回来看 「用户反馈需求的case」</strong></p><p>case里面我们用了「What - Why - How」的过程</p></blockquote><p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593615444/1060404-c24d2349c1647492.png_ahvcaj.webp" alt="images"></p><blockquote><p>而<strong>「Why」这一步去探寻用户的需求的时候，**</strong>是站在「用户的视角」，用「What - How - Why」去深挖**</p></blockquote><blockquote><p><strong>再回看「给老板写PPT的Case」</strong></p><p>因为这个PPT，你不明确要写什么内容的时候，你要去创造它，我们用了「What - Why - How」的流程</p></blockquote><p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593615497/1060404-071cee81e04b7cde.png_pwl5va.webp" alt="images"></p><blockquote><p><strong>当你在思考「why」时，是去思考「投资人」想要看什么，使用「What - How - Why」的方式去深挖。</strong></p><p>而最终实际展示给投资人的PPT，也是通过「What - How - Why」来讲解，展示公司的实力。</p></blockquote><blockquote><p>所以，当你在<strong>创造时，从「0.1–&gt;1」，用「What - Why - How」</strong>的大流程，去逐渐的将每个0.1拼接起来，成为1</p><p>但当你要<strong>深挖需求的时候，实际就是要深入的每一个「0.1」</strong>，<strong>你要切换视角</strong>，<strong>将自己**</strong>作为需求方去思考「What - How - Why」**，去深挖。</p></blockquote><p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593615549/1060404-7cd0dfcf681814d1_chshnl.webp" alt="images"></p><blockquote><p>两种思维方式实际在过程中是不断切换使用，不断的将每一个「0.1」思考透彻，最终逐步汇聚成「1」</p><p>以上说的可能有点绕，如果看不明白的话，可以认真再看一遍 : P</p></blockquote><h2 id="为什么推荐用「黄金圈」？"><a href="#为什么推荐用「黄金圈」？" class="headerlink" title="为什么推荐用「黄金圈」？"></a>为什么推荐用「黄金圈」？</h2><blockquote><p>在我「梯子仓库」中，其实存在着多种思考模型，但是<strong>「黄金圈」却是我最常用的一种</strong>，我自己在生活中和在产品策划上的亲身实践经验也告诉我，<strong>这个思考方式普适性很广，极力推荐。</strong></p></blockquote><p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593615616/1060404-0d1ee818b49c0354_g8g4aw.webp" alt="images"></p><blockquote><p><strong>熟练的使用「黄金圈」，能很快的从「表象层」下的「本质层」去打「本质大Boss」，获得Boss爆出的装备 —— 「</strong>部分的<strong>真相」</strong></p></blockquote><p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593615643/1060404-5ae0e77b111e26cc_yx0pzu.webp" alt="images"></p><h2 id="重点总结"><a href="#重点总结" class="headerlink" title="重点总结"></a>重点总结</h2><h3 id="什么是「黄金圈」法则？"><a href="#什么是「黄金圈」法则？" class="headerlink" title="什么是「黄金圈」法则？"></a>什么是「黄金圈」法则？</h3><blockquote><p>由营销大师 Simon Sinek 提出的理论，事物有「What，How，Why」三个层，逐层深入</p><ul><li><strong>What</strong>，是什么</li><li><strong>How</strong>，如何实现</li><li><strong>Why</strong>，为什么是这样（而不是另外的样子呢）？</li></ul></blockquote><h3 id="如何在工作和生活中使用「黄金圈」法则？"><a href="#如何在工作和生活中使用「黄金圈」法则？" class="headerlink" title="如何在工作和生活中使用「黄金圈」法则？"></a>如何在工作和生活中使用「黄金圈」法则？</h3><h4 id="当你构思的时候，使用「what-why-how」"><a href="#当你构思的时候，使用「what-why-how」" class="headerlink" title="当你构思的时候，使用「what - why - how」"></a>当你构思的时候，使用「what - why - how」</h4><blockquote><p>拿到一个需求不要立刻动手画原型，先思考可能的本质（为什么有这个需求），想清楚每一个「0.1」，最终再汇总为「1」，形成方案。</p></blockquote><h4 id="当你需要深入细节部分的时候，使用「What-How-Why」"><a href="#当你需要深入细节部分的时候，使用「What-How-Why」" class="headerlink" title="当你需要深入细节部分的时候，使用「What - How - Why」"></a>当你需要深入细节部分的时候，使用「What - How - Why」</h4><blockquote><p>一个事物本身存在在那里，你要去探索或介绍它时，可以通过「What - How - Why」的方式，通过「0.1–&gt;0.01」逐步拆解的过程，获得更深入的挖掘。</p></blockquote><blockquote><p>这篇文章你可能看的觉得累，良药苦口，希望对你有帮助，感谢优秀的你耐心看完啦~</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 方法论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> What-How-Why </tag>
            
            <tag> 黄金圈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA调试技巧</title>
      <link href="/2020/07/01/IDEA%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/"/>
      <url>/2020/07/01/IDEA%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="IntelliJ-IDEA调试技巧"><a href="#IntelliJ-IDEA调试技巧" class="headerlink" title="IntelliJ IDEA调试技巧"></a>IntelliJ IDEA调试技巧</h1><blockquote><p>本文内容转自作者光年的博客 <a href="https://www.cnblogs.com/jun1019/p/9741224.html" target="_blank" rel="noopener">你可能不知道的IDEA高级调试技巧</a></p></blockquote><h2 id="条件断点"><a href="#条件断点" class="headerlink" title="条件断点"></a>条件断点</h2><blockquote><p>循环中经常用到这个技巧，比如：遍历1个大List的过程中，想让断点停在某个特定值。</p></blockquote><p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593539643/640_d1dije.png" alt="img"></p><blockquote><p>参考上图，在断点的位置，右击断点旁边的小红点，会出来一个界面，在Condition这里填入断点条件即可，这样调试时，就会自动停在i=10的位置</p></blockquote><p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593539683/640_yum8dv.png" alt="img"></p><h2 id="回到”上一步”"><a href="#回到”上一步”" class="headerlink" title="回到”上一步”"></a>回到”上一步”</h2><blockquote><p>该技巧最适合特别复杂的方法套方法的场景，好不容易跑起来，一不小心手一抖，断点过去了，想回过头看看刚才的变量值，如果不知道该技巧，只能再跑一遍。</p></blockquote><p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593539717/640_lajuxz.png" alt="img"></p><blockquote><p>参考上图，method1方法调用method2，当前断点的位置j=100，点击上图红色箭头位置的Drop Frame图标后，时间穿越了</p></blockquote><p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593539752/640_piua3m.png" alt="img"></p><blockquote><p>回到了method1刚开始调用的时候，变量i变成了99，没毛病吧，老铁们，是不是很6 :)</p></blockquote><blockquote><p>注：好奇心是人类进步的阶梯，如果想知道为啥这个功能叫Drop Frame，而不是类似Back To Previous 之类的，可以去翻翻JVM的书，JVM内部以栈帧为单位保存线程的运行状态，drop frame即扔掉当前运行的栈帧，这样当前“指针”的位置，就自然到了上一帧的位置。</p></blockquote><h2 id="多线程调试"><a href="#多线程调试" class="headerlink" title="多线程调试"></a>多线程调试</h2><blockquote><p>多线程同时运行时，谁先执行，谁后执行，完全是看CPU心情的，无法控制先后，运行时可能没什么问题，但是调试时就比较麻烦了，最明显的就是断点乱跳，一会儿停这个线程，一会儿停在另一个线程，比如下图</p></blockquote><p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593539790/640_wnwb9x.png" alt="img"></p><blockquote><p>如果想希望下一个断点位置是第2句诗句，可能要失望了：</p></blockquote><p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593539818/640_so81g4.png" alt="img"></p><blockquote><p>如果想让线程在调试时，想按自己的愿意来，让它停在哪个线程就停在哪个线程，可以在图中3个断点的小红点上右击，</p></blockquote><p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593539845/640_efqx7c.png" alt="img"></p><blockquote><p>即：Suspend挂起的条件是按每个线程来，而非All。把这3个断点都这么设置后，再来一发试试</p></blockquote><p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593539878/640_icm5kx.png" alt="img"></p><blockquote><p>注意上图中的红框位置，断点停下来时，这个下拉框可以看到各个线程（注：给线程起个容易识别的名字是个好习惯！），我们可以选择线程“天空中的飞鸟”</p></blockquote><p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593540251/27612-20170415105122517-107387528_xljbze.png" alt="img"></p><blockquote><p>断点如愿停在了第2句诗。</p></blockquote><h2 id="远程调试"><a href="#远程调试" class="headerlink" title="远程调试"></a>远程调试</h2><blockquote><p>这也是一个装B的利器，本机不用启动项目，只要有源代码，可以在本机直接远程调试服务器上的代码，打开姿势如下：</p></blockquote><h3 id="项目启动时，先允许远程调试"><a href="#项目启动时，先允许远程调试" class="headerlink" title="项目启动时，先允许远程调试"></a>项目启动时，先允许远程调试</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -server -Xms512m -Xmx512m -Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt\_socket,server=y,<span class="built_in">suspend</span>=n,address=9081 -Djava.ext.dirs=. <span class="variable">$&#123;main\_class&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>起作用的就是</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,<span class="built_in">suspend</span>=n,address=9081</span><br></pre></td></tr></table></figure><blockquote><p>注意：远程调试从技术上讲，就是在本机与远程建立scoket通讯，所以端口不要冲突，而且本机要允许访问远程端口，另外这一段参数，放要在-jar 或 ${main_class}的前面</p></blockquote><h3 id="idea中设置远程调试"><a href="#idea中设置远程调试" class="headerlink" title="idea中设置远程调试"></a>idea中设置远程调试</h3><p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593540024/640_bhwihk.png" alt="img"></p><blockquote><p>然后就可以调试了</p></blockquote><p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593540052/640_xs7tio.png" alt="img"></p><h2 id="临时执行表达式-修改变量的运行值"><a href="#临时执行表达式-修改变量的运行值" class="headerlink" title="临时执行表达式/修改变量的运行值"></a>临时执行表达式/修改变量的运行值</h2><blockquote><p>调试时，可以临时执行一些表达式，参考下图：点击这二个图标中的任何1个都可以</p></blockquote><p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593540081/640_k7lqd7.png" alt="img"></p><blockquote><p>点击+号后，就可以在新出现的输入框里输入表达式，比如i+5</p></blockquote><p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593540109/640_myrbws.png" alt="img"></p><blockquote><p>然后回车，马上就能看到结果</p></blockquote><p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593540137/640_md8g3e.png" alt="img"></p><blockquote><p>当然，如果调试时，想动态修改变量的值，也很容易，在变量上右击，然后选择Set Value，剩下的事，地球人都知道。</p></blockquote><p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593540166/640_fnnxll.png" alt="img"></p><blockquote><p>善用上述调试技巧，相当大家撸起代码来会更有感觉，祝大家使用愉快！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IntelliJ IDEA </tag>
            
            <tag> 调试技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>String源码分析</title>
      <link href="/2020/07/01/String%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>/2020/07/01/String%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Java中所有的字符串都是String类实例的实现。</p></blockquote><blockquote><p>字符串是常量，所以一旦字符串被创建后，它们的值就不能被更改。 <strong>但字符串缓冲区支持可变字符串</strong></p></blockquote><blockquote><p>正因为String对象不可变，所以他们可以被共享。例如：String str = “abc”; 和 char data[] = {‘a’,’b’,’c’}; String str = new String(data); 这两个str相等。</p></blockquote><blockquote><p>Java对连接运算符(+)提供了特殊的支持，用于其他对象转换为string</p></blockquote><blockquote><p>字符串转换通过Object基类中的<code>toString</code>方法实现</p></blockquote><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><h3 id="value"><a href="#value" class="headerlink" title="value"></a>value</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** The value is used for character storage. */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">char</span> value[];</span><br></pre></td></tr></table></figure><blockquote><p>从注释可以看出，这个value[]是用来实际保存字符串内容的 该变量被修饰为final, 而final修饰数组(引用数据类型)时，该数组本身可以修改，但指向该数组的地址的引用不能修改 但String初始化后可以被修改啊？如：String str = “abc”; str = “123”; 此处的其实并没有修改”abc”的引用，而是str先断开”abc”的引用，再将”123”的引用赋给str</p></blockquote><h3 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Cache the hash code for the string */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> hash; <span class="comment">// Default to 0</span></span><br></pre></td></tr></table></figure><blockquote><p>从注释可以看出，hash是字符串的哈希值 【hash的作用】 Java的对象是存储在堆中的，为了提高对象的查询效率使用散列值查找。散列值的使用方式时，定义一个键来映射对象所在的内存地址，当需要查找对象时，可以直接用这个键去查找而不用遍历整个堆中的对象，这个值就是此处的hash</p></blockquote><h3 id="serialVersionUID"><a href="#serialVersionUID" class="headerlink" title="serialVersionUID"></a>serialVersionUID</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** use serialVersionUID from JDK 1.0.2 for interoperability */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">6849794470754667710L</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class String is special cased within the Serialization Stream Protocol.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * A String instance is written into an ObjectOutputStream according to</span></span><br><span class="line"><span class="comment"> * &lt;a href="&#123;<span class="doctag">@docRoot</span>&#125;/../platform/serialization/spec/output.html"&gt;</span></span><br><span class="line"><span class="comment"> * Object Serialization Specification, Section 6.2, "Stream Elements"&lt;/a&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ObjectStreamField[] serialPersistentFields =</span><br><span class="line">    <span class="keyword">new</span> ObjectStreamField[<span class="number">0</span>];</span><br></pre></td></tr></table></figure><blockquote><p>String类实现了序列化Serializable接口，在网络传输或固态化对象是，通过序列化的方式实现。 这两个参数就是用来实现序列化和反序列化的。 在JVM的反序列化中，會比較數據流中的serialVersionUID和類中的serialVersionUID是否相等，如果相等，則認爲類沒有變化，可以把數據流加載成實例對象，如果不同則抛出InvalidClassException異常</p></blockquote><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><h4 id="无参构造器"><a href="#无参构造器" class="headerlink" title="无参构造器"></a>无参构造器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.value = <span class="string">""</span>.value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>初始化创建一个新的空字符串的String对象，注意尽量不用这个构造方法，因为会创建不可变的空的字符串对象，会浪费JVM进行GC处理</p><p>此处的 <strong>“”.value</strong> 其实就是Object.value，”” 就是这个Object</p></blockquote><h4 id="字符串参数的构造器"><a href="#字符串参数的构造器" class="headerlink" title="字符串参数的构造器"></a>字符串参数的构造器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(String original)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.value = original.value;</span><br><span class="line">    <span class="keyword">this</span>.hash = original.hash;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在实现中，直接将字符串内容和hash值赋值给新创建对象的value和hash</p></blockquote><h4 id="字符数组参数的构造器"><a href="#字符数组参数的构造器" class="headerlink" title="字符数组参数的构造器"></a>字符数组参数的构造器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">char</span> value[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.value = Arrays.copyOf(value, value.length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">char</span> value[], <span class="keyword">int</span> offset, <span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (offset &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(offset);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (count &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (count &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(count);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (offset &lt;= value.length) &#123;</span><br><span class="line">            <span class="keyword">this</span>.value = <span class="string">""</span>.value;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Note: offset or count might be near -1&gt;&gt;&gt;1.</span></span><br><span class="line">    <span class="keyword">if</span> (offset &gt; value.length - count) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(offset + count);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.value = Arrays.copyOfRange(value, offset, offset+count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>用字符数组创建String类是，会用Arrays类的copyOf或copyOfRange方法，将旧数据复制到新数组返回的</p></blockquote><h4 id="通过unicode的编码值数组初始化String对象"><a href="#通过unicode的编码值数组初始化String对象" class="headerlink" title="通过unicode的编码值数组初始化String对象"></a>通过unicode的编码值数组初始化String对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">int</span>[] codePoints, <span class="keyword">int</span> offset, <span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (offset &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(offset);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (count &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (count &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(count);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (offset &lt;= codePoints.length) &#123;</span><br><span class="line">            <span class="keyword">this</span>.value = <span class="string">""</span>.value;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Note: offset or count might be near -1&gt;&gt;&gt;1.</span></span><br><span class="line">    <span class="keyword">if</span> (offset &gt; codePoints.length - count) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(offset + count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> end = offset + count;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Pass 1: Compute precise size of char[]</span></span><br><span class="line">    <span class="keyword">int</span> n = count;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = offset; i &lt; end; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> c = codePoints[i];</span><br><span class="line">        <span class="keyword">if</span> (Character.isBmpCodePoint(c))</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (Character.isValidCodePoint(c))</span><br><span class="line">            n++;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(Integer.toString(c));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Pass 2: Allocate and fill in char[]</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">char</span>[] v = <span class="keyword">new</span> <span class="keyword">char</span>[n];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = offset, j = <span class="number">0</span>; i &lt; end; i++, j++) &#123;</span><br><span class="line">        <span class="keyword">int</span> c = codePoints[i];</span><br><span class="line">        <span class="keyword">if</span> (Character.isBmpCodePoint(c))</span><br><span class="line">            v[j] = (<span class="keyword">char</span>)c;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            Character.toSurrogates(c, v, j++);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.value = v;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>该方法的前半部分和<em>字符数组参数</em>的实现一样，后面将int数组转换为字符串数组，然后赋值给value</p></blockquote><h4 id="字节数组参数构造器"><a href="#字节数组参数构造器" class="headerlink" title="字节数组参数构造器"></a>字节数组参数构造器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">byte</span> bytes[], <span class="keyword">int</span> offset, <span class="keyword">int</span> length, String charsetName)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (charsetName == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"charsetName"</span>);</span><br><span class="line">    checkBounds(bytes, offset, length);</span><br><span class="line">    <span class="keyword">this</span>.value = StringCoding.decode(charsetName, bytes, offset, length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">byte</span> bytes[], <span class="keyword">int</span> offset, <span class="keyword">int</span> length, Charset charset)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (charset == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"charset"</span>);</span><br><span class="line">    checkBounds(bytes, offset, length);</span><br><span class="line">    <span class="keyword">this</span>.value =  StringCoding.decode(charset, bytes, offset, length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">byte</span> bytes[], String charsetName)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(bytes, <span class="number">0</span>, bytes.length, charsetName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">byte</span> bytes[], Charset charset)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(bytes, <span class="number">0</span>, bytes.length, charset);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">byte</span> bytes[], <span class="keyword">int</span> offset, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">    checkBounds(bytes, offset, length);</span><br><span class="line">    <span class="keyword">this</span>.value = StringCoding.decode(bytes, offset, length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">byte</span> bytes[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(bytes, <span class="number">0</span>, bytes.length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Java的String中是按Unicode编码来存储内容的，在网络中Java对象以byte的形式传输，当需要将byte和String之间转换时就需要指定编码方式，具体使用StringCoding的decode的方法解码, 当不传编码方式，如下默认使用ISO-8859-1</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">char</span>[] decode(<span class="keyword">byte</span>[] ba, <span class="keyword">int</span> off, <span class="keyword">int</span> len) &#123;</span><br><span class="line">    String csn = Charset.defaultCharset().name();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// use charset name decode() variant which provides caching.</span></span><br><span class="line">        <span class="keyword">return</span> decode(csn, ba, off, len);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (UnsupportedEncodingException x) &#123;</span><br><span class="line">        warnUnsupportedCharset(csn);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> decode(<span class="string">"ISO-8859-1"</span>, ba, off, len);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (UnsupportedEncodingException x) &#123;</span><br><span class="line">        <span class="comment">// If this code is hit during VM initialization, MessageUtils is</span></span><br><span class="line">        <span class="comment">// the only way we will be able to get any kind of error message.</span></span><br><span class="line">        MessageUtils.err(<span class="string">"ISO-8859-1 charset not available: "</span></span><br><span class="line">                         + x.toString());</span><br><span class="line">        <span class="comment">// If we can not find ISO-8859-1 (a required encoding) then things</span></span><br><span class="line">        <span class="comment">// are seriously wrong with the installation.</span></span><br><span class="line">        System.exit(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="StringBuffer-StringBuilder作为参数的构造器"><a href="#StringBuffer-StringBuilder作为参数的构造器" class="headerlink" title="StringBuffer/StringBuilder作为参数的构造器"></a>StringBuffer/StringBuilder作为参数的构造器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(StringBuffer buffer)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span>(buffer) &#123;</span><br><span class="line">        <span class="keyword">this</span>.value = Arrays.copyOf(buffer.getValue(), buffer.length());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(StringBuilder builder)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.value = Arrays.copyOf(builder.getValue(), builder.length());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这两种构造方法和char数组的类似，都是调用Arrays的copyOf方法，将旧数据复制到新数组然后返回的方式，但StringBuffer是线程安全的。 这两个估摸着很少用到，直接用StringBuffer/StringBuilder的toString方法更方便</p></blockquote><h4 id="保护类型的构造方法"><a href="#保护类型的构造方法" class="headerlink" title="保护类型的构造方法"></a>保护类型的构造方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* Package private constructor which shares value array for speed.</span></span><br><span class="line"><span class="comment">* this constructor is always expected to be called with share==true.</span></span><br><span class="line"><span class="comment">* a separate constructor is needed because we already have a public</span></span><br><span class="line"><span class="comment">* String(char[]) constructor that makes a copy of the given char[].</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">String(<span class="keyword">char</span>[] value, <span class="keyword">boolean</span> share) &#123;</span><br><span class="line">    <span class="comment">// assert share : "unshared not supported";</span></span><br><span class="line">    <span class="keyword">this</span>.value = value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>该方法是default类型的、也即Package private类型的方法。和 String(char value[]) 方法相比：</p><ol><li>多了一个boolean的形参，且”this constructor is always expected to be called with share==true.” share恒为true，且在方法体中没有用到该形参。所以share参数只是为了重载这个构造方法</li><li>方法体中的实现不同。 String(char value[])的方法是通过Arrays.copyOf申请新地址，然后将旧内容逐一拷贝到新申请的地址中。 String(char[] value, boolean share)方法是直接将旧的数组引用赋值给新值，也就是新值和旧值同时指向同一个地址。</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">char</span> value[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.value = Arrays.copyOf(value, value.length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">char</span>[] copyOf(<span class="keyword">char</span>[] original, <span class="keyword">int</span> newLength) &#123;</span><br><span class="line">    <span class="keyword">char</span>[] copy = <span class="keyword">new</span> <span class="keyword">char</span>[newLength];</span><br><span class="line">    System.arraycopy(original, <span class="number">0</span>, copy, <span class="number">0</span>,</span><br><span class="line">                     Math.min(original.length, newLength));</span><br><span class="line">    <span class="keyword">return</span> copy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h3><h4 id="与对象比较-equals"><a href="#与对象比较-equals" class="headerlink" title="与对象比较 equals"></a>与对象比较 equals</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Compares this string to the specified object.  The result is &#123;<span class="doctag">@code</span></span></span><br><span class="line"><span class="comment"> * true&#125; if and only if the argument is not &#123;<span class="doctag">@code</span> null&#125; and is a &#123;<span class="doctag">@code</span></span></span><br><span class="line"><span class="comment"> * String&#125; object that represents the same sequence of characters as this</span></span><br><span class="line"><span class="comment"> * object.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  anObject</span></span><br><span class="line"><span class="comment"> *         The object to compare this &#123;<span class="doctag">@code</span> String&#125; against</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  &#123;<span class="doctag">@code</span> true&#125; if the given object represents a &#123;<span class="doctag">@code</span> String&#125;</span></span><br><span class="line"><span class="comment"> *          equivalent to this string, &#123;<span class="doctag">@code</span> false&#125; otherwise</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>  #compareTo(String)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>  #equalsIgnoreCase(String)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object anObject)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == anObject) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (anObject <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">        String anotherString = (String)anObject;</span><br><span class="line">        <span class="keyword">int</span> n = value.length;</span><br><span class="line">        <span class="keyword">if</span> (n == anotherString.value.length) &#123;</span><br><span class="line">            <span class="keyword">char</span> v1[] = value;</span><br><span class="line">            <span class="keyword">char</span> v2[] = anotherString.value;</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (n-- != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (v1[i] != v2[i])</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>String对equals进行了重写。 在该方法中，逐一对比字符串的每个字符，相同返回true，否则返回false</p></blockquote><h4 id="与StringBuffer-CharSequence比较-contentEquals"><a href="#与StringBuffer-CharSequence比较-contentEquals" class="headerlink" title="与StringBuffer/CharSequence比较 contentEquals"></a>与StringBuffer/CharSequence比较 contentEquals</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contentEquals</span><span class="params">(StringBuffer sb)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> contentEquals((CharSequence)sb);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">nonSyncContentEquals</span><span class="params">(AbstractStringBuilder sb)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> v1[] = value;</span><br><span class="line">    <span class="keyword">char</span> v2[] = sb.getValue();</span><br><span class="line">    <span class="keyword">int</span> n = v1.length;</span><br><span class="line">    <span class="keyword">if</span> (n != sb.length()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v1[i] != v2[i]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contentEquals</span><span class="params">(CharSequence cs)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Argument is a StringBuffer, StringBuilder</span></span><br><span class="line">    <span class="keyword">if</span> (cs <span class="keyword">instanceof</span> AbstractStringBuilder) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cs <span class="keyword">instanceof</span> StringBuffer) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(cs) &#123;</span><br><span class="line">               <span class="keyword">return</span> nonSyncContentEquals((AbstractStringBuilder)cs);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> nonSyncContentEquals((AbstractStringBuilder)cs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Argument is a String</span></span><br><span class="line">    <span class="keyword">if</span> (cs <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">        <span class="keyword">return</span> equals(cs);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Argument is a generic CharSequence</span></span><br><span class="line">    <span class="keyword">char</span> v1[] = value;</span><br><span class="line">    <span class="keyword">int</span> n = v1.length;</span><br><span class="line">    <span class="keyword">if</span> (n != cs.length()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v1[i] != cs.charAt(i)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="忽略大小写比较字符串对象-equalsIgnoreCase"><a href="#忽略大小写比较字符串对象-equalsIgnoreCase" class="headerlink" title="忽略大小写比较字符串对象 equalsIgnoreCase"></a>忽略大小写比较字符串对象 equalsIgnoreCase</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equalsIgnoreCase</span><span class="params">(String anotherString)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">this</span> == anotherString) ? <span class="keyword">true</span></span><br><span class="line">            : (anotherString != <span class="keyword">null</span>)</span><br><span class="line">            &amp;&amp; (anotherString.value.length == value.length)</span><br><span class="line">            &amp;&amp; regionMatches(<span class="keyword">true</span>, <span class="number">0</span>, anotherString, <span class="number">0</span>, value.length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">regionMatches</span><span class="params">(<span class="keyword">boolean</span> ignoreCase, <span class="keyword">int</span> toffset,</span></span></span><br><span class="line"><span class="function"><span class="params">        String other, <span class="keyword">int</span> ooffset, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ta[] = value;</span><br><span class="line">    <span class="keyword">int</span> to = toffset;</span><br><span class="line">    <span class="keyword">char</span> pa[] = other.value;</span><br><span class="line">    <span class="keyword">int</span> po = ooffset;</span><br><span class="line">    <span class="comment">// Note: toffset, ooffset, or len might be near -1&gt;&gt;&gt;1.</span></span><br><span class="line">    <span class="keyword">if</span> ((ooffset &lt; <span class="number">0</span>) || (toffset &lt; <span class="number">0</span>)</span><br><span class="line">            || (toffset &gt; (<span class="keyword">long</span>)value.length - len)</span><br><span class="line">            || (ooffset &gt; (<span class="keyword">long</span>)other.value.length - len)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (len-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">char</span> c1 = ta[to++];</span><br><span class="line">        <span class="keyword">char</span> c2 = pa[po++];</span><br><span class="line">        <span class="keyword">if</span> (c1 == c2) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ignoreCase) &#123;</span><br><span class="line">            <span class="comment">// If characters don't match but case may be ignored,</span></span><br><span class="line">            <span class="comment">// try converting both characters to uppercase.</span></span><br><span class="line">            <span class="comment">// If the results match, then the comparison scan should</span></span><br><span class="line">            <span class="comment">// continue.</span></span><br><span class="line">            <span class="keyword">char</span> u1 = Character.toUpperCase(c1);</span><br><span class="line">            <span class="keyword">char</span> u2 = Character.toUpperCase(c2);</span><br><span class="line">            <span class="keyword">if</span> (u1 == u2) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Unfortunately, conversion to uppercase does not work properly</span></span><br><span class="line">            <span class="comment">// for the Georgian alphabet, which has strange rules about case</span></span><br><span class="line">            <span class="comment">// conversion.  So we need to make one last check before</span></span><br><span class="line">            <span class="comment">// exiting.</span></span><br><span class="line">            <span class="keyword">if</span> (Character.toLowerCase(u1) == Character.toLowerCase(u2)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>此处用三目运算符，如果完全相等直接返回，否则将字符逐一转成大/小写判断是否相等</p></blockquote><h4 id="比较字符串-compareTo"><a href="#比较字符串-compareTo" class="headerlink" title="比较字符串 compareTo"></a>比较字符串 compareTo</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(String anotherString)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len1 = value.length;</span><br><span class="line">    <span class="keyword">int</span> len2 = anotherString.value.length;</span><br><span class="line">    <span class="keyword">int</span> lim = Math.min(len1, len2);</span><br><span class="line">    <span class="keyword">char</span> v1[] = value;</span><br><span class="line">    <span class="keyword">char</span> v2[] = anotherString.value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (k &lt; lim) &#123;</span><br><span class="line">        <span class="keyword">char</span> c1 = v1[k];</span><br><span class="line">        <span class="keyword">char</span> c2 = v2[k];</span><br><span class="line">        <span class="keyword">if</span> (c1 != c2) &#123;</span><br><span class="line">            <span class="keyword">return</span> c1 - c2;</span><br><span class="line">        &#125;</span><br><span class="line">        k++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> len1 - len2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>逐一比较两字符串的每个字符，长度为两字符串间的最小值，若不相等则返回不相等的两字符的ASCII码差值；若两个字符串长度不等则返回他们的长度差；若相等返回0</p></blockquote><h4 id="字符串局部匹配相等-regionMatches"><a href="#字符串局部匹配相等-regionMatches" class="headerlink" title="字符串局部匹配相等 regionMatches"></a>字符串局部匹配相等 regionMatches</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">regionMatches</span><span class="params">(<span class="keyword">int</span> toffset, String other, <span class="keyword">int</span> ooffset,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ta[] = value;</span><br><span class="line">    <span class="keyword">int</span> to = toffset;</span><br><span class="line">    <span class="keyword">char</span> pa[] = other.value;</span><br><span class="line">    <span class="keyword">int</span> po = ooffset;</span><br><span class="line">    <span class="comment">// Note: toffset, ooffset, or len might be near -1&gt;&gt;&gt;1.</span></span><br><span class="line">    <span class="keyword">if</span> ((ooffset &lt; <span class="number">0</span>) || (toffset &lt; <span class="number">0</span>)</span><br><span class="line">            || (toffset &gt; (<span class="keyword">long</span>)value.length - len)</span><br><span class="line">            || (ooffset &gt; (<span class="keyword">long</span>)other.value.length - len)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (len-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ta[to++] != pa[po++]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">regionMatches</span><span class="params">(<span class="keyword">boolean</span> ignoreCase, <span class="keyword">int</span> toffset,</span></span></span><br><span class="line"><span class="function"><span class="params">        String other, <span class="keyword">int</span> ooffset, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ta[] = value;</span><br><span class="line">    <span class="keyword">int</span> to = toffset;</span><br><span class="line">    <span class="keyword">char</span> pa[] = other.value;</span><br><span class="line">    <span class="keyword">int</span> po = ooffset;</span><br><span class="line">    <span class="comment">// Note: toffset, ooffset, or len might be near -1&gt;&gt;&gt;1.</span></span><br><span class="line">    <span class="keyword">if</span> ((ooffset &lt; <span class="number">0</span>) || (toffset &lt; <span class="number">0</span>)</span><br><span class="line">            || (toffset &gt; (<span class="keyword">long</span>)value.length - len)</span><br><span class="line">            || (ooffset &gt; (<span class="keyword">long</span>)other.value.length - len)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (len-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">char</span> c1 = ta[to++];</span><br><span class="line">        <span class="keyword">char</span> c2 = pa[po++];</span><br><span class="line">        <span class="keyword">if</span> (c1 == c2) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ignoreCase) &#123;</span><br><span class="line">            <span class="comment">// If characters don't match but case may be ignored,</span></span><br><span class="line">            <span class="comment">// try converting both characters to uppercase.</span></span><br><span class="line">            <span class="comment">// If the results match, then the comparison scan should</span></span><br><span class="line">            <span class="comment">// continue.</span></span><br><span class="line">            <span class="keyword">char</span> u1 = Character.toUpperCase(c1);</span><br><span class="line">            <span class="keyword">char</span> u2 = Character.toUpperCase(c2);</span><br><span class="line">            <span class="keyword">if</span> (u1 == u2) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Unfortunately, conversion to uppercase does not work properly</span></span><br><span class="line">            <span class="comment">// for the Georgian alphabet, which has strange rules about case</span></span><br><span class="line">            <span class="comment">// conversion.  So we need to make one last check before</span></span><br><span class="line">            <span class="comment">// exiting.</span></span><br><span class="line">            <span class="keyword">if</span> (Character.toLowerCase(u1) == Character.toLowerCase(u2)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串搜索"><a href="#字符串搜索" class="headerlink" title="字符串搜索"></a>字符串搜索</h3><h4 id="正则匹配"><a href="#正则匹配" class="headerlink" title="正则匹配"></a>正则匹配</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(String regex)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Pattern.matches(regex, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="字符串包含"><a href="#字符串包含" class="headerlink" title="字符串包含"></a>字符串包含</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns true if and only if this string contains the specified</span></span><br><span class="line"><span class="comment"> * sequence of char values.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> s the sequence to search for</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> true if this string contains &#123;<span class="doctag">@code</span> s&#125;, false otherwise</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.5</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(CharSequence s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> indexOf(s.toString()) &gt; -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="指定字符在字符串中出现的位置"><a href="#指定字符在字符串中出现的位置" class="headerlink" title="指定字符在字符串中出现的位置"></a>指定字符在字符串中出现的位置</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(<span class="keyword">int</span> ch)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> indexOf(ch, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lastIndexOf</span><span class="params">(<span class="keyword">int</span> ch)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> lastIndexOf(ch, length() - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lastIndexOf</span><span class="params">(<span class="keyword">int</span> ch, <span class="keyword">int</span> fromIndex)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> isLatin1() ? StringLatin1.lastIndexOf(value, ch, fromIndex) : StringUTF16.lastIndexOf(value, ch, fromIndex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串截取"><a href="#字符串截取" class="headerlink" title="字符串截取"></a>字符串截取</h3><h4 id="substring"><a href="#substring" class="headerlink" title="substring"></a>substring</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> beginIndex)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (beginIndex &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(beginIndex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> subLen = value.length - beginIndex;</span><br><span class="line">    <span class="keyword">if</span> (subLen &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(subLen);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (beginIndex == <span class="number">0</span>) ? <span class="keyword">this</span> : <span class="keyword">new</span> String(value, beginIndex, subLen);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> beginIndex, <span class="keyword">int</span> endIndex)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (beginIndex &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(beginIndex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (endIndex &gt; value.length) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(endIndex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> subLen = endIndex - beginIndex;</span><br><span class="line">    <span class="keyword">if</span> (subLen &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(subLen);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ((beginIndex == <span class="number">0</span>) &amp;&amp; (endIndex == value.length)) ? <span class="keyword">this</span></span><br><span class="line">            : <span class="keyword">new</span> String(value, beginIndex, subLen);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这两个重载方法中，如果截取本身则直接返回，否则调用构造方法，用Arrays.copyOfRange的方法申请内存复制返回新字符串</p></blockquote><h3 id="字符串替换"><a href="#字符串替换" class="headerlink" title="字符串替换"></a>字符串替换</h3><h4 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Replaces each substring of this string that matches the literal target</span></span><br><span class="line"><span class="comment"> * sequence with the specified literal replacement sequence. The</span></span><br><span class="line"><span class="comment"> * replacement proceeds from the beginning of the string to the end, for</span></span><br><span class="line"><span class="comment"> * example, replacing "aa" with "b" in the string "aaa" will result in</span></span><br><span class="line"><span class="comment"> * "ba" rather than "ab".</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  target The sequence of char values to be replaced</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  replacement The replacement sequence of char values</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  The resulting string</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.5</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">replace</span><span class="params">(CharSequence target, CharSequence replacement)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Pattern.compile(target.toString(), Pattern.LITERAL).matcher(</span><br><span class="line">            <span class="keyword">this</span>).replaceAll(Matcher.quoteReplacement(replacement.toString()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>替换字符串子串是通过从前往后匹配父字符串来实现的。 比如，将aaa替换成b，替换后应该时ba，而不是ab</p></blockquote><h3 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h3><h4 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Concatenates the specified string to the end of this string.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * If the length of the argument string is &#123;<span class="doctag">@code</span> 0&#125;, then this</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> String&#125; object is returned. Otherwise, a</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> String&#125; object is returned that represents a character</span></span><br><span class="line"><span class="comment"> * sequence that is the concatenation of the character sequence</span></span><br><span class="line"><span class="comment"> * represented by this &#123;<span class="doctag">@code</span> String&#125; object and the character</span></span><br><span class="line"><span class="comment"> * sequence represented by the argument string.&lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Examples:</span></span><br><span class="line"><span class="comment"> * &lt;blockquote&gt;&lt;pre&gt;</span></span><br><span class="line"><span class="comment"> * "cares".concat("s") returns "caress"</span></span><br><span class="line"><span class="comment"> * "to".concat("get").concat("her") returns "together"</span></span><br><span class="line"><span class="comment"> * &lt;/pre&gt;&lt;/blockquote&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>   str   the &#123;<span class="doctag">@code</span> String&#125; that is concatenated to the end</span></span><br><span class="line"><span class="comment"> *                of this &#123;<span class="doctag">@code</span> String&#125;.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  a string that represents the concatenation of this object's</span></span><br><span class="line"><span class="comment"> *          characters followed by the string argument's characters.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">concat</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> otherLen = str.length();</span><br><span class="line">    <span class="keyword">if</span> (otherLen == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> len = value.length;</span><br><span class="line">    <span class="keyword">char</span> buf[] = Arrays.copyOf(value, len + otherLen);</span><br><span class="line">    str.getChars(buf, len);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> String(buf, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>该方法是通过重新申请一块内存，然后把新旧字符串拷贝到新内容中，并返回新String类的方式实现的</p></blockquote><h3 id="字符串转换"><a href="#字符串转换" class="headerlink" title="字符串转换"></a>字符串转换</h3><h4 id="Bytes转换"><a href="#Bytes转换" class="headerlink" title="Bytes转换"></a>Bytes转换</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">byte</span>[] getBytes() &#123;</span><br><span class="line">    <span class="keyword">return</span> StringCoding.encode(value, <span class="number">0</span>, value.length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">byte</span>[] getBytes(String charsetName)</span><br><span class="line">        <span class="keyword">throws</span> UnsupportedEncodingException &#123;</span><br><span class="line">    <span class="keyword">if</span> (charsetName == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    <span class="keyword">return</span> StringCoding.encode(charsetName, value, <span class="number">0</span>, value.length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">byte</span>[] getBytes(Charset charset) &#123;</span><br><span class="line">    <span class="keyword">if</span> (charset == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    <span class="keyword">return</span> StringCoding.encode(charset, value, <span class="number">0</span>, value.length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>若不指定字符集，默认编码方式为ISO-8859-1</p></blockquote><h4 id="转化为字符数组"><a href="#转化为字符数组" class="headerlink" title="转化为字符数组"></a>转化为字符数组</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">char</span>[] toCharArray() &#123;</span><br><span class="line">    <span class="comment">// Cannot use Arrays.copyOf because of class initialization order issues</span></span><br><span class="line">    <span class="keyword">char</span> result[] = <span class="keyword">new</span> <span class="keyword">char</span>[value.length];</span><br><span class="line">    System.arraycopy(value, <span class="number">0</span>, result, <span class="number">0</span>, value.length);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>通过申请新的物理地址，拷贝旧文件实现复制</p></blockquote><h4 id="大小写转换"><a href="#大小写转换" class="headerlink" title="大小写转换"></a>大小写转换</h4><h5 id="toUpperCase"><a href="#toUpperCase" class="headerlink" title="toUpperCase"></a>toUpperCase</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toUpperCase</span><span class="params">(Locale locale)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (locale == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> firstLower;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> len = value.length;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Now check if there are any characters that need to be changed. */</span></span><br><span class="line">    scan: &#123;</span><br><span class="line">        <span class="keyword">for</span> (firstLower = <span class="number">0</span> ; firstLower &lt; len; ) &#123;</span><br><span class="line">            <span class="keyword">int</span> c = (<span class="keyword">int</span>)value[firstLower];</span><br><span class="line">            <span class="keyword">int</span> srcCount;</span><br><span class="line">            <span class="keyword">if</span> ((c &gt;= Character.MIN_HIGH_SURROGATE)</span><br><span class="line">                    &amp;&amp; (c &lt;= Character.MAX_HIGH_SURROGATE)) &#123;</span><br><span class="line">                c = codePointAt(firstLower);</span><br><span class="line">                srcCount = Character.charCount(c);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                srcCount = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> upperCaseChar = Character.toUpperCaseEx(c);</span><br><span class="line">            <span class="keyword">if</span> ((upperCaseChar == Character.ERROR)</span><br><span class="line">                    || (c != upperCaseChar)) &#123;</span><br><span class="line">                <span class="keyword">break</span> scan;</span><br><span class="line">            &#125;</span><br><span class="line">            firstLower += srcCount;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* result may grow, so i+resultOffset is the write location in result */</span></span><br><span class="line">    <span class="keyword">int</span> resultOffset = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span>[] result = <span class="keyword">new</span> <span class="keyword">char</span>[len]; <span class="comment">/* may grow */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Just copy the first few upperCase characters. */</span></span><br><span class="line">    System.arraycopy(value, <span class="number">0</span>, result, <span class="number">0</span>, firstLower);</span><br><span class="line"></span><br><span class="line">    String lang = locale.getLanguage();</span><br><span class="line">    <span class="keyword">boolean</span> localeDependent =</span><br><span class="line">            (lang == <span class="string">"tr"</span> || lang == <span class="string">"az"</span> || lang == <span class="string">"lt"</span>);</span><br><span class="line">    <span class="keyword">char</span>[] upperCharArray;</span><br><span class="line">    <span class="keyword">int</span> upperChar;</span><br><span class="line">    <span class="keyword">int</span> srcChar;</span><br><span class="line">    <span class="keyword">int</span> srcCount;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = firstLower; i &lt; len; i += srcCount) &#123;</span><br><span class="line">        srcChar = (<span class="keyword">int</span>)value[i];</span><br><span class="line">        <span class="keyword">if</span> ((<span class="keyword">char</span>)srcChar &gt;= Character.MIN_HIGH_SURROGATE &amp;&amp;</span><br><span class="line">            (<span class="keyword">char</span>)srcChar &lt;= Character.MAX_HIGH_SURROGATE) &#123;</span><br><span class="line">            srcChar = codePointAt(i);</span><br><span class="line">            srcCount = Character.charCount(srcChar);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            srcCount = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (localeDependent) &#123;</span><br><span class="line">            upperChar = ConditionalSpecialCasing.toUpperCaseEx(<span class="keyword">this</span>, i, locale);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            upperChar = Character.toUpperCaseEx(srcChar);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((upperChar == Character.ERROR)</span><br><span class="line">                || (upperChar &gt;= Character.MIN_SUPPLEMENTARY_CODE_POINT)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (upperChar == Character.ERROR) &#123;</span><br><span class="line">                <span class="keyword">if</span> (localeDependent) &#123;</span><br><span class="line">                    upperCharArray =</span><br><span class="line">                            ConditionalSpecialCasing.toUpperCaseCharArray(<span class="keyword">this</span>, i, locale);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    upperCharArray = Character.toUpperCaseCharArray(srcChar);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (srcCount == <span class="number">2</span>) &#123;</span><br><span class="line">                resultOffset += Character.toChars(upperChar, result, i + resultOffset) - srcCount;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                upperCharArray = Character.toChars(upperChar);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* Grow result if needed */</span></span><br><span class="line">            <span class="keyword">int</span> mapLen = upperCharArray.length;</span><br><span class="line">            <span class="keyword">if</span> (mapLen &gt; srcCount) &#123;</span><br><span class="line">                <span class="keyword">char</span>[] result2 = <span class="keyword">new</span> <span class="keyword">char</span>[result.length + mapLen - srcCount];</span><br><span class="line">                System.arraycopy(result, <span class="number">0</span>, result2, <span class="number">0</span>, i + resultOffset);</span><br><span class="line">                result = result2;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; mapLen; ++x) &#123;</span><br><span class="line">                result[i + resultOffset + x] = upperCharArray[x];</span><br><span class="line">            &#125;</span><br><span class="line">            resultOffset += (mapLen - srcCount);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result[i + resultOffset] = (<span class="keyword">char</span>)upperChar;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> String(result, <span class="number">0</span>, len + resultOffset);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="toLowerCase"><a href="#toLowerCase" class="headerlink" title="toLowerCase"></a>toLowerCase</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toLowerCase</span><span class="params">(Locale locale)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (locale == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> firstUpper;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> len = value.length;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Now check if there are any characters that need to be changed. */</span></span><br><span class="line">    scan: &#123;</span><br><span class="line">        <span class="keyword">for</span> (firstUpper = <span class="number">0</span> ; firstUpper &lt; len; ) &#123;</span><br><span class="line">            <span class="keyword">char</span> c = value[firstUpper];</span><br><span class="line">            <span class="keyword">if</span> ((c &gt;= Character.MIN_HIGH_SURROGATE)</span><br><span class="line">                    &amp;&amp; (c &lt;= Character.MAX_HIGH_SURROGATE)) &#123;</span><br><span class="line">                <span class="keyword">int</span> supplChar = codePointAt(firstUpper);</span><br><span class="line">                <span class="keyword">if</span> (supplChar != Character.toLowerCase(supplChar)) &#123;</span><br><span class="line">                    <span class="keyword">break</span> scan;</span><br><span class="line">                &#125;</span><br><span class="line">                firstUpper += Character.charCount(supplChar);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (c != Character.toLowerCase(c)) &#123;</span><br><span class="line">                    <span class="keyword">break</span> scan;</span><br><span class="line">                &#125;</span><br><span class="line">                firstUpper++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span>[] result = <span class="keyword">new</span> <span class="keyword">char</span>[len];</span><br><span class="line">    <span class="keyword">int</span> resultOffset = <span class="number">0</span>;  <span class="comment">/* result may grow, so i+resultOffset</span></span><br><span class="line"><span class="comment">                            * is the write location in result */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Just copy the first few lowerCase characters. */</span></span><br><span class="line">    System.arraycopy(value, <span class="number">0</span>, result, <span class="number">0</span>, firstUpper);</span><br><span class="line"></span><br><span class="line">    String lang = locale.getLanguage();</span><br><span class="line">    <span class="keyword">boolean</span> localeDependent =</span><br><span class="line">            (lang == <span class="string">"tr"</span> || lang == <span class="string">"az"</span> || lang == <span class="string">"lt"</span>);</span><br><span class="line">    <span class="keyword">char</span>[] lowerCharArray;</span><br><span class="line">    <span class="keyword">int</span> lowerChar;</span><br><span class="line">    <span class="keyword">int</span> srcChar;</span><br><span class="line">    <span class="keyword">int</span> srcCount;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = firstUpper; i &lt; len; i += srcCount) &#123;</span><br><span class="line">        srcChar = (<span class="keyword">int</span>)value[i];</span><br><span class="line">        <span class="keyword">if</span> ((<span class="keyword">char</span>)srcChar &gt;= Character.MIN_HIGH_SURROGATE</span><br><span class="line">                &amp;&amp; (<span class="keyword">char</span>)srcChar &lt;= Character.MAX_HIGH_SURROGATE) &#123;</span><br><span class="line">            srcChar = codePointAt(i);</span><br><span class="line">            srcCount = Character.charCount(srcChar);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            srcCount = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (localeDependent ||</span><br><span class="line">            srcChar == <span class="string">'\u03A3'</span> || <span class="comment">// GREEK CAPITAL LETTER SIGMA</span></span><br><span class="line">            srcChar == <span class="string">'\u0130'</span>) &#123; <span class="comment">// LATIN CAPITAL LETTER I WITH DOT ABOVE</span></span><br><span class="line">            lowerChar = ConditionalSpecialCasing.toLowerCaseEx(<span class="keyword">this</span>, i, locale);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            lowerChar = Character.toLowerCase(srcChar);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((lowerChar == Character.ERROR)</span><br><span class="line">                || (lowerChar &gt;= Character.MIN_SUPPLEMENTARY_CODE_POINT)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (lowerChar == Character.ERROR) &#123;</span><br><span class="line">                lowerCharArray =</span><br><span class="line">                        ConditionalSpecialCasing.toLowerCaseCharArray(<span class="keyword">this</span>, i, locale);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (srcCount == <span class="number">2</span>) &#123;</span><br><span class="line">                resultOffset += Character.toChars(lowerChar, result, i + resultOffset) - srcCount;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                lowerCharArray = Character.toChars(lowerChar);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* Grow result if needed */</span></span><br><span class="line">            <span class="keyword">int</span> mapLen = lowerCharArray.length;</span><br><span class="line">            <span class="keyword">if</span> (mapLen &gt; srcCount) &#123;</span><br><span class="line">                <span class="keyword">char</span>[] result2 = <span class="keyword">new</span> <span class="keyword">char</span>[result.length + mapLen - srcCount];</span><br><span class="line">                System.arraycopy(result, <span class="number">0</span>, result2, <span class="number">0</span>, i + resultOffset);</span><br><span class="line">                result = result2;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; mapLen; ++x) &#123;</span><br><span class="line">                result[i + resultOffset + x] = lowerCharArray[x];</span><br><span class="line">            &#125;</span><br><span class="line">            resultOffset += (mapLen - srcCount);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result[i + resultOffset] = (<span class="keyword">char</span>)lowerChar;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> String(result, <span class="number">0</span>, len + resultOffset);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h3><h4 id="length"><a href="#length" class="headerlink" title="length"></a>length</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">length</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value.length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="isEmpty"><a href="#isEmpty" class="headerlink" title="isEmpty"></a>isEmpty</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value.length == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="charAt"><a href="#charAt" class="headerlink" title="charAt"></a>charAt</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">charAt</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((index &lt; <span class="number">0</span>) || (index &gt;= value.length)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(index);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value[index];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="字符串指定索引的字符码点"><a href="#字符串指定索引的字符码点" class="headerlink" title="字符串指定索引的字符码点"></a>字符串指定索引的字符码点</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">codePointAt</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((index &lt; <span class="number">0</span>) || (index &gt;= value.length)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(index);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Character.codePointAtImpl(value, index, value.length);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">codePointBefore</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = index - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> ((i &lt; <span class="number">0</span>) || (i &gt;= value.length)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(index);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Character.codePointBeforeImpl(value, index, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">codePointCount</span><span class="params">(<span class="keyword">int</span> beginIndex, <span class="keyword">int</span> endIndex)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (beginIndex &lt; <span class="number">0</span> || endIndex &gt; value.length || beginIndex &gt; endIndex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Character.codePointCountImpl(value, beginIndex, endIndex - beginIndex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">offsetByCodePoints</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">int</span> codePointOffset)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; value.length) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Character.offsetByCodePointsImpl(value, <span class="number">0</span>, value.length,</span><br><span class="line">            index, codePointOffset);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="trim"><a href="#trim" class="headerlink" title="trim"></a>trim</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns a string whose value is this string, with any leading and trailing</span></span><br><span class="line"><span class="comment"> * whitespace removed.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * If this &#123;<span class="doctag">@code</span> String&#125; object represents an empty character</span></span><br><span class="line"><span class="comment"> * sequence, or the first and last characters of character sequence</span></span><br><span class="line"><span class="comment"> * represented by this &#123;<span class="doctag">@code</span> String&#125; object both have codes</span></span><br><span class="line"><span class="comment"> * greater than &#123;<span class="doctag">@code</span> '\u005Cu0020'&#125; (the space character), then a</span></span><br><span class="line"><span class="comment"> * reference to this &#123;<span class="doctag">@code</span> String&#125; object is returned.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Otherwise, if there is no character with a code greater than</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> '\u005Cu0020'&#125; in the string, then a</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> String&#125; object representing an empty string is</span></span><br><span class="line"><span class="comment"> * returned.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Otherwise, let &lt;i&gt;k&lt;/i&gt; be the index of the first character in the</span></span><br><span class="line"><span class="comment"> * string whose code is greater than &#123;<span class="doctag">@code</span> '\u005Cu0020'&#125;, and let</span></span><br><span class="line"><span class="comment"> * &lt;i&gt;m&lt;/i&gt; be the index of the last character in the string whose code</span></span><br><span class="line"><span class="comment"> * is greater than &#123;<span class="doctag">@code</span> '\u005Cu0020'&#125;. A &#123;<span class="doctag">@code</span> String&#125;</span></span><br><span class="line"><span class="comment"> * object is returned, representing the substring of this string that</span></span><br><span class="line"><span class="comment"> * begins with the character at index &lt;i&gt;k&lt;/i&gt; and ends with the</span></span><br><span class="line"><span class="comment"> * character at index &lt;i&gt;m&lt;/i&gt;-that is, the result of</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> this.substring(k, m + 1)&#125;.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * This method may be used to trim whitespace (as defined above) from</span></span><br><span class="line"><span class="comment"> * the beginning and end of a string.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  A string whose value is this string, with any leading and trailing white</span></span><br><span class="line"><span class="comment"> *          space removed, or this string if it has no leading or</span></span><br><span class="line"><span class="comment"> *          trailing white space.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">trim</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = value.length;</span><br><span class="line">    <span class="keyword">int</span> st = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span>[] val = value;    <span class="comment">/* avoid getfield opcode */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ((st &lt; len) &amp;&amp; (val[st] &lt;= <span class="string">' '</span>)) &#123;</span><br><span class="line">        st++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ((st &lt; len) &amp;&amp; (val[len - <span class="number">1</span>] &lt;= <span class="string">' '</span>)) &#123;</span><br><span class="line">        len--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ((st &gt; <span class="number">0</span>) || (len &lt; value.length)) ? substring(st, len) : <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="hasCode"><a href="#hasCode" class="headerlink" title="hasCode"></a>hasCode</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns a hash code for this string. The hash code for a</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> String&#125; object is computed as</span></span><br><span class="line"><span class="comment"> * &lt;blockquote&gt;&lt;pre&gt;</span></span><br><span class="line"><span class="comment"> * s[0]*31^(n-1) + s[1]*31^(n-2) + ... + s[n-1]</span></span><br><span class="line"><span class="comment"> * &lt;/pre&gt;&lt;/blockquote&gt;</span></span><br><span class="line"><span class="comment"> * using &#123;<span class="doctag">@code</span> int&#125; arithmetic, where &#123;<span class="doctag">@code</span> s[i]&#125; is the</span></span><br><span class="line"><span class="comment"> * &lt;i&gt;i&lt;/i&gt;th character of the string, &#123;<span class="doctag">@code</span> n&#125; is the length of</span></span><br><span class="line"><span class="comment"> * the string, and &#123;<span class="doctag">@code</span> ^&#125; indicates exponentiation.</span></span><br><span class="line"><span class="comment"> * (The hash value of the empty string is zero.)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  a hash code value for this object.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h = hash;</span><br><span class="line">    <span class="keyword">if</span> (h == <span class="number">0</span> &amp;&amp; value.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">char</span> val[] = value;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; value.length; i++) &#123;</span><br><span class="line">            h = <span class="number">31</span> * h + val[i];</span><br><span class="line">        &#125;</span><br><span class="line">        hash = h;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> h;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>该方法返回字符串的哈希值，该hash值的计算方式为： s[0]<em>31^(n-1) + s[1]</em>31^(n-2) + … + s[n-1] hash冲突？</p></blockquote><h4 id="String-Pool"><a href="#String-Pool" class="headerlink" title="String Pool"></a>String Pool</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns a canonical representation for the string object.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * A pool of strings, initially empty, is maintained privately by the</span></span><br><span class="line"><span class="comment"> * class &#123;<span class="doctag">@code</span> String&#125;.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * When the intern method is invoked, if the pool already contains a</span></span><br><span class="line"><span class="comment"> * string equal to this &#123;<span class="doctag">@code</span> String&#125; object as determined by</span></span><br><span class="line"><span class="comment"> * the &#123;<span class="doctag">@link</span> #equals(Object)&#125; method, then the string from the pool is</span></span><br><span class="line"><span class="comment"> * returned. Otherwise, this &#123;<span class="doctag">@code</span> String&#125; object is added to the</span></span><br><span class="line"><span class="comment"> * pool and a reference to this &#123;<span class="doctag">@code</span> String&#125; object is returned.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * It follows that for any two strings &#123;<span class="doctag">@code</span> s&#125; and &#123;<span class="doctag">@code</span> t&#125;,</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> s.intern() == t.intern()&#125; is &#123;<span class="doctag">@code</span> true&#125;</span></span><br><span class="line"><span class="comment"> * if and only if &#123;<span class="doctag">@code</span> s.equals(t)&#125; is &#123;<span class="doctag">@code</span> true&#125;.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * All literal strings and string-valued constant expressions are</span></span><br><span class="line"><span class="comment"> * interned. String literals are defined in section 3.10.5 of the</span></span><br><span class="line"><span class="comment"> * &lt;cite&gt;The Java&amp;trade; Language Specification&lt;/cite&gt;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  a string that has the same contents as this string, but is</span></span><br><span class="line"><span class="comment"> *          guaranteed to be from a pool of unique strings.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">intern</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><blockquote><p>String类维护了一个初始为空的String Pool 在调用intern方法时，如果String池中已经包含了一个相等的字符串对象，则直接返回String池中的该实例</p></blockquote><h2 id="QA"><a href="#QA" class="headerlink" title="QA"></a>QA</h2><h3 id="String类为什么是final"><a href="#String类为什么是final" class="headerlink" title="String类为什么是final"></a>String类为什么是final</h3><h3 id="value为什么是private"><a href="#value为什么是private" class="headerlink" title="value为什么是private"></a>value为什么是private</h3><h3 id="value为什么是final"><a href="#value为什么是final" class="headerlink" title="value为什么是final"></a>value为什么是final</h3><blockquote><ul><li>String类设计成final主要是给String做了阉割，不让String有子类，防止子类重载破坏String类的原有设计</li><li>value设计成final，第一是为了实现String Pool，不论在哪或者怎么样使用String，都保证了value有初始值、第二是value在String类的很多方法里作为形参传递(对象本质上是传引用，而final修饰的数组，这是这个数组引用不能变，数组本身能够被改变)，防止value被更改</li><li>private是为了只能让value属性在本String类中可用，如果为package private和protected的话，就会暴露在String的包下</li></ul></blockquote><h3 id="为什么要实现String-Pool"><a href="#为什么要实现String-Pool" class="headerlink" title="为什么要实现String Pool"></a>为什么要实现String Pool</h3><blockquote><ul><li>Java中字符串是最常用的数据结构，String池可以让同一个字符串的引用只占用堆中的一块地址，节省内存空间</li><li>让Java的String可以不冲突的共享</li></ul></blockquote><h3 id="子面值赋值-String-str-“123”-是如何实现的"><a href="#子面值赋值-String-str-“123”-是如何实现的" class="headerlink" title="子面值赋值(String str = “123”;)是如何实现的"></a>子面值赋值(String str = “123”;)是如何实现的</h3><blockquote><p>子面值赋值时，JVM会直接去String Pool中找是否存在”123”，存在则返回”123”这个对象的引用地址；如果不存在就先在String Pool中创建”123”这个对象，然后再返回</p></blockquote><h3 id="子面值赋值和new-String-“123”-字符串对象有什么区别"><a href="#子面值赋值和new-String-“123”-字符串对象有什么区别" class="headerlink" title="子面值赋值和new String(“123”)字符串对象有什么区别"></a>子面值赋值和new String(“123”)字符串对象有什么区别</h3><blockquote><p>子面值赋值流程如上；</p><p>new实例化String时，JVM会先在String Pool中查找是否有”123”这个对象，如果有则不再在String Pool中创建”123”了，而是直接在堆中创建”123”字符串对象，然后将堆中的”123”对象的引用地址返回；如果没有，则现在String Pool中创建”123”字符串对象，然后再在堆中创建”123”对象，最后将堆中的这个”123”对象的引用地址返回</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 源码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> String </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis规范与设计</title>
      <link href="/2020/06/27/Redis%E8%A7%84%E8%8C%83%E4%B8%8E%E8%AE%BE%E8%AE%A1/"/>
      <url>/2020/06/27/Redis%E8%A7%84%E8%8C%83%E4%B8%8E%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="Redis数据结构及使用场景"><a href="#Redis数据结构及使用场景" class="headerlink" title="Redis数据结构及使用场景"></a>Redis数据结构及使用场景</h2><h3 id="string"><a href="#string" class="headerlink" title="string"></a>string</h3><blockquote><p>可以包含任何数据，比如jpg图像或者序列化的对象，一个键最大能储存512M</p></blockquote><h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><blockquote><p>本质是链表而不是数组，这意味着list的增删效率高，时间复杂度为O(1)；但索引定位很慢，时间复杂度为O(n) 使用场景： 消息队列、TimeLine</p></blockquote><h3 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h3><blockquote><p>在实现上和java中的hashmap一致，是数组+链表的二维结构。 hash的值只能是字符串 使用场景： 存储对象</p></blockquote><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><blockquote><p>相当于Java中的HashSet，它内部的键值对是无序唯一的。 使用场景： </p><ol><li>集合的交集、差集：共同好友、好友推荐</li><li>唯一性： 统计访问网站的所有IP</li></ol></blockquote><h3 id="sortedSet"><a href="#sortedSet" class="headerlink" title="sortedSet"></a>sortedSet</h3><blockquote><p>类似于Java的SortedSet和HashMap的结合体，和set相比，增加了权重参数score 使用场景： 排行榜</p></blockquote><h2 id="Redis规范"><a href="#Redis规范" class="headerlink" title="Redis规范"></a>Redis规范</h2><h3 id="KEY-VALUE规范"><a href="#KEY-VALUE规范" class="headerlink" title="KEY-VALUE规范"></a>KEY-VALUE规范</h3><h4 id="KEY"><a href="#KEY" class="headerlink" title="KEY"></a>KEY</h4><h5 id="可读性和可管理性"><a href="#可读性和可管理性" class="headerlink" title="可读性和可管理性"></a>可读性和可管理性</h5><blockquote><p>以服务名及数据库表名称作为前缀，用冒号分割。如：服务名:表名:ID</p></blockquote><h5 id="简洁性"><a href="#简洁性" class="headerlink" title="简洁性"></a>简洁性</h5><blockquote><p>在保证key语义和防冲突的前提下，控制key长度，当大量key存在时，key也占很大的内存空间。</p></blockquote><h5 id="不包含特殊字符"><a href="#不包含特殊字符" class="headerlink" title="不包含特殊字符"></a>不包含特殊字符</h5><blockquote><p>key中不能包含特殊字符，如空格、\n、引号及其他</p></blockquote><h4 id="VALUE"><a href="#VALUE" class="headerlink" title="VALUE"></a>VALUE</h4><h5 id="拒绝数据量大的key-bigkey"><a href="#拒绝数据量大的key-bigkey" class="headerlink" title="拒绝数据量大的key(bigkey)"></a>拒绝数据量大的key(bigkey)</h5><blockquote><p>string类型不超过10KB，hash、list、set、zset元素个数不能超过5000个</p></blockquote><h5 id="选择合适的数据类型"><a href="#选择合适的数据类型" class="headerlink" title="选择合适的数据类型"></a>选择合适的数据类型</h5><blockquote><p>根据实际情况，合理使用数据结果，平衡内存和性能</p></blockquote><h5 id="控制key的生命周期"><a href="#控制key的生命周期" class="headerlink" title="控制key的生命周期"></a>控制key的生命周期</h5><blockquote><p>使用 expire 设置过期时间(打散过期时间，防止集中过期造成的雪崩) 不过期数据重点关注idletime</p></blockquote><h3 id="REDIS命令规范"><a href="#REDIS命令规范" class="headerlink" title="REDIS命令规范"></a>REDIS命令规范</h3><h4 id="O-N-关注N的数量"><a href="#O-N-关注N的数量" class="headerlink" title="O(N)关注N的数量"></a>O(N)关注N的数量</h4><blockquote><p>例如hgetall、lrange、smembers、zrange、sinter等并非不能使用，但需要明确N的值 有遍历需求时可以使用hscan、sscan、zscan等代替</p></blockquote><h4 id="禁用命令"><a href="#禁用命令" class="headerlink" title="禁用命令"></a>禁用命令</h4><blockquote><p>禁止线上使用keys、flushall、flushdb等，通过redis的rename机制禁掉命令，或者使用scan的方式渐进式处理</p></blockquote><h4 id="合理使用select"><a href="#合理使用select" class="headerlink" title="合理使用select"></a>合理使用select</h4><blockquote><p>redis的多数据库支持较弱，客户端支持较差。同时多业务用多数据库在底层实际还是单线程处理，并且会有干扰</p></blockquote><h4 id="使用批处理提高效率"><a href="#使用批处理提高效率" class="headerlink" title="使用批处理提高效率"></a>使用批处理提高效率</h4><blockquote><p>使用非原生命令pipeline替代mget、mset提高效率； 但要控制一次批量操作的元素个数（实际也和元素字节数有关）</p></blockquote><h4 id="不推荐过多使用redis事务"><a href="#不推荐过多使用redis事务" class="headerlink" title="不推荐过多使用redis事务"></a>不推荐过多使用redis事务</h4><blockquote><p>redis事务不支持回滚</p></blockquote><h3 id="客户端规范"><a href="#客户端规范" class="headerlink" title="客户端规范"></a>客户端规范</h3><h4 id="避免多应用使用同一个redis实例"><a href="#避免多应用使用同一个redis实例" class="headerlink" title="避免多应用使用同一个redis实例"></a>避免多应用使用同一个redis实例</h4><blockquote><p>不相干的业务拆分，公共数据做服务化</p></blockquote><h4 id="使用-redis连接池，有效控制连接的同时提高效率"><a href="#使用-redis连接池，有效控制连接的同时提高效率" class="headerlink" title="使用 redis连接池，有效控制连接的同时提高效率"></a>使用 redis连接池，有效控制连接的同时提高效率</h4><blockquote><p>使用Jedis等连接池操作redis</p></blockquote><h4 id="高并发下建议客户端添加熔断功能"><a href="#高并发下建议客户端添加熔断功能" class="headerlink" title="高并发下建议客户端添加熔断功能"></a>高并发下建议客户端添加熔断功能</h4><blockquote><p>例如：netflix hystrix</p></blockquote><h4 id="设置合理的密码，如果有必要使用SSL加密访问"><a href="#设置合理的密码，如果有必要使用SSL加密访问" class="headerlink" title="设置合理的密码，如果有必要使用SSL加密访问"></a>设置合理的密码，如果有必要使用SSL加密访问</h4><blockquote><p>设置合理的密码</p></blockquote><h4 id="根据业务类型，选择合适的内存淘汰策略，并设置好过期实际"><a href="#根据业务类型，选择合适的内存淘汰策略，并设置好过期实际" class="headerlink" title="根据业务类型，选择合适的内存淘汰策略，并设置好过期实际"></a>根据业务类型，选择合适的内存淘汰策略，并设置好过期实际</h4><blockquote><p>edis默认策略为volatile-lru，根据实际业务更改</p></blockquote><h2 id="REDIS相关工具"><a href="#REDIS相关工具" class="headerlink" title="REDIS相关工具"></a>REDIS相关工具</h2><h3 id="数据同步"><a href="#数据同步" class="headerlink" title="数据同步"></a>数据同步</h3><blockquote><p>redis-port</p></blockquote><h3 id="BIG-KEY-搜索"><a href="#BIG-KEY-搜索" class="headerlink" title="BIG KEY 搜索"></a>BIG KEY 搜索</h3><blockquote><p><a href="https://yq.aliyun.com/articles/117042?spm=a2c4e.11153940.0.0.fdaf744aWFvoW0" target="_blank" rel="noopener">https://yq.aliyun.com/articles/117042?spm=a2c4e.11153940.0.0.fdaf744aWFvoW0</a></p></blockquote><h3 id="HOT-KEY-搜索"><a href="#HOT-KEY-搜索" class="headerlink" title="HOT KEY 搜索"></a>HOT KEY 搜索</h3><blockquote><p><a href="https://yq.aliyun.com/go/articleRenderRedirect?spm=a2c4e.11153940.0.0.fdaf744aWFvoW0&url=https%3A%2F%2Fgithub.com%2Ffacebookarchive%2Fredis-faina" target="_blank" rel="noopener">redis-faina</a></p></blockquote><h2 id="Redis设计方案"><a href="#Redis设计方案" class="headerlink" title="Redis设计方案"></a>Redis设计方案</h2><h3 id="KEY-VALUE设计"><a href="#KEY-VALUE设计" class="headerlink" title="KEY-VALUE设计"></a>KEY-VALUE设计</h3><h4 id="实体"><a href="#实体" class="headerlink" title="实体"></a>实体</h4><blockquote><p>【KEY】: 服务名:表名:{entityId}</p><p>【VALUE】：(string) entityString</p><p>如: ucenter:user:{userId} VALUE:</p><ol><li>将实体对象转成map，然后存储到hash结构中</li><li>将实体对象存储到string结构中</li></ol></blockquote><h4 id="热搜词"><a href="#热搜词" class="headerlink" title="热搜词"></a>热搜词</h4><blockquote><p>【KEY】: 服务名:{业务类型}:keyword:hot</p><p>【VALUE】：clickNum keyword</p><p>如: media:{type}:keyword:hot VALUE: [sortedSet] 1199 “zhangsan” (点击数 keywords)</p></blockquote><h4 id="热榜"><a href="#热榜" class="headerlink" title="热榜"></a>热榜</h4><blockquote><p>【KEY】: 服务名:{业务类型}:read:hot</p><p>【VALUE】：(sortedSet) clickNum entityId</p><p>如: media:{type}:read:hot VALUE: [sortedSet] 234 98 (点击数 实体Id)</p></blockquote><h4 id="计数器"><a href="#计数器" class="headerlink" title="计数器"></a>计数器</h4><h5 id="PV"><a href="#PV" class="headerlink" title="PV"></a>PV</h5><blockquote><p>【KEY】: 服务名:pv:{entityType}:{entityId} </p><p>【VALUE】：(string) pvNum    </p><p>如: ass:pv:{entityType}:{entityId} VALUE: [string] 99</p></blockquote><h5 id="UV"><a href="#UV" class="headerlink" title="UV"></a>UV</h5><blockquote><p>【KEY】: 服务名:uv:{entityType}:{entityId}</p><p>【VALUE】：(string) uvNum     </p><p>如: ass:uv:{entityType}:{entityId} VALUE: [string] 124</p></blockquote><h4 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h4><blockquote><p>【KEY】:  服务名:表名:page:{pageNo}:{orderType}</p><p>【VALUE】: (zset) 实体ID（score: 实体ID）</p></blockquote><h4 id="浏览"><a href="#浏览" class="headerlink" title="浏览"></a>浏览</h4><blockquote><p>【KEY】: 服务名:表名:{uid}:browser</p><p>【VALUE】：(sortedSet) orderNum entityType+entityId</p><p>如: ucenter:user:{uid}:browser VALUE: [sortedSet] 1587029692 “{}” (排序 entityType和entityId组成的json)</p></blockquote><h4 id="评论"><a href="#评论" class="headerlink" title="评论"></a>评论</h4><blockquote><p>【KEY】: 服务名:{topicId}:{parentId}:comment</p><p>【VALUE】：(sortedSet) sort 实体ID (score: sort，value：实体ID)</p></blockquote><h4 id="实体赞"><a href="#实体赞" class="headerlink" title="实体赞"></a>实体赞</h4><blockquote><p>【KEY】: 服务名:行为:实体类型:实体ID</p><p>【VALUE】：(string) 行为Num</p><p>如: media:like:{entityType}:{entityId} VALUE: [string]    21</p></blockquote><h4 id="点赞"><a href="#点赞" class="headerlink" title="点赞"></a>点赞</h4><blockquote><p>【KEY】: 服务名:表名:{uid}:行为</p><p>【VALUE】：(sortedSet) 行为发生时间 entitiyType+entityId</p><p>如: ucenter:user:{uid}:like VALUE: [sortedSet]     1587029692 “{}” (排序 entityType和entityId组成的json)</p></blockquote><h4 id="收藏"><a href="#收藏" class="headerlink" title="收藏"></a>收藏</h4><blockquote><p>【KEY】: 服务名:表名:{uid}:行为</p><p>【VALUE】：(sortedSet) 行为发生时间 entityType+entityId</p><p>如: ucenter:user:{uid}:favorite VALUE: [sortedSet]    1587029692 “{}” (排序 entityType和entityId组成的json)</p></blockquote><h4 id="关注"><a href="#关注" class="headerlink" title="关注"></a>关注</h4><blockquote><p>【KEY】: 服务名:表名:{uid}:行为</p><p>【VALUE】：行为发生时间 entityType+entityId</p><p>如: ucenter:user:{uid}:follow VALUE: [sortedSet]    1587029692 “{}” (排序 entityType和entityId组成的json，此处的entity不指政策法规，指用户、主题这类)</p></blockquote><h4 id="在线用户"><a href="#在线用户" class="headerlink" title="在线用户"></a>在线用户</h4><blockquote><p>【KEY】: 服务名:行为:表名</p><p>【VALUE】：(list) uid</p><p>如: ass:active:user VALUE: [list]     uid</p></blockquote><h4 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h4><h4 id="延时队列"><a href="#延时队列" class="headerlink" title="延时队列"></a>延时队列</h4><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="Jedis异常总结"><a href="#Jedis异常总结" class="headerlink" title="Jedis异常总结"></a><a href="https://yq.aliyun.com/articles/236384?spm=a2c4e.11153940.0.0.fdaf744aWFvoW0" target="_blank" rel="noopener">Jedis异常总结</a></h3><h3 id="JedisPool资源池优化"><a href="#JedisPool资源池优化" class="headerlink" title="JedisPool资源池优化"></a><a href="https://yq.aliyun.com/articles/236383?spm=a2c4e.11153940.0.0.fdaf744aWFvoW0" target="_blank" rel="noopener">JedisPool资源池优化</a></h3><h3 id="Redis设计与实现"><a href="#Redis设计与实现" class="headerlink" title="Redis设计与实现"></a><a href="https://redisbook.readthedocs.io/en/latest/index.html" target="_blank" rel="noopener">Redis设计与实现</a></h3>]]></content>
      
      
      <categories>
          
          <category> Cache </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis规范 </tag>
            
            <tag> Redis Key </tag>
            
            <tag> Redis Value </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybatis-plus-generator源码分析</title>
      <link href="/2020/06/27/Mybatis-Plus-Generator%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>/2020/06/27/Mybatis-Plus-Generator%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h2><h3 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line">left to right direction</span><br><span class="line"></span><br><span class="line">actor Application as app</span><br><span class="line">note left of app: 外部应用</span><br><span class="line"></span><br><span class="line">rectangle mybatis-plus-generator as mpg &#123;</span><br><span class="line">&#125;</span><br><span class="line">note bottom of mpg: mybatis-plus代码生成工具</span><br><span class="line"></span><br><span class="line">rectangle mybatis-plus-core as mpc &#123;</span><br><span class="line">&#125;</span><br><span class="line">note right of mpc: mybatis-plus核心代码</span><br><span class="line"></span><br><span class="line">rectangle mybatis-plus-annotation as mpa &#123;</span><br><span class="line">&#125;</span><br><span class="line">note right of mpa: mybatis-plus注释封装</span><br><span class="line"></span><br><span class="line">rectangle mybatis-plus-extension as mpe &#123;</span><br><span class="line">&#125;</span><br><span class="line">note right of mpe: mybatis-plus扩展</span><br><span class="line"></span><br><span class="line">app --&gt; mpg</span><br><span class="line">mpg &lt;-- mpc</span><br><span class="line">mpg &lt;-- mpa</span><br><span class="line">mpg &lt;-- mpe</span><br><span class="line"></span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><h3 id="Containers"><a href="#Containers" class="headerlink" title="Containers"></a>Containers</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line"></span><br><span class="line">left to right direction</span><br><span class="line"></span><br><span class="line">actor Application as app</span><br><span class="line">note left of app: 外部应用</span><br><span class="line"></span><br><span class="line">rectangle mybatis-plus-generator &#123;</span><br><span class="line">  rectangle AutoGenerator as ag &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  note top of ag: 自动生成入口</span><br><span class="line"></span><br><span class="line">  rectangle ConfigBuilder as cb &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  note bottom of cb: 构建配置类</span><br><span class="line"></span><br><span class="line">  rectangle GlobalConfig as gc &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  note right of gc: 全局配置</span><br><span class="line"></span><br><span class="line">  rectangle DataSourceConfig as dc &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  note right of dc: 数据源配置</span><br><span class="line"></span><br><span class="line">  rectangle PackageConfig as pc &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  note right of pc: 包配置</span><br><span class="line"></span><br><span class="line">  rectangle TemplateConfig as tc &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  note right of tc: 模板配置</span><br><span class="line"></span><br><span class="line">  rectangle StrategyConfig as sc &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  note right of sc: 策略配置</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app --&gt; ag</span><br><span class="line">ag -- cb</span><br><span class="line">app ..&gt; gc</span><br><span class="line">app ..&gt; dc</span><br><span class="line">app ..&gt; pc</span><br><span class="line">app ..&gt; tc</span><br><span class="line">app ..&gt; sc</span><br><span class="line">cb &lt;-- gc: init GlobalConfig</span><br><span class="line">cb &lt;-- dc: init DataSourceConfig</span><br><span class="line">cb &lt;-- pc: init PackageConfig</span><br><span class="line">cb &lt;-- tc: init TemplateConfig</span><br><span class="line">cb &lt;-- sc: init StrategyConfig</span><br><span class="line"></span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line"></span><br><span class="line">package generator &#123;</span><br><span class="line"></span><br><span class="line">  AutoGenerator *--&gt; ConfigBuilder</span><br><span class="line">  AutoGenerator *--&gt; InjectionConfig</span><br><span class="line">  AutoGenerator *--&gt; DataSourceConfig</span><br><span class="line">  AutoGenerator *--&gt; StrategyConfig</span><br><span class="line">  AutoGenerator *--&gt; PackageConfig</span><br><span class="line">  AutoGenerator *--&gt; TemplateConfig</span><br><span class="line">  AutoGenerator *--&gt; GlobalConfig</span><br><span class="line">  AutoGenerator *--&gt; AbstractTemplateEngine</span><br><span class="line">  AutoGenerator --&gt; TableInfo</span><br><span class="line"></span><br><span class="line">  InjectionConfig *--&gt; ConfigBuilder</span><br><span class="line">  InjectionConfig --&gt; FileOutConfig</span><br><span class="line">  InjectionConfig --&gt; IFileCreate</span><br><span class="line"></span><br><span class="line">  package config &#123;</span><br><span class="line">    interface ConstVal</span><br><span class="line"></span><br><span class="line">    DataSourceConfig *--&gt; IDbQuery</span><br><span class="line">    DataSourceConfig *--&gt; DbType</span><br><span class="line">    DataSourceConfig *--&gt; ITypeConvert</span><br><span class="line">    DataSourceConfig *--&gt; Connection</span><br><span class="line"></span><br><span class="line">    FileOutConfig --&gt; TableInfo</span><br><span class="line"></span><br><span class="line">    GlobalConfig *--&gt; DateType</span><br><span class="line">    GlobalConfig *--&gt; IdType</span><br><span class="line"></span><br><span class="line">    IDbQuery --&gt; DbType</span><br><span class="line">    IDbQuery --&gt; ResultSet</span><br><span class="line"></span><br><span class="line">    IFileCreate --&gt; ConfigBuilder</span><br><span class="line">    IFileCreate --&gt; FileType</span><br><span class="line"></span><br><span class="line">    INameConvert --&gt; TableInfo</span><br><span class="line">    INameConvert --&gt; TableField</span><br><span class="line"></span><br><span class="line">    ITypeConvert --&gt; GlobalConfig</span><br><span class="line">    ITypeConvert --&gt; TableField</span><br><span class="line">    ITypeConvert --&gt; IColumnType</span><br><span class="line"></span><br><span class="line">    Class PackageConfig</span><br><span class="line"></span><br><span class="line">    StrategyConfig *--&gt; INameConvert</span><br><span class="line">    StrategyConfig *--&gt; NamingStrategy</span><br><span class="line">    StrategyConfig *--&gt; TableFill</span><br><span class="line"></span><br><span class="line">    TemplateConfig --&gt; TemplateType</span><br><span class="line">    TemplateConfig --&gt; TemplateConfig</span><br><span class="line"></span><br><span class="line">    package builder &#123;</span><br><span class="line">      ConfigBuilder *--&gt; TemplateConfig</span><br><span class="line">      ConfigBuilder *--&gt;DataSourceConfig</span><br><span class="line">      ConfigBuilder *--&gt; Connection</span><br><span class="line">      ConfigBuilder *--&gt; IDbQuery</span><br><span class="line">      ConfigBuilder *--&gt; TableInfo</span><br><span class="line">      ConfigBuilder *--&gt; StrategyConfig</span><br><span class="line">      ConfigBuilder *--&gt; GlobalConfig</span><br><span class="line">      ConfigBuilder *--&gt; InjectionConfig</span><br><span class="line">      ConfigBuilder *--&gt; PackageConfig</span><br><span class="line">      ConfigBuilder *--&gt; TemplateConfig</span><br><span class="line">      ConfigBuilder *--&gt; TableInfo</span><br><span class="line">      ConfigBuilder *--&gt; NamingStrategy</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    package converts &#123;</span><br><span class="line">      DB2TypeConvert --&gt; GlobalConfig</span><br><span class="line">      ITypeConvert &lt;|-- DB2TypeConvert</span><br><span class="line"></span><br><span class="line">      DmTypeConvert --&gt; GlobalConfig</span><br><span class="line">      DmTypeConvert --&gt; IColumnType</span><br><span class="line">      ITypeConvert &lt;|-- DmTypeConvert</span><br><span class="line"></span><br><span class="line">      MySqlTypeConvert --&gt; GlobalConfig</span><br><span class="line">      MySqlTypeConvert --&gt; IColumnType</span><br><span class="line">      ITypeConvert &lt;|-- MySqlTypeConvert</span><br><span class="line"></span><br><span class="line">      OracleTypeConvert --&gt; GlobalConfig</span><br><span class="line">      OracleTypeConvert --&gt; IColumnType</span><br><span class="line">      ITypeConvert &lt;|-- OracleTypeConvert</span><br><span class="line"></span><br><span class="line">      PostgreSqlTypeConvert --&gt; GlobalConfig</span><br><span class="line">      PostgreSqlTypeConvert --&gt; IColumnType</span><br><span class="line">      ITypeConvert &lt;|-- PostgreSqlTypeConvert</span><br><span class="line"></span><br><span class="line">      SqlServerTypeConvert --&gt;GlobalConfig</span><br><span class="line">      SqlServerTypeConvert --&gt; IColumnType</span><br><span class="line">      ITypeConvert &lt;|-- SqlServerTypeConvert</span><br><span class="line"></span><br><span class="line">      SqliteTypeConvert --&gt; GlobalConfig</span><br><span class="line">      SqliteTypeConvert --&gt; IColumnType</span><br><span class="line">      ITypeConvert &lt;|-- SqliteTypeConvert</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    package po &#123;</span><br><span class="line">      TableField *--&gt; IColumnType</span><br><span class="line">      TableField *--&gt; StrategyConfig</span><br><span class="line"></span><br><span class="line">      class FieldFill</span><br><span class="line"></span><br><span class="line">      TableInfo *--&gt; TableField</span><br><span class="line">      TableInfo *--&gt; StrategyConfig</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    package querys &#123;</span><br><span class="line">      AbstractDbQuery --&gt; ResultSet</span><br><span class="line">      DB2Query --|&gt; AbstractDbQuery</span><br><span class="line">      DMQuery --|&gt; AbstractDbQuery</span><br><span class="line">      H2Query --|&gt; AbstractDbQuery</span><br><span class="line">      MariadbQuery --|&gt; AbstractDbQuery</span><br><span class="line">      MySqlQuery --|&gt; AbstractDbQuery</span><br><span class="line">      OracleQuery --|&gt; AbstractDbQuery</span><br><span class="line">      PostgreSqlQuery --|&gt; AbstractDbQuery</span><br><span class="line">      SqlServerQuery --|&gt; AbstractDbQuery</span><br><span class="line">      SqliteQuery --|&gt; AbstractDbQuery</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    package rules &#123;</span><br><span class="line">      enum DateType</span><br><span class="line">      DbColumnType --|&gt; IColumnType</span><br><span class="line">      enum FileType </span><br><span class="line">      interface IColumnType </span><br><span class="line">      enum NamingStrategy</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  package engine &#123;</span><br><span class="line">    AbstractTemplateEngine *--&gt; ConfigBuilder </span><br><span class="line"></span><br><span class="line">    BeetlTemplateEngine --|&gt; AbstractTemplateEngine</span><br><span class="line">    BeetlTemplateEngine *--&gt; ConfigBuilder</span><br><span class="line"></span><br><span class="line">    FreemarkerTemplateEngine --|&gt; AbstractTemplateEngine</span><br><span class="line">    FreemarkerTemplateEngine *--&gt; ConfigBuilder</span><br><span class="line"></span><br><span class="line">    VelocityTemplateEngine --|&gt; AbstractTemplateEngine</span><br><span class="line">    VelocityTemplateEngine *--&gt; ConfigBuilder</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class AutoGenerator &#123;</span><br><span class="line">  # config:ConfigBuilder</span><br><span class="line">  # injectionConfig:InjectionConfig</span><br><span class="line">  - dataSource:DataSourceConfig</span><br><span class="line">  - strategy:StrategyConfig</span><br><span class="line">  - packageInfo:PackageConfig</span><br><span class="line">  - template:TemplateConfig</span><br><span class="line">  - globalConfig:GlobalConfig </span><br><span class="line">  - templateEngine:AbstractTemplateEngine</span><br><span class="line">  + execute():void</span><br><span class="line">  # getAllTableInfoList(config:ConfigBuilder):List&lt;TableInfo&gt;</span><br><span class="line">  # pretreatmentConfigBuilder(config:ConfigBuilder):ConfigBuilder</span><br><span class="line">  + getCfg():InjectionConfig</span><br><span class="line">  + setCfg(injectionConfig:InjectionConfig):AutoGenerator</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface InjectionConfig &#123;</span><br><span class="line">  - config:ConfigBuilder</span><br><span class="line">  - fileOutConfigList:List&lt;FileOutConfig&gt;</span><br><span class="line">  - fileCreate:IFileCreate</span><br><span class="line">  + initMap():abstract void</span><br><span class="line">  + prepareObjectMap(objectMap:Map&lt;String,Object&gt;):Map&lt;String,Object&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface ConstVal &#123;</span><br><span class="line">  MODULE_NAME:String</span><br><span class="line">  ENTITY:String</span><br><span class="line">  SERVICE:String</span><br><span class="line">  SERVICE_IMPL:String</span><br><span class="line">  MAPPER:String</span><br><span class="line">  XML:String</span><br><span class="line">  CONTROLLER:String</span><br><span class="line">  ENTITY_PATH:String</span><br><span class="line">  SERVICE_PATH:String</span><br><span class="line">  SERVICE_IMPL_PATH:String</span><br><span class="line">  MAPPER_PATH:String</span><br><span class="line">  XML_PATH:String</span><br><span class="line">  CONTROLLER_PATH:String</span><br><span class="line">  JAVA_TMPDIR:String</span><br><span class="line">  UTF8:String</span><br><span class="line">  UNDERLINE:String</span><br><span class="line">  JAVA_SUFFIX:String</span><br><span class="line">  KT_SUFFIX:String</span><br><span class="line">  XML_SUFFIX:String</span><br><span class="line">  TEMPLATE_ENTITY_JAVA:String</span><br><span class="line">  TEMPLATE_ENTITY_KT:String</span><br><span class="line">  TEMPLATE_MAPPER:String</span><br><span class="line">  TEMPLATE_XML:String</span><br><span class="line">  TEMPLATE_SERVICE:String</span><br><span class="line">  TEMPLATE_SERVICE_IMPL:String</span><br><span class="line">  TEMPLATE_CONTROLLER:String</span><br><span class="line">  VM_LOAD_PATH_KEY:String</span><br><span class="line">  VM_LOAD_PATH_VALUE:String</span><br><span class="line">  SUPER_MAPPER_CLASS:String</span><br><span class="line">  SUPER_SERVICE_CLASS:String</span><br><span class="line">  SUPER_SERVICE_IMPL_CLASS:String</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class DataSourceConfig &#123;</span><br><span class="line">  - dbQuery:IDbQuery;</span><br><span class="line">  - dbType:DbType;</span><br><span class="line">  - schemaName:String;</span><br><span class="line">  - typeConvert:ITypeConvert;</span><br><span class="line">  - url:String;</span><br><span class="line">  - driverName:String</span><br><span class="line">  - username:String</span><br><span class="line">  - password:String</span><br><span class="line">  + getDbQuery():IDbQuery</span><br><span class="line">  + getDbType():DbType</span><br><span class="line">  - getDbType(str:String):DbType</span><br><span class="line">  + getTypeConvert():ITypeConvert</span><br><span class="line">  + getConn():Connection</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">abstract class FileOutConfig &#123;</span><br><span class="line">  - templatePath:String</span><br><span class="line">  + FileOutConfig()</span><br><span class="line">  + FileOutConfig(templatePath:String)</span><br><span class="line">  + outputFile(tableInfo:TableInfo):abstract String</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class GlobalConfig &#123;</span><br><span class="line">  - outputDir:String</span><br><span class="line">  - fileOverride:boolean</span><br><span class="line">  - open:boolean</span><br><span class="line">  - enableCache:boolean</span><br><span class="line">  - author:String</span><br><span class="line">  - kotlin:booealn</span><br><span class="line">  - swagger2:boolean</span><br><span class="line">  - activeRecord:boolean</span><br><span class="line">  - baseResultMap:boolean</span><br><span class="line">  - dateType:DateType</span><br><span class="line">  - baseColumnList:boolean</span><br><span class="line">  - entityName:String</span><br><span class="line">  - mapperName:String</span><br><span class="line">  - xmlName:String</span><br><span class="line">  - serviceName:String</span><br><span class="line">  - serviceImplName:String</span><br><span class="line">  - controllerName:String</span><br><span class="line">  - idType:IdType</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface IDbQuery &#123;</span><br><span class="line">  dbType():DbType</span><br><span class="line">  tablesSql():String</span><br><span class="line">  tableFieldsSql():String</span><br><span class="line">  tableName():String</span><br><span class="line">  tableComment():String</span><br><span class="line">  fieldName():String</span><br><span class="line">  fieldType():String</span><br><span class="line">  fieldComment():String</span><br><span class="line">  fieldKey():String</span><br><span class="line">  isKeyIdentity(results:ResultSet) throws SQLException:boolean</span><br><span class="line">  fieldCustom():String[]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface IFileCreate &#123;</span><br><span class="line">  isCreate(configBuilder:ConfigBuilder, fileType:FileType, filePath:String):boolean</span><br><span class="line">  checkDir(filePath:String):void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface INameConvert  &#123;</span><br><span class="line">  entityNameConvert(tableInfo:TableInfo):String</span><br><span class="line">  propertyNameConvert(field:TableField):void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface ITypeConvert &#123;</span><br><span class="line">  processTypeConvert(globalConfig:GlobalConfig, tableField:TableField):IColumnType</span><br><span class="line">  processTypeConvert(globalConfig:GlobalConfig, fieldType:String):IColumnType</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class PackageConfig &#123;</span><br><span class="line">  - parent:String</span><br><span class="line">  - moduleName:String</span><br><span class="line">  - entity:String</span><br><span class="line">  - service:String</span><br><span class="line">  - serviceImpl:String</span><br><span class="line">  - mapper:String</span><br><span class="line">  - xml:String</span><br><span class="line">  - controller:String</span><br><span class="line">  - pathInfo:Map&lt;String, String&gt;</span><br><span class="line">  + getParent():String</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class StrategyConfig &#123;</span><br><span class="line">  - isCapitalMode:boolean</span><br><span class="line">  - skipView:boolean</span><br><span class="line">  - nameConvert:INameConvert</span><br><span class="line">  - naming:NamingStrategy</span><br><span class="line">  - columnNaming:NamingStrategy</span><br><span class="line">  - tablePrefix:String[]</span><br><span class="line">  - fieldPrefix:String[]</span><br><span class="line">  - superEntityClass:String</span><br><span class="line">  - superEntityColumns:String[]</span><br><span class="line">  - superMapperClass:String</span><br><span class="line">  - superServiceClass:String</span><br><span class="line">  - superServiceImplClass:String</span><br><span class="line">  - superControllerClass:String</span><br><span class="line">  - include:String[]</span><br><span class="line">  - exclude:String[]</span><br><span class="line">  - entitySerialVersionUID:boolean</span><br><span class="line">  - entityColumnConstant:boolean</span><br><span class="line">  - entityBuilderModel:boolean</span><br><span class="line">  - entityLombokModel:boolean</span><br><span class="line">  - entityBooleanColumnRemoveIsPrefix:boolean</span><br><span class="line">  - restControllerStyle:boolean</span><br><span class="line">  - controllerMappingHyphenStyle:boolean</span><br><span class="line">  - entityTableFieldAnnotationEnable:boolean</span><br><span class="line">  - versionFieldName:String</span><br><span class="line">  - logicDeleteFieldName:String</span><br><span class="line">  - tableFillList:List&lt;TableFill&gt;</span><br><span class="line">  + isCapitalModeNaming(word:String):boolean</span><br><span class="line">  + containsTablePrefix(tableName:String):boolean</span><br><span class="line">  + getColumnNaming():NamingStrategy</span><br><span class="line">  + setTablePrefix():StrategyConfig </span><br><span class="line">  + includeSuperEntityColumns(fieldName:String):boolean</span><br><span class="line">  + setSuperEntityColumns(superEntityColumns:String...):StrategyConfig</span><br><span class="line">  + setInclude(include:String...):StrategyConfig </span><br><span class="line">  + setExclude(exclude:String...):StrategyConfig</span><br><span class="line">  + setFieldPrefix(fieldPrefixs:String...):StrategyConfig</span><br><span class="line">  + setSuperEntityClass(superEntityClass:String):StrategyConfig </span><br><span class="line">  + setSuperEntityClass(clazz:Class&lt;?&gt;):StrategyConfig</span><br><span class="line">  + setSuperEntityClass(clazz:Class&lt;?&gt;, columnNaming:NamingStrategy):StrategyConfig</span><br><span class="line">  # convertSuperEntityColumns(clazz:Class&lt;?&gt;):void</span><br><span class="line">  + entityTableFieldAnnotationEnable(isEnableAnnotation:boolean):StrategyConfig</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">class ConfigBuilder &#123;</span><br><span class="line">  - template:final TemplateConfig</span><br><span class="line">  - dataSourceConfig:final DataSourceConfig</span><br><span class="line">  - connection:Connection</span><br><span class="line">  - dbQuery:IDbQuery</span><br><span class="line">  - superEntityClass:String</span><br><span class="line">  - superMapperClass:String</span><br><span class="line">  - superServiceClass:String</span><br><span class="line">  - superServiceImplClass:String</span><br><span class="line">  - superServiceImplClass:String</span><br><span class="line">  - tableInfoList:List&lt;TableInfo&gt;</span><br><span class="line">  - packageInfo:Map&lt;String, String&gt;</span><br><span class="line">  - pathInfo:Map&lt;String, String&gt;</span><br><span class="line">  - strategyConfig:StrategyConfig</span><br><span class="line">  - globalConfig:GlobalConfig</span><br><span class="line">  - injectionConfig:InjectionConfig</span><br><span class="line">  - commentSupported:boolean</span><br><span class="line">  + ConfigBuilder(packageConfig:PackageConfig, dataSourceConfig:DataSourceConfig, strategyConfig:StrategyConfig, template:TemplateConfig, globalConfig:GlobalConfig)</span><br><span class="line">  + getPackageInfo():Map&lt;String, String&gt;</span><br><span class="line">  + getPathInfo():Map&lt;String, String&gt;</span><br><span class="line">  + getSuperEntityClass():String</span><br><span class="line">  + getSuperMapperClass():String</span><br><span class="line">  + getSuperServiceClass():String</span><br><span class="line">  + getSuperServiceImplClass():String</span><br><span class="line">  + getSuperControllerClass():String</span><br><span class="line">  + getTableInfoList():List&lt;TableInfo&gt;</span><br><span class="line">  + setTableInfoList(tableInfoList:List&lt;TableInfo&gt;):ConfigBuilder</span><br><span class="line">  + getTemplate():TemplateConfig</span><br><span class="line">  - handlerPackage(template:TemplateConfig, outputDir:String, config:PackageConfig):void</span><br><span class="line">  - setPathInfo(pathInfo:Map&lt;String,String&gt;, template:String, template:String, path:String, module:String):void</span><br><span class="line">  - handlerDataSource(config:DataSourceConfig):void</span><br><span class="line">  - handlerStrategy(config:StrategyConfig):void</span><br><span class="line">  - processTypes(config:StrategyConfig):void</span><br><span class="line">  - processTable(tableList:List&lt;TableInfo&gt;, strategy:NamingStrategy, config:StrategyConfig):List&lt;TableInfo&gt;</span><br><span class="line">  - checkImportPackages(tableInfo:TableInfo):void</span><br><span class="line">  - getTablesInfo(config:StrategyConfig):List&lt;TableInfo&gt;</span><br><span class="line">  - tableNameMatches(setTableName:String, dbTableName:String):boolean</span><br><span class="line">  - convertTableFields(tableInfo:TableInfo, config:StrategyConfig):TableInfo</span><br><span class="line">  - joinPath(parentDir:String, packageName:String):String</span><br><span class="line">  - joinPackage(parent:String, subPackage:String):String</span><br><span class="line">  - processName(name:String, strategy:NamingStrategy):String</span><br><span class="line">  - processName(name:String, strategy:NamingStrategy, prefix:String[]):String</span><br><span class="line">  + getStrategyConfig():StrategyConfig</span><br><span class="line">  + setStrategyConfig(strategyConfig:StrategyConfig):ConfigBuilder</span><br><span class="line">  + getGlobalConfig():GlobalConfig</span><br><span class="line">  + setGlobalConfig(globalConfig:GlobalConfig):ConfigBuilder</span><br><span class="line">  + getInjectionConfig():InjectionConfig</span><br><span class="line">  + setInjectionConfig(injectionConfig:InjectionConfig):ConfigBuilder</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class DB2TypeConvert &#123;</span><br><span class="line">  + processTypeConvert(globalConfig:GlobalConfig, fieldType:String):GlobalConfig</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class DmTypeConvert &#123;</span><br><span class="line">  + processTypeConvert(globalConfig:GlobalConfig, fieldType:String):IColumnType</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class MySqlTypeConvert &#123;</span><br><span class="line">  + processTypeConvert(globalConfig:GlobalConfig, fieldType:String):IColumnType</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class OracleTypeConvert &#123;</span><br><span class="line">  + processTypeConvert(globalConfig:ClobalConfig, fieldType:String):IColumnType</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class PostgreSqlTypeConvert &#123;</span><br><span class="line">  + processTypeConvert(globalConfig:GlobalConfig, fieldType:String):IColumnType</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class SqlServerTypeConvert &#123;</span><br><span class="line">  + processTypeConvert(globalConfig:GlobalConfig, fieldType:String):IColumnType</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class SqliteTypeConvert &#123;</span><br><span class="line">  + processTypeConvert(globalConfig:GlobalConfig, fieldType:String):IColumnType</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class TableField &#123;</span><br><span class="line">  - keyIdentityFlag:boolean</span><br><span class="line">  - name:String</span><br><span class="line">  - type:String</span><br><span class="line">  - propertyName:String</span><br><span class="line">  - columnType:IColumnType</span><br><span class="line">  - comment:String</span><br><span class="line">  - fill:String</span><br><span class="line">  - customMap:Map&lt;String, Object&gt;</span><br><span class="line">  + setConvert(boolean convert):TableField</span><br><span class="line">  # setConvert(strategyConfig:StrategyConfig):TableField</span><br><span class="line">  + setProperty(strategyConfig:StrategyConfig, propertyName:String):TableField</span><br><span class="line">  + getPropertyType():String</span><br><span class="line">  + getCapitalName():String</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class TableFill &#123;</span><br><span class="line">  - fieldName:String</span><br><span class="line">  - fieldFill:String</span><br><span class="line">  + TableFill(fieldName:String, ignore:FieldFill)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class TableInfo &#123;</span><br><span class="line">  - importPackages:final Set&lt;String&gt;</span><br><span class="line">  - convert:boolean</span><br><span class="line">  - name:String</span><br><span class="line">  - comment:String</span><br><span class="line">  - entityName:String</span><br><span class="line">  - mapperName:String</span><br><span class="line">  - xmlName:String</span><br><span class="line">  - serviceName:String</span><br><span class="line">  - serviceImplName:String</span><br><span class="line">  - controllerName:String</span><br><span class="line">  - fields:List&lt;TableField&gt;</span><br><span class="line">  - commonFields:List&lt;TableField&gt;</span><br><span class="line">  - fieldName:String</span><br><span class="line">  + setConvert(convert:boolean):TableInfo</span><br><span class="line">  # setConvert(strategyConfig:StrategyConfig):TableInfo</span><br><span class="line">  + getEntityPath(): String</span><br><span class="line">  + setEntityName(strategyConfig:StrategyConfig, entityName:String):TableInfo</span><br><span class="line">  + setFields(fields:List&lt;TableField&gt;):TableIInfo</span><br><span class="line">  + setImportPackages(pkg:String):TableInfo</span><br><span class="line">  + getFieldNames():String</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class AbstractDbQuery &#123;</span><br><span class="line">  + isKeyIdentity(results:ResultSet)throws SQLException:boolean</span><br><span class="line">  + fieldCustom():String[]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class DB2Query &#123;</span><br><span class="line">  + dbType(): DbType</span><br><span class="line">  + tableSql():String</span><br><span class="line">  + tableFieldsSql():String</span><br><span class="line">  + tableName():String</span><br><span class="line">  + tableComment():String</span><br><span class="line">  + fieldName():String</span><br><span class="line">  + fieldType():String</span><br><span class="line">  + fieldComment():String</span><br><span class="line">  + fieldKey():String</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class DMQuery &#123;</span><br><span class="line">  + dbType():DbType</span><br><span class="line">  + tablesSql():Striing</span><br><span class="line">  + tableFiieldsSql():String</span><br><span class="line">  + tableName():String</span><br><span class="line">  + tableComment():String</span><br><span class="line">  + fieldName():String</span><br><span class="line">  + fieldType():String</span><br><span class="line">  + fieldComment():String</span><br><span class="line">  + fieldKey():String</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class H2Query &#123;</span><br><span class="line">  + dbType():DbType</span><br><span class="line">  + tablesSql():String</span><br><span class="line">  + tableFieldsSql():String</span><br><span class="line">  + tableName():String</span><br><span class="line">  + tableComment():String</span><br><span class="line">  + fieldName():String</span><br><span class="line">  + fieldType():String</span><br><span class="line">  + fieldComment():String</span><br><span class="line">  + fieldKey():String</span><br><span class="line">  + iskeyIdentity(results:ResultSet)throws SQLException:boolean</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class MariadbQuery &#123;</span><br><span class="line">  + dbType():DbType</span><br><span class="line">  + tablesSql():String</span><br><span class="line">  + tableFieldsSql():String</span><br><span class="line">  + tableName():String</span><br><span class="line">  + tableComment():String</span><br><span class="line">  + fieldName():String</span><br><span class="line">  + fieldType():String</span><br><span class="line">  + fieldComment():Striing</span><br><span class="line">  + fieldKey():String</span><br><span class="line">  + isKeyIdentity()throws SQLException:boolean</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class MySqlQuery &#123;</span><br><span class="line">  + dbType():DbType</span><br><span class="line">  + tablesSql():String</span><br><span class="line">  + tableFieldsSql():String</span><br><span class="line">  + tableName():String</span><br><span class="line">  + tableComment():String</span><br><span class="line">  + fieldName():String</span><br><span class="line">  + fieldType():String</span><br><span class="line">  + fieldComment():Striing</span><br><span class="line">  + fieldKey():String</span><br><span class="line">  + isKeyIdentity()throws SQLException:boolean</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class OracleQuery &#123;</span><br><span class="line">  + dbType():DbType</span><br><span class="line">  + tablesSql():String</span><br><span class="line">  + tableFieldsSql():String</span><br><span class="line">  + tableName():String</span><br><span class="line">  + tableComment():String</span><br><span class="line">  + fieldName():String</span><br><span class="line">  + fieldType():String</span><br><span class="line">  + fieldComment():Striing</span><br><span class="line">  + fieldKey():String</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class PostgreSqlQuery &#123;</span><br><span class="line">  + dbType():DbType</span><br><span class="line">  + tablesSql():String</span><br><span class="line">  + tableFieldsSql():String</span><br><span class="line">  + tableName():String</span><br><span class="line">  + tableComment():String</span><br><span class="line">  + fieldName():String</span><br><span class="line">  + fieldType():String</span><br><span class="line">  + fieldComment():Striing</span><br><span class="line">  + fieldKey():String</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class SqlServerQuery &#123;</span><br><span class="line">  + dbType():DbType</span><br><span class="line">  + tablesSql():String</span><br><span class="line">  + tableFieldsSql():String</span><br><span class="line">  + tableName():String</span><br><span class="line">  + tableComment():String</span><br><span class="line">  + fieldName():String</span><br><span class="line">  + fieldType():String</span><br><span class="line">  + fieldComment():Striing</span><br><span class="line">  + fieldKey():String</span><br><span class="line">  + isKeyIdentity()throws SQLException:boolean</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class SqliteQuery &#123;</span><br><span class="line">  + dbType():DbType</span><br><span class="line">  + tablesSql():String</span><br><span class="line">  + tableFieldsSql():String</span><br><span class="line">  + tableName():String</span><br><span class="line">  + tableComment():String</span><br><span class="line">  + fieldName():String</span><br><span class="line">  + fieldType():String</span><br><span class="line">  + fieldComment():Striing</span><br><span class="line">  + fieldKey():String</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">enum DateType &#123;</span><br><span class="line">  ONLY_DATE</span><br><span class="line">  SQL_PACK</span><br><span class="line">  TIME_PACK</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">enum DbColumnType &#123;</span><br><span class="line">  BASE_BYTE</span><br><span class="line">  BASE_SHORT</span><br><span class="line">  BASE_CHAR</span><br><span class="line">  BASE_INT</span><br><span class="line">  BASE_LONG</span><br><span class="line">  BASE_FLOAT</span><br><span class="line">  BASE_DOUBLE</span><br><span class="line">  BASE_BOOLEAN</span><br><span class="line">  BYTE</span><br><span class="line">  SHORT</span><br><span class="line">  CHARACTER</span><br><span class="line">  INTEGER</span><br><span class="line">  LONG</span><br><span class="line">  FLOAT</span><br><span class="line">  DOUBLE</span><br><span class="line">  BOOLEAN</span><br><span class="line">  STRING</span><br><span class="line">  DATA_SQL</span><br><span class="line">  TIME</span><br><span class="line">  TIMESTAMP</span><br><span class="line">  BLOB</span><br><span class="line">  CLOB</span><br><span class="line">  LOCAL_DATE</span><br><span class="line">  LOCAL_TIME</span><br><span class="line">  YEAR</span><br><span class="line">  YEAR_MONTH</span><br><span class="line">  LOCAL_DATE_TIME</span><br><span class="line">  INSTANT</span><br><span class="line">  BYTE_ARRAY</span><br><span class="line">  OBJECT</span><br><span class="line">  DATE</span><br><span class="line">  BIG_INTEGER</span><br><span class="line">  BIG_DECIMAL</span><br><span class="line">  - type:final String</span><br><span class="line">  - pkg:final String</span><br><span class="line">  DbColumnType(type:finalString, pkg:final String)</span><br><span class="line">  + getType():String</span><br><span class="line">  + getPkg():String</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">enum FileType &#123;</span><br><span class="line">  ENTITY</span><br><span class="line">  MAPPER</span><br><span class="line">  XML</span><br><span class="line">  SERVICE</span><br><span class="line">  SERVICE_IMPL</span><br><span class="line">  CONTROLLER</span><br><span class="line">  OTHER</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface IColumnType &#123;</span><br><span class="line">  getType():Striing</span><br><span class="line">  getPkg():Striing</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">enum NamingStrategy &#123;</span><br><span class="line">  + underlineToCamel(name:String):static String</span><br><span class="line">  + removePrefix(name:String, prefix:String...):static String</span><br><span class="line">  + isPrefixContained(name:String, prefix:String...):static boolean</span><br><span class="line">  + removePrefixAndCamel(name:String, tablePrefix:String[]):static String</span><br><span class="line">  + capitalFirst(name:String):static String</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class TemplateConfig &#123;</span><br><span class="line">  - entity:String</span><br><span class="line">  - entityKt:String</span><br><span class="line">  - service:String</span><br><span class="line">  - serviceImpl:String</span><br><span class="line">  - mapper:String</span><br><span class="line">  - xml:String</span><br><span class="line">  - controller:String</span><br><span class="line">  + getEntity(kotlin:boolean):String</span><br><span class="line">  + disable(templateTypes:TemplateType...):TemplateConfig</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><h2 id="ConfigBuilder类"><a href="#ConfigBuilder类" class="headerlink" title="ConfigBuilder类"></a>ConfigBuilder类</h2><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><h4 id="TableField类"><a href="#TableField类" class="headerlink" title="TableField类"></a>TableField类</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line">class TableField &#123;</span><br><span class="line">  - keyIdentityFlag:boolean</span><br><span class="line">  - name:String</span><br><span class="line">  - type:String</span><br><span class="line">  - propertyName:String</span><br><span class="line">  - columnType:IColumnType</span><br><span class="line">  - comment:String</span><br><span class="line">  - fill:String</span><br><span class="line">  - customMap:Map&lt;String, Object&gt;</span><br><span class="line">  + setConvert(boolean convert):TableField</span><br><span class="line">  # setConvert(strategyConfig:StrategyConfig):TableField</span><br><span class="line">  + setProperty(strategyConfig:StrategyConfig, propertyName:String):TableField</span><br><span class="line">  + getPropertyType():String</span><br><span class="line">  + getCapitalName():String</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface IColumnType &#123;</span><br><span class="line">  getType():Striing</span><br><span class="line">  getPkg():Striing</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TableField ..&gt; IColumnType</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><blockquote><p>该类封装了DB表字段的信息：</p><ul><li>keyIdentityFlag:boolean： 主键是否为自增类型</li><li>name：字段名</li><li>columnType：字段类型</li><li>customMap：自定义查询字段列表</li></ul></blockquote><h4 id="TableInfo类"><a href="#TableInfo类" class="headerlink" title="TableInfo类"></a>TableInfo类</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line">class TableInfo &#123;</span><br><span class="line">  - importPackages:final Set&lt;String&gt;</span><br><span class="line">  - convert:boolean</span><br><span class="line">  - name:String</span><br><span class="line">  - comment:String</span><br><span class="line">  - entityName:String</span><br><span class="line">  - mapperName:String</span><br><span class="line">  - xmlName:String</span><br><span class="line">  - serviceName:String</span><br><span class="line">  - serviceImplName:String</span><br><span class="line">  - controllerName:String</span><br><span class="line">  - fields:List&lt;TableField&gt;</span><br><span class="line">  - commonFields:List&lt;TableField&gt;</span><br><span class="line">  - fieldName:String</span><br><span class="line">  + setConvert(convert:boolean):TableInfo</span><br><span class="line">  # setConvert(strategyConfig:StrategyConfig):TableInfo</span><br><span class="line">  + getEntityPath(): String</span><br><span class="line">  + setEntityName(strategyConfig:StrategyConfig, entityName:String):TableInfo</span><br><span class="line">  + setFields(fields:List&lt;TableField&gt;):TableIInfo</span><br><span class="line">  + setImportPackages(pkg:String):TableInfo</span><br><span class="line">  + getFieldNames():String</span><br><span class="line">&#125;</span><br><span class="line">class TableField &#123;</span><br><span class="line">&#125;</span><br><span class="line">TableInfo ..&gt; TableField</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><blockquote><p>该类是表信息对应的JaveBean，用来封装DB表对应生成的Controller/Service等的名称，和TableField对应</p><ul><li>importPackages：使用时候应该导入表</li><li>entityName：生成的实体的名称</li><li>mapperName：生成的Mapper类的名称</li><li>xmlName：生成的XML的名称</li><li>serviceName/serviceImplName：生成的service相关的名称</li><li>controllerName：生成的控制器的名称</li></ul></blockquote><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line">class ConfigBuilder &#123;</span><br><span class="line">  - template: TemplateConfig</span><br><span class="line">  - dataSourceConfig: DataSourceConfig</span><br><span class="line">  - connection: Connection</span><br><span class="line">  - dbQuery: IDbQuery</span><br><span class="line">  - superEntityClass: String</span><br><span class="line">  - superMapperClass: String</span><br><span class="line">  - superServiceClass: String</span><br><span class="line">  - superServiceImplClass: String</span><br><span class="line">  - superControllerClass: String</span><br><span class="line">  - superParamClass: String</span><br><span class="line">  - superPatterClass: String</span><br><span class="line">  - tableInfoList: List&lt;TableInfo&gt;</span><br><span class="line">  - packageInfo: Map</span><br><span class="line">  - pathInfo: Map</span><br><span class="line">  - strategyConfig: StrategyConfig</span><br><span class="line">  - globalConfig: GlobalConfig</span><br><span class="line">  - commentSupported: boolean</span><br><span class="line">  + ConfigBuilder(packageConfig, dataSourceConfig, strategyConfig, template, globalConfig)</span><br><span class="line">  - handlerPackage(templateConfig, outputDir, packageConfig)</span><br><span class="line">  - handlerDataSource(dataSourceConfig)</span><br><span class="line">  - handlerStrategy(strategyConfig)</span><br><span class="line">  - processTypes(strategyConfig)</span><br><span class="line">  - getTablesInfo(strategyConfig): List&lt;TableInfo&gt;</span><br><span class="line">  - processTable(tableList, namingStrategy, strategyConfig): List&lt;TableInfo&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ConfigBuilder ..&gt; TemplateConfig</span><br><span class="line">ConfigBuilder ..&gt; DataSourceConfig</span><br><span class="line">ConfigBuilder ..&gt; TableInfo</span><br><span class="line">ConfigBuilder ..&gt; StrategyConfig</span><br><span class="line">ConfigBuilder ..&gt; GlobalConfig</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><blockquote><p>方法说明：</p><ul><li>handlerPackage：该方法通过TemplateConfig类，设置entity/xml/service/controller等包的名称，再根据这些包名，设置各自的路径信息</li><li>handlerDataSource：该方法根据DB驱动设置DB的数据源，并且根据DB的种类，设置DB的查询语句(dbQuery)</li><li>handlerStrategy：该方法调用 processTypes 和 getTablesInfo方法，分类设置entity/mapper/service/controller等的超类，并且根据dbQuery填充TableInfo类</li><li>processTypes： 设置超类</li><li>getTablesInfo：通过dbQuery和jdbc组装SQL查询表信息，然后通过 processTable 将结果集和TableInfo对应</li><li>processTable： 把从DB中查询出的表/字段信息对应到TableInfo中</li></ul><p>在用ConfigBuilder的具有四个形参的构造方法实例化该类时，会在内部依次调用上面的6个方法。该构造方法在AutoGenerator的execute方法里调用。具体实时调用情况如下面时序图</p></blockquote><h2 id="AutoGenerator类"><a href="#AutoGenerator类" class="headerlink" title="AutoGenerator类"></a>AutoGenerator类</h2><h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line">class AutoGenerator &#123;</span><br><span class="line">  # config:ConfigBuilder</span><br><span class="line">  # injectionConfig:InjectionConfig</span><br><span class="line">  - dataSource:DataSourceConfig</span><br><span class="line">  - strategy:StrategyConfig</span><br><span class="line">  - packageInfo:PackageConfig</span><br><span class="line">  - template:TemplateConfig</span><br><span class="line">  - globalConfig:GlobalConfig </span><br><span class="line">  - templateEngine:AbstractTemplateEngine</span><br><span class="line">  + execute():void</span><br><span class="line">  # getAllTableInfoList(config:ConfigBuilder):List&lt;TableInfo&gt;</span><br><span class="line">  # pretreatmentConfigBuilder(config:ConfigBuilder):ConfigBuilder</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">abstract class AbstractTemplateEngine &#123;</span><br><span class="line">  - configBuilder: ConfigBuilder</span><br><span class="line">  + init(configBuilder): AbstractTemplateEngine</span><br><span class="line">  + batchOutput(): AbstractTemplateEngine</span><br><span class="line">  + writer()</span><br><span class="line">  + mkdirs()</span><br><span class="line">  + open()</span><br><span class="line">  + getObjectMap(tableInfo)</span><br><span class="line">  + isCreate(fileType, filePath)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class FreemarkerTemplateEngine &#123;</span><br><span class="line">  - configuration: Configuration</span><br><span class="line">  + init(configBuilder): FreemarkerTemplateEngine</span><br><span class="line">  + writer()</span><br><span class="line">&#125;</span><br><span class="line">AutoGenerator --&gt; AbstractTemplateEngine</span><br><span class="line">AbstractTemplateEngine &lt;|-- FreemarkerTemplateEngine</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><blockquote><p>AbstractTemplateEngine方法说明：</p><ul><li>init：初始化模板引擎</li><li>mkdirs：创建目录</li><li>batchOutput：判断是否生成entity/mapper/service/controller目录，如已经生成则调用 FreemarkerTemplateEngine 类的 write 方法使用模板引擎生成代码文件</li><li>open：打开文件输出目录</li></ul><p>AutoGenerator类的execute方法为该类的入口函数，外部的Application调用该方法。</p><p>execute：该方法中，初始化ConfigBuilder配置类，并调用模板引擎类生成代码</p></blockquote><h3 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line">actor Application</span><br><span class="line"></span><br><span class="line">Application -&gt; AutoGenerator ++: execute</span><br><span class="line"></span><br><span class="line">AutoGenerator -&gt; ConfigBuilder ++: ConfigBuilder</span><br><span class="line"></span><br><span class="line">ConfigBuilder -&gt; AbstractTemplateEngine ++: init</span><br><span class="line"></span><br><span class="line">AbstractTemplateEngine -&gt; AbstractTemplateEngine ++: mkdir</span><br><span class="line"></span><br><span class="line">AbstractTemplateEngine -&gt; AbstractTemplateEngine ++: batch</span><br><span class="line"></span><br><span class="line">AbstractTemplateEngine -&gt; FreemarkerTemplateEngine ++: writer</span><br><span class="line"></span><br><span class="line">FreemarkerTemplateEngine -&gt; Template ++: process</span><br><span class="line"></span><br><span class="line">return processDone</span><br><span class="line"></span><br><span class="line">return write success</span><br><span class="line"></span><br><span class="line">return batch done</span><br><span class="line"></span><br><span class="line">return mkdir success</span><br><span class="line"></span><br><span class="line">return init done</span><br><span class="line"></span><br><span class="line">return done</span><br><span class="line"></span><br><span class="line">return success</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 源码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis-plus-generator </tag>
            
            <tag> mybatis-plus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins自动化部署</title>
      <link href="/2020/06/25/Jenkins%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/"/>
      <url>/2020/06/25/Jenkins%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="Docker环境部署"><a href="#Docker环境部署" class="headerlink" title="Docker环境部署"></a>Docker环境部署</h2><blockquote><p><a href="https://github.com/tg10020617/autodeploy" target="_blank" rel="noopener">Jenkins &amp; Nexus容器</a></p></blockquote><h3 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"2"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">        <span class="attr">jenkins:</span></span><br><span class="line">                <span class="attr">build:</span> <span class="string">./jenkins/jenkins</span></span><br><span class="line">                <span class="comment">#image: jenkins</span></span><br><span class="line">                <span class="comment">#restart: unless-stopped</span></span><br><span class="line">                <span class="attr">ports:</span></span><br><span class="line">                        <span class="bullet">-</span> <span class="string">"8080:8080"</span></span><br><span class="line">                <span class="attr">volumes:</span></span><br><span class="line">                        <span class="bullet">-</span> <span class="string">"./data/jenkins/jenkins:/var/jenkins_home"</span></span><br><span class="line">                        <span class="bullet">-</span> <span class="string">"./data/jenkins/apache-maven:/usr/local/apache-maven"</span></span><br><span class="line">                <span class="attr">container_name:</span> <span class="string">cservice-jenkins-1</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">nexus3:</span></span><br><span class="line">                <span class="comment">#build: ./nexus/nexus3</span></span><br><span class="line">                <span class="attr">image:</span> <span class="string">sonatype/nexus3</span></span><br><span class="line">                <span class="comment">#restart: unless-stopped</span></span><br><span class="line">                <span class="attr">volumes:</span></span><br><span class="line">                        <span class="bullet">-</span> <span class="string">"./data/nexus/nexus3:/nexus-data"</span></span><br><span class="line">                <span class="attr">ports:</span></span><br><span class="line">                        <span class="bullet">-</span> <span class="string">"8081:8081"</span></span><br><span class="line">                <span class="attr">container_name:</span> <span class="string">cservice-nexus3-1</span></span><br></pre></td></tr></table></figure><blockquote><p>/nexus-data : nexus私服仓库位置</p><p>/usr/local/apache-maven : jenkins容器中的maven安装目录，自动化部署时在jenkins容器中执行mvn install</p><p>/var/jenkins_home : jenkins根目录，/var/jenkins_home/workspace目录放各微服务</p></blockquote><h3 id="容器启动"><a href="#容器启动" class="headerlink" title="容器启动"></a>容器启动</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/autodeploy</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><h2 id="Nexus私服配置"><a href="#Nexus私服配置" class="headerlink" title="Nexus私服配置"></a>Nexus私服配置</h2><h3 id="帐号配置"><a href="#帐号配置" class="headerlink" title="帐号配置"></a>帐号配置</h3><h4 id="查看初始admin用户密码"><a href="#查看初始admin用户密码" class="headerlink" title="查看初始admin用户密码"></a>查看初始admin用户密码</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it cservice-nexus3-1 /bin/bash</span><br><span class="line">cat /nexus-data/admin.password</span><br><span class="line">bash-4.4$ 02e49f43-9e45-4ab2-ac04-27200dbb69e2</span><br></pre></td></tr></table></figure><h4 id="登录admin帐号重置密码"><a href="#登录admin帐号重置密码" class="headerlink" title="登录admin帐号重置密码"></a>登录admin帐号重置密码</h4><blockquote><p>访问Nexus：<a href="http://127.0.0.1:8081/" target="_blank" rel="noopener">http://127.0.0.1:8081/</a></p><p>登录admin账户 &amp; 重置密码</p></blockquote><p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593075345/image-20200625125610062_jb1rtg.png" alt="image-20200625125610062"></p><h3 id="私服配置"><a href="#私服配置" class="headerlink" title="私服配置"></a>私服配置</h3><h4 id="配置Blob-可不配"><a href="#配置Blob-可不配" class="headerlink" title="配置Blob(可不配)"></a>配置Blob(可不配)</h4><p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593075344/image-20200625134005364_glcsr9.png" alt="image-20200625134005364"></p><h4 id="配置仓库"><a href="#配置仓库" class="headerlink" title="配置仓库"></a>配置仓库</h4><h5 id="aliyun-proxy"><a href="#aliyun-proxy" class="headerlink" title="aliyun-proxy"></a>aliyun-proxy</h5><p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593075346/image-20200625131724463_pb2oap.png" alt="image-20200625131724463"></p><h5 id="test-releases"><a href="#test-releases" class="headerlink" title="test-releases"></a>test-releases</h5><p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593075344/image-20200625132015890_bpcunw.png" alt="image-20200625132015890"></p><h5 id="test-snapshots"><a href="#test-snapshots" class="headerlink" title="test-snapshots"></a>test-snapshots</h5><p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593075343/image-20200625133223900_t0fekc.png" alt="image-20200625133223900"></p><h5 id="test-public"><a href="#test-public" class="headerlink" title="test-public"></a>test-public</h5><p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593075346/image-20200625133428642_r64rnf.png" alt="img"></p><h3 id="Maven本地配置"><a href="#Maven本地配置" class="headerlink" title="Maven本地配置"></a>Maven本地配置</h3><h4 id="apache-maven-3-5-3安装"><a href="#apache-maven-3-5-3安装" class="headerlink" title="apache-maven-3.5.3安装"></a>apache-maven-3.5.3安装</h4><blockquote><p>略</p></blockquote><h4 id="配置settings-xml"><a href="#配置settings-xml" class="headerlink" title="配置settings.xml"></a>配置settings.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">Licensed to the Apache Software Foundation (ASF) under one</span></span><br><span class="line"><span class="comment">or more contributor license agreements.  See the NOTICE file</span></span><br><span class="line"><span class="comment">distributed with this work for additional information</span></span><br><span class="line"><span class="comment">regarding copyright ownership.  The ASF licenses this file</span></span><br><span class="line"><span class="comment">to you under the Apache License, Version 2.0 (the</span></span><br><span class="line"><span class="comment">"License"); you may not use this file except in compliance</span></span><br><span class="line"><span class="comment">with the License.  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Unless required by applicable law or agreed to in writing,</span></span><br><span class="line"><span class="comment">software distributed under the License is distributed on an</span></span><br><span class="line"><span class="comment">"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY</span></span><br><span class="line"><span class="comment">KIND, either express or implied.  See the License for the</span></span><br><span class="line"><span class="comment">specific language governing permissions and limitations</span></span><br><span class="line"><span class="comment">under the License.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"> | This is the configuration file for Maven. It can be specified at two levels:</span></span><br><span class="line"><span class="comment"> |</span></span><br><span class="line"><span class="comment"> |  1. User Level. This settings.xml file provides configuration for a single user,</span></span><br><span class="line"><span class="comment"> |                 and is normally provided in $&#123;user.home&#125;/.m2/settings.xml.</span></span><br><span class="line"><span class="comment"> |</span></span><br><span class="line"><span class="comment"> |                 <span class="doctag">NOTE:</span> This location can be overridden with the CLI option:</span></span><br><span class="line"><span class="comment"> |</span></span><br><span class="line"><span class="comment"> |                 -s /path/to/user/settings.xml</span></span><br><span class="line"><span class="comment"> |</span></span><br><span class="line"><span class="comment"> |  2. Global Level. This settings.xml file provides configuration for all Maven</span></span><br><span class="line"><span class="comment"> |                 users on a machine (assuming they're all using the same Maven</span></span><br><span class="line"><span class="comment"> |                 installation). It's normally provided in</span></span><br><span class="line"><span class="comment"> |                 $&#123;maven.conf&#125;/settings.xml.</span></span><br><span class="line"><span class="comment"> |</span></span><br><span class="line"><span class="comment"> |                 <span class="doctag">NOTE:</span> This location can be overridden with the CLI option:</span></span><br><span class="line"><span class="comment"> |</span></span><br><span class="line"><span class="comment"> |                 -gs /path/to/global/settings.xml</span></span><br><span class="line"><span class="comment"> |</span></span><br><span class="line"><span class="comment"> | The sections in this sample file are intended to give you a running start at</span></span><br><span class="line"><span class="comment"> | getting the most out of your Maven installation. Where appropriate, the default</span></span><br><span class="line"><span class="comment"> | values (values used when the setting is not specified) are provided.</span></span><br><span class="line"><span class="comment"> |</span></span><br><span class="line"><span class="comment"> |--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/SETTINGS/1.0.0"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- localRepository--&gt;</span></span><br><span class="line">   | The path to the local repository maven will use to store artifacts.</span><br><span class="line">   |</span><br><span class="line">   | Default: $&#123;user.home&#125;/.m2/repository</span><br><span class="line">   <span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>/Users/username/data/work/test/maven-libs<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- interactiveMode</span></span><br><span class="line"><span class="comment">   | This will determine whether maven prompts you when it needs input. If set to false,</span></span><br><span class="line"><span class="comment">   | maven will use a sensible default value, perhaps based on some other setting, for</span></span><br><span class="line"><span class="comment">   | the parameter in question.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   | Default: true</span></span><br><span class="line"><span class="comment">  &lt;interactiveMode&gt;true&lt;/interactiveMode&gt;</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- offline</span></span><br><span class="line"><span class="comment">   | Determines whether maven should attempt to connect to the network when executing a build.</span></span><br><span class="line"><span class="comment">   | This will have an effect on artifact downloads, artifact deployment, and others.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   | Default: false</span></span><br><span class="line"><span class="comment">  &lt;offline&gt;false&lt;/offline&gt;</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- pluginGroups</span></span><br><span class="line"><span class="comment">   | This is a list of additional group identifiers that will be searched when resolving plugins by their prefix, i.e.</span></span><br><span class="line"><span class="comment">   | when invoking a command line like "mvn prefix:goal". Maven will automatically add the group identifiers</span></span><br><span class="line"><span class="comment">   | "org.apache.maven.plugins" and "org.codehaus.mojo" if these are not already contained in the list.</span></span><br><span class="line"><span class="comment">   |--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">pluginGroups</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- pluginGroup</span></span><br><span class="line"><span class="comment">     | Specifies a further group identifier to use for plugin lookup.</span></span><br><span class="line"><span class="comment">    &lt;pluginGroup&gt;com.your.plugins&lt;/pluginGroup&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">pluginGroups</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- proxies</span></span><br><span class="line"><span class="comment">   | This is a list of proxies which can be used on this machine to connect to the network.</span></span><br><span class="line"><span class="comment">   | Unless otherwise specified (by system property or command-line switch), the first proxy</span></span><br><span class="line"><span class="comment">   | specification in this list marked as active will be used.</span></span><br><span class="line"><span class="comment">   |--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">proxies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- proxy</span></span><br><span class="line"><span class="comment">     | Specification for one proxy, to be used in connecting to the network.</span></span><br><span class="line"><span class="comment">     |</span></span><br><span class="line"><span class="comment">    &lt;proxy&gt;</span></span><br><span class="line"><span class="comment">      &lt;id&gt;optional&lt;/id&gt;</span></span><br><span class="line"><span class="comment">      &lt;active&gt;true&lt;/active&gt;</span></span><br><span class="line"><span class="comment">      &lt;protocol&gt;http&lt;/protocol&gt;</span></span><br><span class="line"><span class="comment">      &lt;username&gt;proxyuser&lt;/username&gt;</span></span><br><span class="line"><span class="comment">      &lt;password&gt;proxypass&lt;/password&gt;</span></span><br><span class="line"><span class="comment">      &lt;host&gt;proxy.host.net&lt;/host&gt;</span></span><br><span class="line"><span class="comment">      &lt;port&gt;80&lt;/port&gt;</span></span><br><span class="line"><span class="comment">      &lt;nonProxyHosts&gt;local.net|some.host.com&lt;/nonProxyHosts&gt;</span></span><br><span class="line"><span class="comment">    &lt;/proxy&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">proxies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- servers</span></span><br><span class="line"><span class="comment">   | This is a list of authentication profiles, keyed by the server-id used within the system.</span></span><br><span class="line"><span class="comment">   | Authentication profiles can be used whenever maven must make a connection to a remote server.</span></span><br><span class="line"><span class="comment">   |--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servers</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- server</span></span><br><span class="line"><span class="comment">     | Specifies the authentication information to use when connecting to a particular server, identified by</span></span><br><span class="line"><span class="comment">     | a unique name within the system (referred to by the 'id' attribute below).</span></span><br><span class="line"><span class="comment">     |</span></span><br><span class="line"><span class="comment">     | <span class="doctag">NOTE:</span> You should either specify username/password OR privateKey/passphrase, since these pairings are</span></span><br><span class="line"><span class="comment">     |       used together.</span></span><br><span class="line"><span class="comment">     |</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>test-releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">password</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>test-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">password</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Another sample, using keys to authenticate.</span></span><br><span class="line"><span class="comment">    &lt;server&gt;</span></span><br><span class="line"><span class="comment">      &lt;id&gt;siteServer&lt;/id&gt;</span></span><br><span class="line"><span class="comment">      &lt;privateKey&gt;/path/to/private/key&lt;/privateKey&gt;</span></span><br><span class="line"><span class="comment">      &lt;passphrase&gt;optional; leave empty if not used.&lt;/passphrase&gt;</span></span><br><span class="line"><span class="comment">    &lt;/server&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servers</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- mirrors</span></span><br><span class="line"><span class="comment">   | This is a list of mirrors to be used in downloading artifacts from remote repositories.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   | It works like this: a POM may declare a repository to use in resolving certain artifacts.</span></span><br><span class="line"><span class="comment">   | However, this repository may have problems with heavy traffic at times, so people have mirrored</span></span><br><span class="line"><span class="comment">   | it to several places.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   | That repository definition will have a unique id, so we can create a mirror reference for that</span></span><br><span class="line"><span class="comment">   | repository, to be used as an alternate download site. The mirror site will be the preferred</span></span><br><span class="line"><span class="comment">   | server for that repository.</span></span><br><span class="line"><span class="comment">   |--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- mirror</span></span><br><span class="line"><span class="comment">     | Specifies a repository mirror site to use instead of a given repository. The repository that</span></span><br><span class="line"><span class="comment">     | this mirror serves has an ID that matches the mirrorOf element of this mirror. IDs are used</span></span><br><span class="line"><span class="comment">     | for inheritance and direct lookup purposes, and must be unique across the set of mirrors.</span></span><br><span class="line"><span class="comment">     |</span></span><br><span class="line"><span class="comment">    &lt;mirror&gt;</span></span><br><span class="line"><span class="comment">      &lt;id&gt;mirrorId&lt;/id&gt;</span></span><br><span class="line"><span class="comment">      &lt;mirrorOf&gt;repositoryId&lt;/mirrorOf&gt;</span></span><br><span class="line"><span class="comment">      &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt;</span></span><br><span class="line"><span class="comment">      &lt;url&gt;http://my.repository.com/repo/path&lt;/url&gt;</span></span><br><span class="line"><span class="comment">    &lt;/mirror&gt;</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- profiles</span></span><br><span class="line"><span class="comment">   | This is a list of profiles which can be activated in a variety of ways, and which can modify</span></span><br><span class="line"><span class="comment">   | the build process. Profiles provided in the settings.xml are intended to provide local machine-</span></span><br><span class="line"><span class="comment">   | specific paths and repository locations which allow the build to work in the local environment.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   | For example, if you have an integration testing plugin - like cactus - that needs to know where</span></span><br><span class="line"><span class="comment">   | your Tomcat instance is installed, you can provide a variable here such that the variable is</span></span><br><span class="line"><span class="comment">   | dereferenced during the build process to configure the cactus plugin.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   | As noted above, profiles can be activated in a variety of ways. One way - the activeProfiles</span></span><br><span class="line"><span class="comment">   | section of this document (settings.xml) - will be discussed later. Another way essentially</span></span><br><span class="line"><span class="comment">   | relies on the detection of a system property, either matching a particular value for the property,</span></span><br><span class="line"><span class="comment">   | or merely testing its existence. Profiles can also be activated by JDK version prefix, where a</span></span><br><span class="line"><span class="comment">   | value of '1.4' might activate a profile when the build is executed on a JDK version of '1.4.2_07'.</span></span><br><span class="line"><span class="comment">   | Finally, the list of active profiles can be specified directly from the command line.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   | <span class="doctag">NOTE:</span> For profiles defined in the settings.xml, you are restricted to specifying only artifact</span></span><br><span class="line"><span class="comment">   |       repositories, plugin repositories, and free-form properties to be used as configuration</span></span><br><span class="line"><span class="comment">   |       variables for plugins in the POM.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   |--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- profile</span></span><br><span class="line"><span class="comment">     | Specifies a set of introductions to the build process, to be activated using one or more of the</span></span><br><span class="line"><span class="comment">     | mechanisms described above. For inheritance purposes, and to activate profiles via &lt;activatedProfiles/&gt;</span></span><br><span class="line"><span class="comment">     | or the command line, profiles have to have an ID that is unique.</span></span><br><span class="line"><span class="comment">     |</span></span><br><span class="line"><span class="comment">     | An encouraged best practice for profile identification is to use a consistent naming convention</span></span><br><span class="line"><span class="comment">     | for profiles, such as 'env-dev', 'env-test', 'env-production', 'user-jdcasey', 'user-brett', etc.</span></span><br><span class="line"><span class="comment">     | This will make it more intuitive to understand what the set of introduced profiles is attempting</span></span><br><span class="line"><span class="comment">     | to accomplish, particularly when you only have a list of profile id's for debug.</span></span><br><span class="line"><span class="comment">     |</span></span><br><span class="line"><span class="comment">     | This profile example uses the JDK version to trigger activation, and provides a JDK-specific repo.</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">id</span>&gt;</span>cservice-public<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">name</span>&gt;</span>cservice-public<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://127.0.0.1:8081/repository/test-public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">layout</span>&gt;</span>default<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">activeProfiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activeProfile</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">activeProfile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">activeProfiles</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Jenkins配置"><a href="#Jenkins配置" class="headerlink" title="Jenkins配置"></a>Jenkins配置</h2><h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><h4 id="查看初始用户密码"><a href="#查看初始用户密码" class="headerlink" title="查看初始用户密码"></a>查看初始用户密码</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it cservice-jenkins-1 /bin/bash</span><br><span class="line"></span><br><span class="line">jenkins@1c12e86f9789:/$ cat /var/jenkins_home/secrets/initialAdminPassword</span><br><span class="line">2a67d2e0c7ff4a90bf39aa4b6652cf32</span><br><span class="line">jenkins@1c12e86f9789:/$</span><br></pre></td></tr></table></figure><h4 id="解锁Jenkins分配管理员帐号"><a href="#解锁Jenkins分配管理员帐号" class="headerlink" title="解锁Jenkins分配管理员帐号"></a>解锁Jenkins分配管理员帐号</h4><p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593075366/image-20200625135411994_qs6wkp.png" alt="image-20200625135411994"></p><h4 id="安装社区推荐插件"><a href="#安装社区推荐插件" class="headerlink" title="安装社区推荐插件"></a>安装社区推荐插件</h4><blockquote><p>略</p></blockquote><h4 id="创建管理员用户"><a href="#创建管理员用户" class="headerlink" title="创建管理员用户"></a>创建管理员用户</h4><p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593075355/image-20200625142052619_lcl2db.png" alt="img"></p><h3 id="配置jenkins容器的maven程序"><a href="#配置jenkins容器的maven程序" class="headerlink" title="配置jenkins容器的maven程序"></a>配置jenkins容器的maven程序</h3><h4 id="设置maven-amp-jenkins目录权限"><a href="#设置maven-amp-jenkins目录权限" class="headerlink" title="设置maven &amp; jenkins目录权限"></a>设置maven &amp; jenkins目录权限</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/autodeploy/data/jenkins</span><br><span class="line">chmod 777 apache-maven</span><br><span class="line">chmod 777 jenkins</span><br></pre></td></tr></table></figure><h4 id="配置容器maven"><a href="#配置容器maven" class="headerlink" title="配置容器maven"></a>配置容器maven</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/autodeploy/data/jenkins/apache-maven</span><br><span class="line">cp -rf ~/apache-maven-3.5.3 ./</span><br><span class="line">mkdir maven-libs</span><br><span class="line">chmod 777 maven-libs</span><br></pre></td></tr></table></figure><blockquote><p>jenkins中的Dockfile中自定义了如下maven_home，故重启jenkins容器使之生效</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">vim ~/autodeploy/jenkins/jenkins/Dockerfile</span><br><span class="line"></span><br><span class="line"><span class="comment">################## Custom Settings ##################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># change root password</span></span><br><span class="line">RUN <span class="built_in">echo</span> <span class="string">"root:123456"</span>|chpasswd</span><br><span class="line"></span><br><span class="line"><span class="comment"># mkdir &amp;&amp; chmod apache-maven</span></span><br><span class="line">RUN mkdir /usr/<span class="built_in">local</span>/apache-maven \</span><br><span class="line">  &amp;&amp; chmod 777 /usr/<span class="built_in">local</span>/apache-maven</span><br><span class="line"><span class="comment"># add maven home into PATH</span></span><br><span class="line">ENV MAVEN_HOME /usr/<span class="built_in">local</span>/apache-maven/apache-maven-3.5.3</span><br><span class="line">ENV PATH <span class="variable">$MAVEN_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="comment">#RUN export MAVEN_HOME=/usr/local/apache-maven/apache-maven-3.5.3 \</span></span><br><span class="line"><span class="comment">#  &amp;&amp; PATH=$PATH:$MAVEN_HOME/bin \</span></span><br><span class="line"><span class="comment">#  &amp;&amp; export PATH</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################## Custom Settings ##################</span></span><br><span class="line">docker-compose down</span><br><span class="line">docker-compose up -d</span><br><span class="line">docker <span class="built_in">exec</span> -it cservice-jenkins-1 /bin/bash</span><br><span class="line"></span><br><span class="line">jenkins@64098a741648:/$ whereis mvn</span><br><span class="line">mvn: /usr/<span class="built_in">local</span>/apache-maven/apache-maven-3.5.3/bin/mvn.cmd /usr/<span class="built_in">local</span>/apache-maven/apache-maven-3.5.3/bin/mvn</span><br><span class="line">jenkins@64098a741648:/$</span><br></pre></td></tr></table></figure><h3 id="微服务部署配置"><a href="#微服务部署配置" class="headerlink" title="微服务部署配置"></a>微服务部署配置</h3><h4 id="基本配置-1"><a href="#基本配置-1" class="headerlink" title="基本配置"></a>基本配置</h4><p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593075355/image-20200625145929374_z7859n.png" alt="img"></p><h4 id="gitlab代码拉取配置"><a href="#gitlab代码拉取配置" class="headerlink" title="gitlab代码拉取配置"></a>gitlab代码拉取配置</h4><p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593075355/image-20200625150200456_ibmnp0.png" alt="image-20200625150200456"></p><h4 id="构建触发器"><a href="#构建触发器" class="headerlink" title="构建触发器"></a>构建触发器</h4><p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593075357/image-20200625152101974_rctsmw.png" alt="image-20200625152101974"></p><blockquote><p>复制改处生成的webHook密码，并复制到gitee的webHooks</p></blockquote><p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593075368/image-20200625152821376_m49p4r.png" alt="image-20200625152821376"></p><p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593075371/image-20200625152729294_u2hh9i.png" alt="image-20200625152729294"></p><h4 id="Pre-Steps"><a href="#Pre-Steps" class="headerlink" title="Pre Steps"></a>Pre Steps</h4><p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593075364/image-20200625152953593_b1agcc.png" alt="image-20200625152953593"></p><h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h4><p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593075362/image-20200625153030506_ci3zp1.png" alt="img"></p><h4 id="配置发布服务器SSH"><a href="#配置发布服务器SSH" class="headerlink" title="配置发布服务器SSH"></a>配置发布服务器SSH</h4><blockquote><p>【系统管理】-&gt;【系统配置】-&gt;【Publish over SSH】</p></blockquote><p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593075368/image-20200625155411205_mykrlf.png" alt="img"></p><h4 id="编译成功后将jar包上传到发布服务器"><a href="#编译成功后将jar包上传到发布服务器" class="headerlink" title="编译成功后将jar包上传到发布服务器"></a>编译成功后将jar包上传到发布服务器</h4><blockquote><p>将 【Source files】的jar包上传到远程的【Remote directory】目录，然后执行发布服务器的【Exec command】脚本</p></blockquote><p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593075365/image-20200625153359258_vl9mhc.png" alt="image-20200625153359258"></p><blockquote><p>server-start.sh 重启服务脚本</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从eureka 下线该服务</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"下线服务"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"下线服务完成"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止对应容器</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"停止对应容器"</span></span><br><span class="line">docker stop -t=60 cservice-sms-server-1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除对应服务容器和镜像</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"删除sms服务"</span></span><br><span class="line">docker rm cservice-sms-server-1</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"删除sms镜像"</span></span><br><span class="line">docker rmi sms-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># build 容器</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"正在build服务"</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/cservice/cservice-server/sms</span><br><span class="line">docker build -t sms-server .</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"容器build成功"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动该服务的docker容器</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"正在启动服务..."</span></span><br><span class="line"><span class="comment">#docker run -it -d -p 8231:8231 --net=host --name=cservice-sms-server-1 sms-server</span></span><br><span class="line">docker run -it -d -p 8231:8231 --name=cservice-sms-server-1 sms-server</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"服务已启动"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> nexus </tag>
            
            <tag> jenkins </tag>
            
            <tag> gitlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C4Model</title>
      <link href="/2020/06/23/C4Model/"/>
      <url>/2020/06/23/C4Model/</url>
      
        <content type="html"><![CDATA[<blockquote><p>虽然C4Model主要是针对软件架构师和软件开发人员的，但它为开发团队提供了一种高效沟通软件结构的方法。该方法进行了不同级别的详细说明。</p></blockquote><h2 id="抽象概念"><a href="#抽象概念" class="headerlink" title="抽象概念"></a>抽象概念</h2><blockquote><p>C4Model分为以下几个部分:</p><ul><li>系统上下文Context</li><li>容器Containers</li><li>组件Components</li><li>代码Code</li></ul></blockquote><h3 id="Person"><a href="#Person" class="headerlink" title="Person"></a>Person</h3><blockquote><p>一个人代表人类是你的系统的使用者之一（也可能是参与者、角色等）</p></blockquote><p><img src="https://c4model.com/img/notation-person.png" alt="Person"></p><h3 id="Software-System"><a href="#Software-System" class="headerlink" title="Software System"></a>Software System</h3><blockquote><p>软件系统是最高级别的抽象，它描述了一些可以为用户带来价值的东西 </p></blockquote><p><img src="https://c4model.com/img/notation-software-system.png" alt="Software System"></p><h3 id="Container"><a href="#Container" class="headerlink" title="Container"></a>Container</h3><blockquote><p>这儿的容器不是指docker. 在C4Model中，容器代表应用程序或数据存储。为了整个软件系统正常工作，必须运行一个容器，而则会个容器是web应用程序、客户端网络应用程序、客户端桌面应用程序、微服务、无服务功能、服务器端控制的应用程序、文件系统、shell脚本 容器本身是一个上下文或边界，在其中执行代码或存储数据，每个容器都是一个可单独部署/运行的运行时环境</p></blockquote><p><img src="https://c4model.com/img/notation-container.png" alt="Container"></p><h3 id="Components"><a href="#Components" class="headerlink" title="Components"></a>Components</h3><blockquote><p>组件时封装在定义良好的接口后面的一组相关功能 </p></blockquote><p><img src="https://c4model.com/img/notation-component.png" alt="Components"></p><h2 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h2><blockquote><p>【范围】: 单个软件系统 </p><p>【主要元素】: 软件系统内的 </p><p>【支持元素】: 在范围内直接连接到系统的人员和系统软件 </p><p>【目标受众】: 技术团队内部人员和外部人员、包括技术人员和非技术人员</p></blockquote><p><img src="https://c4model.com/img/bigbankplc-SystemContext.png" alt="Context"></p><h2 id="Containers"><a href="#Containers" class="headerlink" title="Containers"></a>Containers</h2><blockquote><p>容器图显示了软件体系结构的高层架构以及如何其间的分配职责</p></blockquote><blockquote><p>【范围】: 单个软件系统 </p><p>【主要元素】: 软件系统范围内的容器 </p><p>【支持元素】: 在范围内直接连接到系统的人员和系统软件 </p><p>【目标受众】: 技术团队内部人员和外部技术人员；包括架构师、开发人员、运营/技术支持人员</p></blockquote><p><img src="https://c4model.com/img/bigbankplc-Containers.png" alt="Containers"></p><h2 id="Components-1"><a href="#Components-1" class="headerlink" title="Components"></a>Components</h2><blockquote><p>【范围】: 单个容器 </p><p>【主要元素】: Container范围内的组件</p><p>【支持元素】: 容易、直接连接到组件的人员和软件系统 </p><p>【目标受众】: 软件架构师和开发人员</p></blockquote><p><img src="https://c4model.com/img/bigbankplc-Components.png" alt="Components"></p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><blockquote><p>【范围】: 单个组件 </p><p>【主要元素】: Components范围内的代码元素(例如类、接口、对象、方法、DB表等等) </p><p>【支持元素】: 容易、直接连接到组件的人员和软件系统 </p><p>【目标受众】: 软件架构师和开发人员</p></blockquote><p><img src="https://c4model.com/img/bigbankplc-Classes.png" alt="Code"></p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="C4Model官网"><a href="#C4Model官网" class="headerlink" title="C4Model官网"></a><a href="https://c4model.com/" target="_blank" rel="noopener">C4Model官网</a></h3><h3 id="中文翻译"><a href="#中文翻译" class="headerlink" title="中文翻译"></a><a href="https://www.infoq.cn/article/C4-architecture-model/" target="_blank" rel="noopener">中文翻译</a></h3>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UML建模 </tag>
            
            <tag> c4model </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UML建模基础</title>
      <link href="/2020/06/23/UML%E5%BB%BA%E6%A8%A1%E5%9F%BA%E7%A1%80/"/>
      <url>/2020/06/23/UML%E5%BB%BA%E6%A8%A1%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<blockquote><p>UML是一种可视化、文档化的语言，UML为所有软件开发人员提供了一种图形化表达、标准化的建模语言</p></blockquote><h2 id="时序图（Sequence）"><a href="#时序图（Sequence）" class="headerlink" title="时序图（Sequence）"></a>时序图（Sequence）</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote><p>是一种UML交互图。它通过描述对象之间发送消息的时间顺序显示多个对象（类、组件、子系统、参与者）之间的动态协作</p></blockquote><h3 id="元素"><a href="#元素" class="headerlink" title="元素"></a>元素</h3><blockquote><ul><li>角色(Actor)</li><li>对象(Object)</li><li>生命线(LifeLine)</li><li>控制焦点(Activation)</li><li>消息(Message)</li><li>自关联消息</li><li>组合片段</li></ul></blockquote><h4 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h4><blockquote><p>系统角色。 可以是人、其他系统、 子系统。 <strong>用小人图标表示</strong></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line">actor Role</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><blockquote><p>对象位于时序图的顶部，<strong>用一个矩形表示</strong></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line">Object1 -&gt; Object2</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><h4 id="生命线"><a href="#生命线" class="headerlink" title="生命线"></a>生命线</h4><blockquote><p>时序图中每个对象和底部中心的一条<strong>垂直的虚线</strong>。 <strong>用一条虚线表示</strong></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line">Object1 -&gt; Object2</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><h4 id="控制焦点"><a href="#控制焦点" class="headerlink" title="控制焦点"></a>控制焦点</h4><blockquote><p>时序图中，在对象生命线上某段时间执行的操作。 <strong>用一个很窄的矩形表示</strong></p></blockquote><h4 id="消息"><a href="#消息" class="headerlink" title="消息"></a>消息</h4><blockquote><p>代表对象之间发送的消息。消息分为三类：</p><ol><li><em>同步消息</em> ： 消息的发送者把消息传递给消息的接收者，然后停止活动，等待消息的接收者放弃或者返回控制；<strong>用来表示同步的意思。 用一条实线和实心箭头表示</strong></li><li><em>异步消息</em> : 消息的发送者把消的传递给消息的接收者，然后继续自己的活动，不等待。 <strong>用一条实线和大于号表示</strong></li><li><em>返回消息</em> : 表示从过程调用返回。 <strong>用小于号和虚线表示</strong></li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line">A -&gt; B: 同步消息</span><br><span class="line"></span><br><span class="line">C -\ D: 异步消息</span><br><span class="line"></span><br><span class="line">E --&gt;&gt; F: 返回消息</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><h4 id="自关联消息"><a href="#自关联消息" class="headerlink" title="自关联消息"></a>自关联消息</h4><blockquote><p>表示方法的自身调用或者一个对象内的一个方法调用另外一个方法。 <strong>用半闭形的长方形和下方实心箭头表示</strong></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line">Object1 -&gt; Object2</span><br><span class="line"></span><br><span class="line">Object2 -&gt; Object2: 自关联消息</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><h4 id="组合片段"><a href="#组合片段" class="headerlink" title="组合片段"></a>组合片段</h4><blockquote><p>组合片段用来解决交互中的执行的条件，它的作用是在时序图中直接表示逻辑组件。 组合片段工13种</p></blockquote><table><thead><tr><th>片段类型</th><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>opt</td><td>选项</td><td>表示一个可选的行为</td></tr><tr><td>alt</td><td>抉择</td><td>在一组行为中根据特定的条件选择某个交互；</td></tr><tr><td>loop</td><td>循环</td><td>说明交互片段会被重复执行</td></tr><tr><td>break</td><td>中断</td><td>提供了和编程语言中的break类拟的机制</td></tr><tr><td>par</td><td>并行</td><td>支持交互片段的并发执行</td></tr><tr><td>region</td><td></td><td>标志在组合片段中先于其他交互片断发生的交互</td></tr><tr><td>seq</td><td>弱顺序</td><td>强迫交互按照特定的顺序执行</td></tr><tr><td>strict</td><td>强顺序</td><td>明确定义了一组交互片段的执行顺序</td></tr><tr><td>consider</td><td>考虑</td><td>明确标志了应该被处理的消息</td></tr><tr><td>ignore</td><td>忽略</td><td>明确定义了交互片段不应该响应的消息</td></tr><tr><td>assert</td><td>断言</td><td>标志了在交互片段中作为事件唯一的合法继续者的操作数</td></tr><tr><td>neg</td><td>否定</td><td>用来标志不应该发生的交互</td></tr><tr><td>ref</td><td></td><td>引用其他地方定义的组合片段</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line">Object1 -&gt; Object2</span><br><span class="line"></span><br><span class="line">alt successful case</span><br><span class="line"></span><br><span class="line">  Object2 -&gt; Object1: 成功</span><br><span class="line">    </span><br><span class="line">else some kind of failure</span><br><span class="line"></span><br><span class="line">  Object2 -&gt; Object1: 失败</span><br><span class="line">   </span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><h2 id="用例图（Use-Case）"><a href="#用例图（Use-Case）" class="headerlink" title="用例图（Use Case）"></a>用例图（Use Case）</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><blockquote><p>用例图主要是用来描述角色与角色、角色与用例之间的连接关系的。 表明<strong>谁要使用系统，及使用该系统可以做些什么</strong></p></blockquote><h3 id="元素-1"><a href="#元素-1" class="headerlink" title="元素"></a>元素</h3><blockquote><ul><li>参与者(Actor)</li><li>用例(Use Case)</li><li>子系统(SubSystem)</li></ul></blockquote><h4 id="参与者"><a href="#参与者" class="headerlink" title="参与者"></a>参与者</h4><blockquote><p>与应用程序或者系统进行交互的用户、组织、外部系统。 <strong>用一个小人表示</strong></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line">actor 参与者</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><h4 id="用例"><a href="#用例" class="headerlink" title="用例"></a>用例</h4><blockquote><p>用例就是外部可见的系统功能，对系统提供的服务进行描述。 <strong>用椭圆表示</strong></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line">(这是个用例)</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><h4 id="子系统"><a href="#子系统" class="headerlink" title="子系统"></a>子系统</h4><blockquote><p>用来展示系统的一部分功能，这部分功能联系紧密</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line">left to right direction</span><br><span class="line"></span><br><span class="line">Actor 张三 as stu</span><br><span class="line"></span><br><span class="line">package 学校 &#123;</span><br><span class="line">usecase 学语文 as ch</span><br><span class="line">    usecase 学数学 as math</span><br><span class="line">    usecase 学体育 as pe</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">stu --&gt; ch</span><br><span class="line">stu --&gt; math</span><br><span class="line">stu --&gt; pe</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><h3 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h3><table><thead><tr><th>关系类型</th><th>符号</th><th>说明</th></tr></thead><tbody><tr><td>关联</td><td>【无箭头的实线】</td><td>参与者与用例之间的关系</td></tr><tr><td>泛化</td><td>【指向父用例的实线箭头】</td><td>参与者之间 或 用例之间 的关系</td></tr><tr><td>包含</td><td>【指向分解出来的功能用例的虚线箭头】</td><td>用例之间的关系</td></tr><tr><td>扩展</td><td>【指向基础用例的虚线】</td><td>用例之间的关系</td></tr></tbody></table><h4 id="关联"><a href="#关联" class="headerlink" title="关联"></a>关联</h4><blockquote><p>表示参与者与用例之间的通信，任何一方都可以发送或接受信息</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line">left to right direction</span><br><span class="line"></span><br><span class="line">Actor 李小龙 as stu</span><br><span class="line">stu -- (幻雨阁)</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><h4 id="泛化"><a href="#泛化" class="headerlink" title="泛化"></a>泛化</h4><blockquote><p>就是继承关系，子用例继承父用例所有的机构、行为、关系； 子用例可以使用父用例的一段行为，也可以重载这个行为。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line">Actor &quot;徐骁&quot; as p</span><br><span class="line">Actor &quot;徐凤年&quot; as c1</span><br><span class="line">Actor &quot;徐龙象&quot; as c2</span><br><span class="line">p &lt;-- c1</span><br><span class="line">p &lt;-- c2</span><br><span class="line"></span><br><span class="line">(订票) &lt;-- (网上订票)</span><br><span class="line">(订票) &lt;-- (电话订票)</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><h4 id="包含"><a href="#包含" class="headerlink" title="包含"></a>包含</h4><blockquote><p>包含关系用来把一个较复杂的用例所表示的功能分解成较小的步骤</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line">(订单系统) &lt;.. (增加订单): 包含关系</span><br><span class="line">(订单系统) &lt;.. (修改订单): 包含关系</span><br><span class="line">(订单系统) &lt;.. (删除订单): 包含关系</span><br><span class="line">(订单系统) &lt;.. (订单详情): 包含关系</span><br><span class="line">(订单系统) &lt;.. (订单列表): 包含关系</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><blockquote><p>扩展关系是指用例功能的延申，相当于为基础用例提供一个附加功能</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line">(mybatis-plus) ..&gt; (mybatis-plus-generator): mybatis-plus附加了代码生成程序</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><h2 id="类图（Class）"><a href="#类图（Class）" class="headerlink" title="类图（Class）"></a>类图（Class）</h2><h3 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h3><blockquote><p>通过UML类图可以详细的描述系统中的对象和他们的关系</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class DataSourceConfig &#123;</span><br><span class="line">- dbQuery:IDbQuery;</span><br><span class="line">- dbType:DbType;</span><br><span class="line">- schemaName:String;</span><br><span class="line">- typeConvert:ITypeConvert;</span><br><span class="line">- url:String;</span><br><span class="line">- driverName:String</span><br><span class="line">- username:String</span><br><span class="line">- password:String</span><br><span class="line">+ getDbQuery():IDbQuery</span><br><span class="line">+ getDbType():DbType</span><br><span class="line">- getDbType(str:String):DbType</span><br><span class="line">+ getTypeConvert():ITypeConvert</span><br><span class="line">+ getConn():Connection</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>Character</strong></th><th><strong>Icon for field</strong></th><th><strong>Icon for method</strong></th><th><strong>Visibility</strong></th></tr></thead><tbody><tr><td><code>-</code></td><td><img src="https://s.plantuml.com/img/private-field.png" alt="img"></td><td><img src="https://s.plantuml.com/img/private-method.png" alt="img"></td><td>private</td></tr><tr><td><code>#</code></td><td><img src="https://s.plantuml.com/img/protected-field.png" alt="img"></td><td><img src="https://s.plantuml.com/img/protected-method.png" alt="img"></td><td>protected</td></tr><tr><td><code>~</code></td><td><img src="https://s.plantuml.com/img/package-private-field.png" alt="img"></td><td><img src="https://s.plantuml.com/img/package-private-method.png" alt="img"></td><td>package private</td></tr><tr><td><code>+</code></td><td><img src="https://s.plantuml.com/img/public-field.png" alt="img"></td><td><img src="https://s.plantuml.com/img/public-method.png" alt="img"></td><td>public</td></tr></tbody></table><h3 id="组成-amp-属性"><a href="#组成-amp-属性" class="headerlink" title="组成 &amp; 属性"></a>组成 &amp; 属性</h3><blockquote><p>UML类图包括：</p><ul><li>类和对象</li><li>类之间的关系</li><li>类之间的多重性</li></ul></blockquote><h4 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h4><blockquote><p>对象是描述客观世界中某个具体的实体 类是对一类具有相同特征的对象的描述； 对象是类的实例</p></blockquote><h3 id="关系-1"><a href="#关系-1" class="headerlink" title="关系"></a>关系</h3><h4 id="泛化关系"><a href="#泛化关系" class="headerlink" title="泛化关系"></a>泛化关系</h4><blockquote><p>表示 类与类之间的继承关系、 接口与接口之间的继承关系、 接口对类的实现关系 。 泛化关系有三个条件：</p><ul><li>父类具有的属性、操作、关系， 子类都具有 </li><li>子类包含额外的信息</li><li>可以使用父类的地方，也能使用子类</li></ul></blockquote><h5 id="继承关系"><a href="#继承关系" class="headerlink" title="继承关系"></a>继承关系</h5><blockquote><p>继承 表示一个类继承另一个类的功能，并可以增加它自己新功能的能力 用 空心三角形+实线 表示</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line">动物 &lt;|-- 人</span><br><span class="line"></span><br><span class="line">class 动物 &#123;</span><br><span class="line"># 种类</span><br><span class="line">    + 呼吸</span><br><span class="line">&#125;</span><br><span class="line">class 人 &#123;</span><br><span class="line">- 名字</span><br><span class="line">    + papapa</span><br><span class="line">&#125;</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><h5 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h5><blockquote><p>【解释】  实现 表示一个class类实现interface接口的功能 </p><p>【箭头】 用 空心三角形+虚线 或 实线 表示</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line">动物 &lt;|.. 人</span><br><span class="line"></span><br><span class="line">interface 动物 &#123;</span><br><span class="line">    + 呼吸</span><br><span class="line">&#125;</span><br><span class="line">class 人 &#123;</span><br><span class="line">- 名字</span><br><span class="line">    + papapa</span><br><span class="line">&#125;</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><h4 id="关联-1"><a href="#关联-1" class="headerlink" title="关联"></a>关联</h4><blockquote><p>【解释】 对于两个相对独立的对象，当一个对象的实例与另一个对象的一些特定实例存在固定的对应关系时，这两个对象为关联关系 </p><p>【表现】 成员变量 </p><p>【箭头】 用 实线箭头 表示</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line">老师 - 学生</span><br><span class="line">学生 - 课程</span><br><span class="line"></span><br><span class="line">class 老师 &#123;&#125;</span><br><span class="line">class 学生 &#123;&#125;</span><br><span class="line">class 课程 &#123;&#125;</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><h4 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h4><blockquote><p>【解释】 表示一种弱的拥有关系，两个对象具有各自的生命周期 </p><p>【表现】 成员变量 </p><p>【箭头】 用 空心的菱形+实现箭头 表示</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line">汽车 o--&gt; 引擎</span><br><span class="line">汽车 o--&gt; 轮胎</span><br><span class="line"></span><br><span class="line">class 汽车 &#123;</span><br><span class="line">- 引擎</span><br><span class="line">    - 轮胎</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class 引擎 &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">class 轮胎 &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><h4 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h4><blockquote><p>【解释】 组合是一种强拥有关系，是严格的部分和整体的关系，部分和整体的生命周期一样 </p><p>【表现】 成员变量 </p><p>【箭头】 用 实心的菱形+实现箭头 表示</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line">公司 *--&gt; 产品部门</span><br><span class="line">公司 *--&gt; 技术部门</span><br><span class="line"></span><br><span class="line">class 公司 &#123;</span><br><span class="line">- 产品部门</span><br><span class="line">    - 技术部门</span><br><span class="line">&#125;</span><br><span class="line">class 产品部门 &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">class 技术部门 &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><h4 id="依赖关系"><a href="#依赖关系" class="headerlink" title="依赖关系"></a>依赖关系</h4><blockquote><p>【解释】 对于两个相对独立的对象，当一个对象负责构造另一个对象的实例，或者依赖另一个对象的服务时，这两个对象之间主要体现为依赖关系 </p><p>【表现】 局部变量、方法的参数或者对静态方法的调用 </p><p>【箭头】 用 虚线箭头 表示</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line">动物 ..&gt; 氧气</span><br><span class="line">动物 ..&gt; 水</span><br><span class="line"></span><br><span class="line">class 动物 &#123;</span><br><span class="line">+ 活着(氧气, 水)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class 氧气 &#123;&#125;</span><br><span class="line">class 水 &#123;&#125;</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><h2 id="活动图（Activity）"><a href="#活动图（Activity）" class="headerlink" title="活动图（Activity）"></a>活动图（Activity）</h2><blockquote><p>略</p></blockquote><h2 id="组件图（Component）"><a href="#组件图（Component）" class="headerlink" title="组件图（Component）"></a>组件图（Component）</h2><h3 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h3><blockquote><p>组件图是用来描述组件与组件之间关系的一种UML图；组件图在宏观层面上显示了构成系统某一个特定方面的实现结构</p></blockquote><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><blockquote><p>组件图可以明确系统的设计，如果按照面向对象方式设计系统和子系统的话，通常可以保证低耦合、提供可重用性</p></blockquote><h3 id="组成-amp-元素"><a href="#组成-amp-元素" class="headerlink" title="组成 &amp; 元素"></a>组成 &amp; 元素</h3><blockquote><ul><li>组件</li><li>接口</li><li>关系</li></ul></blockquote><h4 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h4><blockquote><p>组件 是系统设计的一个模块化部分，它隐藏了内部的实现，对外提供了一组接口。  它是一个封装完好的物理实现单元，具有自己的身份标识和定义明确的接口。 [images] 组件在系统中一般分为三类：部署组件、 工作产品组件、执行组件</p><ul><li>配置组件 是构成系统时必要的组件，是运行系统时需要配置的组件</li><li>工作产品组件 主要是开发过程的产物，是形成配置组件和可执行文件之前必要的工作产品，是部署组件的来源。工作产品组件并不直接参与到可执行系统中，而是用来产生系统的中间产品</li><li>执行组件 是可运行的系统最终运行产生的运行结果</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line">[First component]</span><br><span class="line">[Another component] as Comp2</span><br><span class="line">component Comp3</span><br><span class="line">component [Last\ncomponent] as Comp4</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><h4 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h4><blockquote><p>对于一个组件而言，它有两类接口：提供接口、 需求接口</p><ul><li>提供接口 是组件为其他组件提供服务的操作的集合</li><li>需求接口 是组件向其他组件请求响应服务时要遵循的接口</li></ul></blockquote><h4 id="关系-2"><a href="#关系-2" class="headerlink" title="关系"></a>关系</h4><h5 id="依赖关系-1"><a href="#依赖关系-1" class="headerlink" title="依赖关系"></a>依赖关系</h5><blockquote><ul><li>组件与需求接口之间建立依赖关系</li><li>组件与组件之间建立依赖关系：说明在运行过程中A在某些行为上依靠组件B来支持</li></ul></blockquote><h5 id="实现关系"><a href="#实现关系" class="headerlink" title="实现关系"></a>实现关系</h5><blockquote><p>组件与提供接口之间建立实现关系</p></blockquote><h2 id="状态图（State）"><a href="#状态图（State）" class="headerlink" title="状态图（State）"></a>状态图（State）</h2><blockquote><p>状态图 是描述一个对象的所有状态和状态之间的转换的UML图</p></blockquote><h3 id="状态机"><a href="#状态机" class="headerlink" title="状态机"></a>状态机</h3><blockquote><p>了解状态图前先了解状态机，状态机是展示状态与状态转换的图</p></blockquote><h4 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h4><blockquote><p>一个模型在其生存期内的状况，如满足某些条件、执行某些操作或等待某些事件</p></blockquote><h4 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h4><blockquote><p>两个不同状态之间的联系，事件可以触发状态之间的转换</p></blockquote><h4 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h4><blockquote><p>在某个时间产生的，可以触发状态转换的部分，如信号、对象的创建和销毁、超时和条件的改变</p></blockquote><h4 id="动作"><a href="#动作" class="headerlink" title="动作"></a>动作</h4><blockquote><p>是在状态机中进行的一个非原子的执行，由一系列动作组成</p></blockquote><h4 id="活动"><a href="#活动" class="headerlink" title="活动"></a>活动</h4><blockquote><p>是一个可执行的原子计算，它导致状态的变更或返回一个值</p></blockquote><h3 id="状态图的状态"><a href="#状态图的状态" class="headerlink" title="状态图的状态"></a>状态图的状态</h3><blockquote><p>状态 描述了状态机所在对象动态行为的运行所产生的结果。 在图形上，用一个圆角矩形表示一个状态。 一个完整的状态有5个组成部分：</p><ul><li>名字： 由一个字符串构成，用以标识不同的状态。状态可以时没有名字的 </li><li>入口/出口动作： 进入/退出这个状态所执行的动作</li><li>内部转换： 是不会引起状态变化的转换</li><li>延迟事件： 该状态下暂不处理，但将推迟到该对象的另一个状态下事件的处理队列</li><li>子状态： 顺序子状态/并发子状态</li></ul></blockquote><h3 id="状态图的转换"><a href="#状态图的转换" class="headerlink" title="状态图的转换"></a>状态图的转换</h3><blockquote><p>转换 是状态间的关联。 当某实体在第一个状态中运行一定的动作，并在某个特定事情发生且某特定条件满足时进入下一状态，转换也有5部分：</p><ul><li>源状态： 在转换被激活之前，对象所处的状态就是转换的源状态</li><li>目标状态： 转换完成后，对象状态发生了变化，这时对象所处的状态就是转换的目标状态</li><li>触发事件： 引起转变的事件</li><li>监护条件： 被放在触发事件的后面，可以引用对象的属性值和触发事件的参数</li><li>动作： 操作调用</li></ul></blockquote><h2 id="对象图（Object）"><a href="#对象图（Object）" class="headerlink" title="对象图（Object）"></a>对象图（Object）</h2><blockquote><p>略</p></blockquote><h2 id="部署图（Deployment）"><a href="#部署图（Deployment）" class="headerlink" title="部署图（Deployment）"></a>部署图（Deployment）</h2><h3 id="简介-4"><a href="#简介-4" class="headerlink" title="简介"></a>简介</h3><blockquote><p>部署图 表达了在实际应用中软件和它的运行环境的关系，并且描述了软件部署在硬件上的具体方式</p></blockquote><h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><blockquote><p>节点、部署图中的关系</p></blockquote><h4 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h4><blockquote><p>节点是运行时的物理对象，代表一个计算资源</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line"></span><br><span class="line">node node1</span><br><span class="line">node node2</span><br><span class="line">node node3</span><br><span class="line">node node4</span><br><span class="line">node node5</span><br><span class="line">node1 -- node2</span><br><span class="line">node1 .. node3</span><br><span class="line">node1 ~~ node4</span><br><span class="line">node1 &#x3D;&#x3D; node5</span><br><span class="line"></span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><h4 id="部署图中的关系"><a href="#部署图中的关系" class="headerlink" title="部署图中的关系"></a>部署图中的关系</h4><blockquote><p>部署图的节点之间使用关联关系来表示节点之间的通信路径，称为连接 一般对关联关系不进行命名，使用构造型来区分不同类型的通信路径或通信的实现方式，例如&lt;<Ethernet>&gt;、&lt;&lt;TCP/IP&gt;&gt;、&lt;<HTTP>&gt;等能表示通信协议或网络类型的内容</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UML建模 </tag>
            
            <tag> 时序图 </tag>
            
            <tag> 类图 </tag>
            
            <tag> 用例图 </tag>
            
            <tag> 状态图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>源码阅读方法论</title>
      <link href="/2020/06/12/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E6%96%B9%E6%B3%95%E8%AE%BA/"/>
      <url>/2020/06/12/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E6%96%B9%E6%B3%95%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><blockquote><p>在阅读源码之前，明确一下目的，这样有助于控制时间。</p></blockquote><blockquote><p>对于阅读目的，可分为：</p><ul><li>学习编程思想</li><li>解决编程中遇到的问题</li><li>私有化开源代码</li></ul></blockquote><h2 id="浏览"><a href="#浏览" class="headerlink" title="浏览"></a>浏览</h2><blockquote><p><strong>读注解，略实现，明目的 -&gt; 画架构</strong></p></blockquote><blockquote><p>读注解 是通过阅读源码的官方文档、源码中的注解、Isuue、以及别人对改源码的整体分析，对每个模块主要是干什么的有个大概了解。</p><p>但对于很大的开源项目，像spring系列的官方文档、使用文档太多，逐一阅读会很花费时间，所以需要把文档和代码调试结合到一起，提升阅读效率。</p><p>在读的过程中，不要深究具体实现，只需知道每块是做什么的，也就是设计这个模块的目的。通过粗略浏览画出改源码对应的架构草图。</p></blockquote><h2 id="精读"><a href="#精读" class="headerlink" title="精读"></a>精读</h2><blockquote><p><strong>分部分，底向上，深实现</strong></p></blockquote><blockquote><p>精读 的时候，根据架构草图把系统划分为各个小部分。然后逐一自底（<strong>数据结构</strong>）向上的阅读各个小部分，弄明白这部分具体是怎么做的，为什么要这么做，有更好的实现方式吗等问题。</p></blockquote><h3 id="核心API"><a href="#核心API" class="headerlink" title="核心API"></a>核心API</h3><blockquote><p>在精读时，找到各个小部分的核心API，使用UML中的类图建立静态结构，分析出类与类之间的关系（继承、组合、实现、依赖、关联等），可按照以下方式进行：</p></blockquote><h3 id="IDE调试"><a href="#IDE调试" class="headerlink" title="IDE调试"></a>IDE调试</h3><blockquote><p>通过IDE的debug功能，改变函数功能、参数、运行环境等，追溯到内存堆栈、函数执行顺序等。</p></blockquote><h3 id="Google"><a href="#Google" class="headerlink" title="Google"></a>Google</h3><blockquote><p>遇到问题后，在思考无果的情况下，Google查一下相关答案。</p></blockquote><h2 id="复盘"><a href="#复盘" class="headerlink" title="复盘"></a>复盘</h2><blockquote><p><strong>修架构，做复盘，放共用</strong></p></blockquote><blockquote><p>完善架构草图，将草图中空的、模糊的、错误的重新修改完善。</p><p>通过做复盘整理文档，强迫自己对不清楚的知识点加深理解；文档应该包括UML图、核心类的实现、代码设计技巧，但在形成文档时，只应该阐述核心几点，否则内容过多会导致内容混乱。</p><p>最后，可以将该源码中高效、可复用的代码记录放到自己的代码库中。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 方法论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> java源码分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux文件处理三剑客</title>
      <link href="/2020/05/12/Linux%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86%E4%B8%89%E5%89%91%E5%AE%A2/"/>
      <url>/2020/05/12/Linux%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86%E4%B8%89%E5%89%91%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h2><blockquote><p>文本编辑工具。</p></blockquote><blockquote><p>sed 是非交互式的流编辑器(stream editor)。1973-1974年开发。</p></blockquote><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><blockquote><p>在对文件进行一些编译/查询等操作时，sed的效率比vi/vim、cat、more、less高很多。</p></blockquote><blockquote><p>sed一次读取一行，而vi/vim、cat、more是将文件一次性都加载到内存(磁盘、内存读取速度)，所以sed读取超大文件时不会卡。</p></blockquote><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><blockquote><p>sed 内部实现了一种编程语言、其中包含了大约25个指定文本操作的命令。sed的变量只有两个，叫作 <strong>模式空间</strong> 和 <strong>保持空间</strong>。sed具有类似GOTO的分支功能。</p><p>虽然sed极简单，但是sed是图灵完备的(具有无限存储能力的通用物理机器或编程语言)。所以用sed脚本可以写出比较复杂的游戏。</p></blockquote><blockquote><p><strong>模式空间：</strong>读取文件时存放内容的缓冲区，sed命令可以操作该区域的内容。</p><p><strong>保持空间：</strong>sed的另外一个缓冲区，只有少数几个sed命令才能操作该区域内容。</p></blockquote><blockquote><p>工作流程：</p><ol><li>sed从文件(&lt;&lt;) 或 输入流(|)中读取一行文本到一个叫做 <strong>模式空间</strong> 的内部缓冲区。</li><li>对 <strong>模式空间</strong> 中需要处理的内容执行sed命令（只处理文件副本，不处理原文件）。</li><li>将 <strong>模式空间</strong> 中的内容输出到屏幕或文件中。</li><li>循环对文件或输入流中的每一行执行以上三步。</li></ol></blockquote><h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sed [OPTIONS] &#39;COMMAND&#39; files</span><br><span class="line">sed [OPTIONS] -f SCRIPTFILE files</span><br></pre></td></tr></table></figure><h4 id="常见命令选项"><a href="#常见命令选项" class="headerlink" title="常见命令选项"></a>常见命令选项</h4><blockquote><p>-n    屏蔽默认输出；在默认情况下，sed会将所有STDIN的行列到屏幕上，-n参数会将经过sed处理过的行才列出来</p></blockquote><blockquote><p>-i    直接修改读取文本内容，而不是输出到屏幕上</p></blockquote><blockquote><p>-f    使用sed脚本；将sed动作写到文件sfile.txt中，执行时使用 -f sfile.txt</p></blockquote><blockquote><p>-e    可以指定多个处理动作</p></blockquote><blockquote><p>-r    启动扩展正则表达式，如果和其他选项一起使用，则把r放在最前面</p></blockquote><blockquote><p>-{}    可以组合多个命令，用分号分隔</p></blockquote><h4 id="常见处理动作"><a href="#常见处理动作" class="headerlink" title="常见处理动作"></a>常见处理动作</h4><blockquote><p>p    打印行，一般会和-n配合使用；例如：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4,6p  &#x2F;&#x2F;输出4，5，6行</span><br><span class="line">4p,6p &#x2F;&#x2F;输出4，6行</span><br></pre></td></tr></table></figure><blockquote><p>d    删除行；例如：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4,6d  &#x2F;&#x2F;删除4，5，6行</span><br></pre></td></tr></table></figure><blockquote><p>s    字符串替换；例如：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s&#x2F;old&#x2F;new &#x2F;&#x2F;将每行的第一个old替换成new</span><br><span class="line">s&#x2F;old&#x2F;new&#x2F;3   &#x2F;&#x2F;将每行的第三个old替换成new</span><br><span class="line">s&#x2F;old&#x2F;new&#x2F;g   &#x2F;&#x2F;将全部的old替换成new</span><br></pre></td></tr></table></figure><h4 id="常见文本块处理"><a href="#常见文本块处理" class="headerlink" title="常见文本块处理"></a>常见文本块处理</h4><blockquote><p>i    行前插入文本</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2iAA  &#x2F;&#x2F;在第2行前面插入文本行AA</span><br><span class="line">2,4iAA  &#x2F;&#x2F;在第2，3，4行每行前面插入文本行AA</span><br></pre></td></tr></table></figure><blockquote><p>a    行后插入文本</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2aAA  &#x2F;&#x2F;在第2行后面插入文本行AA</span><br><span class="line">2,4aAA  &#x2F;&#x2F;在第2，3，4行每行后面插入文本行AA</span><br></pre></td></tr></table></figure><blockquote><p>c    替换当前行</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2cAA  &#x2F;&#x2F;把第2行内容替换成AA</span><br></pre></td></tr></table></figure><h4 id="常见导入操作"><a href="#常见导入操作" class="headerlink" title="常见导入操作"></a>常见导入操作</h4><blockquote><p>r    读取文本</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2r a.txt  &#x2F;&#x2F;在第2行的下面插入a.txt文件</span><br><span class="line">2,4r a.txt  &#x2F;&#x2F;在第2，3，4行每行的下面插入a.txt文件</span><br></pre></td></tr></table></figure><blockquote><p>w    保存到文件</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2w a.txt&#x2F;&#x2F;将第2行的内容保存为a.txt文件</span><br><span class="line">2,4w a.txt&#x2F;&#x2F;将第2，3，4行的内容保存为a.txt文件</span><br></pre></td></tr></table></figure><h4 id="常见剪切复制"><a href="#常见剪切复制" class="headerlink" title="常见剪切复制"></a>常见剪切复制</h4><h5 id="概念解释"><a href="#概念解释" class="headerlink" title="概念解释"></a>概念解释</h5><blockquote><p>模式空间：暂存 根据地址和正则匹配的所有行 内容；可以理解为 操作区。</p></blockquote><blockquote><p>保持空间：暂存 一些待用户定义的 内容；可以理解为暂存区。</p></blockquote><h5 id="高级编辑命令"><a href="#高级编辑命令" class="headerlink" title="高级编辑命令"></a>高级编辑命令</h5><blockquote><p>h 和 H    把 <strong>模式空间</strong> 中的内容覆盖或追加到 <strong>保存空间</strong></p></blockquote><blockquote><p>g 和 G    从 <strong>保持空间</strong> 取出数据覆盖或追加到 <strong>模式空间</strong></p></blockquote><blockquote><p>x     把 <strong>保持空间</strong> 和 <strong>模式空间</strong> 中的内容互换</p></blockquote><blockquote><p>n 和 N    读取匹配行的下一行，覆盖或追加到 <strong>模式空间</strong></p></blockquote><blockquote><p><strong>注：高级编辑命令分为大小和小写，大写表示追加、小写表示覆盖</strong></p></blockquote><h3 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h3><h4 id="s"><a href="#s" class="headerlink" title="s"></a>s</h4><h5 id="字符串替换"><a href="#字符串替换" class="headerlink" title="字符串替换"></a>字符串替换</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">'s/old/new/'</span> find.txt//将每行的第一个old替换成new</span><br><span class="line">sed <span class="string">'s/old/new/3'</span> find.txt//将每行的第三个old替换成new</span><br><span class="line">sed <span class="string">'s/old/new/g'</span> find.txt//将所有的old都替换成new</span><br></pre></td></tr></table></figure><h5 id="替换某字符到结尾"><a href="#替换某字符到结尾" class="headerlink" title="替换某字符到结尾"></a>替换某字符到结尾</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">'s/:.*//'</span> source.txt &gt; output.txt//把 从:开始到结尾 的字符串删除（或替换为空）</span><br></pre></td></tr></table></figure><h5 id="删除每行的第一个字符"><a href="#删除每行的第一个字符" class="headerlink" title="删除每行的第一个字符"></a>删除每行的第一个字符</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">'s/^.//'</span> find.txt//.匹配任意单个字符，^指定匹配每一行的开头</span><br></pre></td></tr></table></figure><h5 id="删除每行的最后一个字符"><a href="#删除每行的最后一个字符" class="headerlink" title="删除每行的最后一个字符"></a>删除每行的最后一个字符</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">'s/.$//'</span> find.txt//$匹配每一行字符串的结尾</span><br></pre></td></tr></table></figure><h5 id="同时移除每一行的第一个字符和最后一个字符"><a href="#同时移除每一行的第一个字符和最后一个字符" class="headerlink" title="同时移除每一行的第一个字符和最后一个字符"></a>同时移除每一行的第一个字符和最后一个字符</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">'s/^.//;s/.$//'</span> find.txt//sed中的每个指令可以通过<span class="string">';'</span>分割</span><br></pre></td></tr></table></figure><h5 id="移除每行的匹配到的特定字符，没有匹配则不做处理"><a href="#移除每行的匹配到的特定字符，没有匹配则不做处理" class="headerlink" title="移除每行的匹配到的特定字符，没有匹配则不做处理"></a>移除每行的匹配到的特定字符，没有匹配则不做处理</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">'s/^F//'</span> find.txt</span><br></pre></td></tr></table></figure><h5 id="移除每行匹配到的特定字符，没有匹配则不做处理"><a href="#移除每行匹配到的特定字符，没有匹配则不做处理" class="headerlink" title="移除每行匹配到的特定字符，没有匹配则不做处理"></a>移除每行匹配到的特定字符，没有匹配则不做处理</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">'s/F$//'</span> find.txt</span><br></pre></td></tr></table></figure><h5 id="删除每行的第一到第三个字符"><a href="#删除每行的第一到第三个字符" class="headerlink" title="删除每行的第一到第三个字符"></a>删除每行的第一到第三个字符</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">'s/...//'</span> find.txt</span><br></pre></td></tr></table></figure><h5 id="删除每行的第一到第n个字符"><a href="#删除每行的第一到第n个字符" class="headerlink" title="删除每行的第一到第n个字符"></a>删除每行的第一到第n个字符</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">'s/.&#123;n&#125;//'</span> find.txt// .&#123;n&#125; 匹配n次一个任意值</span><br></pre></td></tr></table></figure><h5 id="删除每行的最后n个字符"><a href="#删除每行的最后n个字符" class="headerlink" title="删除每行的最后n个字符"></a>删除每行的最后n个字符</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">'s/.&#123;3&#125;$//'</span> find.txt</span><br></pre></td></tr></table></figure><h5 id="除了每行的第一到第n个字符外，剩下的都要删除"><a href="#除了每行的第一到第n个字符外，剩下的都要删除" class="headerlink" title="除了每行的第一到第n个字符外，剩下的都要删除"></a>除了每行的第一到第n个字符外，剩下的都要删除</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">'s/(.&#123;n&#125;).*/\1/'</span> find.txt//.&#123;n&#125;按顺序匹配n个字符；()表示分组；.*表示任意多个字符；\1表示第一个分组</span><br></pre></td></tr></table></figure><h5 id="删除每行所有字符且保留结尾的n个字符"><a href="#删除每行所有字符且保留结尾的n个字符" class="headerlink" title="删除每行所有字符且保留结尾的n个字符"></a>删除每行所有字符且保留结尾的n个字符</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">'s/.*(.&#123;n&#125;)/\1/'</span> find.txt</span><br></pre></td></tr></table></figure><h5 id="删除每行中出现的所有数字"><a href="#删除每行中出现的所有数字" class="headerlink" title="删除每行中出现的所有数字"></a>删除每行中出现的所有数字</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">'s/[0-9]//g'</span> find.txt//[]指定需要匹配的多个字符</span><br></pre></td></tr></table></figure><h5 id="删除文件中行首-末空格"><a href="#删除文件中行首-末空格" class="headerlink" title="删除文件中行首/末空格"></a>删除文件中行首/末空格</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">'s/^[ \t]*//'</span> find.txt</span><br><span class="line">sed <span class="string">'s/[ \t]*$//g'</span> find.txt</span><br></pre></td></tr></table></figure><h4 id="d"><a href="#d" class="headerlink" title="d"></a>d</h4><h5 id="删除第一行"><a href="#删除第一行" class="headerlink" title="删除第一行"></a>删除第一行</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">'1d'</span> find.txt</span><br></pre></td></tr></table></figure><h5 id="删除最后一行"><a href="#删除最后一行" class="headerlink" title="删除最后一行"></a>删除最后一行</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">'$d'</span> find.txt</span><br></pre></td></tr></table></figure><h5 id="删除第n行到最后一行"><a href="#删除第n行到最后一行" class="headerlink" title="删除第n行到最后一行"></a>删除第n行到最后一行</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">'n,$d'</span> find.txt</span><br></pre></td></tr></table></figure><h4 id="n-amp-p"><a href="#n-amp-p" class="headerlink" title="n &amp; p"></a>n &amp; p</h4><h5 id="显示第n行"><a href="#显示第n行" class="headerlink" title="显示第n行"></a>显示第n行</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -n <span class="string">'np'</span> find.txt</span><br></pre></td></tr></table></figure><h5 id="查询关键词test所在的所有行"><a href="#查询关键词test所在的所有行" class="headerlink" title="查询关键词test所在的所有行"></a>查询关键词test所在的所有行</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -n <span class="string">'/test/p'</span> find.txt</span><br></pre></td></tr></table></figure><h5 id="增加指定-一行或多行-增加-一行或多行"><a href="#增加指定-一行或多行-增加-一行或多行" class="headerlink" title="增加指定 一行或多行 增加 一行或多行"></a>增加指定 一行或多行 增加 一行或多行</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">'n,$a addRow'</span> find.txt//在第n行到最后一行增加addRow</span><br><span class="line">sed <span class="string">'na addRow1\naddRow2'</span> find.txt//在第n行增加两行，使用\n换行</span><br></pre></td></tr></table></figure><h4 id="c"><a href="#c" class="headerlink" title="c"></a>c</h4><h5 id="代替一行或多行"><a href="#代替一行或多行" class="headerlink" title="代替一行或多行"></a>代替一行或多行</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">'n,$c replaceRow'</span>find.txt//将第n行到最后一行的内容替换成replaceRow</span><br></pre></td></tr></table></figure><h4 id="a"><a href="#a" class="headerlink" title="a"></a>a</h4><h5 id="在第n行后插入insert"><a href="#在第n行后插入insert" class="headerlink" title="在第n行后插入insert"></a>在第n行后插入insert</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">'na insert'</span> find.txt</span><br></pre></td></tr></table></figure><h5 id="去重"><a href="#去重" class="headerlink" title="去重"></a>去重</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sort -n find.txt | uniq</span><br></pre></td></tr></table></figure><h2 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h2><blockquote><p>文本分析工具 和 数据提取工具。</p></blockquote><h3 id="使用场景-1"><a href="#使用场景-1" class="headerlink" title="使用场景"></a>使用场景</h3><blockquote><p>将文本中有用的信息优雅的输出。</p><p>awk和sed类似，也是逐行读取文件或输入流，提取出有用的数据并进行二次处理后格式化输出。</p></blockquote><h3 id="工作原理-1"><a href="#工作原理-1" class="headerlink" title="工作原理"></a>工作原理</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'BEGIN&#123;&#125;pattern&#123;&#125;END&#123;&#125;'</span> file.txt</span><br></pre></td></tr></table></figure><p><img src="https://www.runoob.com/wp-content/uploads/2018/10/20170719154838100.png" alt="img"></p><blockquote><p>工作流程：</p><ol><li>执行 BEGIN后面的内容。</li><li>执行BODY中的内容，从文件或输入流读取有 <strong>\n</strong> 分割的内容。</li><li>将内容按指定的域分隔符划分域，并填充域（域值每列中的列数据）。</li><li>匹配pattern部分内容，匹配到才执行 pattern 后面的 command 操作。</li><li>依次执行各个 pattern 匹配即其后的操作。</li><li>循环以 <strong>\n</strong> 分割读取文件或输入流，执行以上五步，直到全部读取完成。</li><li>执行END后面的内容。</li></ol></blockquote><h3 id="命令格式-1"><a href="#命令格式-1" class="headerlink" title="命令格式"></a>命令格式</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk [OPTIONS] <span class="string">'/PATTERN/&#123;ACTION&#125;'</span> files</span><br></pre></td></tr></table></figure><h4 id="常见命令选项-1"><a href="#常见命令选项-1" class="headerlink" title="常见命令选项"></a>常见命令选项</h4><blockquote><p>-F fs          fs指定输入文件折分隔符，fs是一个字符串或者一个正则表达式</p></blockquote><blockquote><p>-v var=value         var=value赋值一个用户定义变量</p></blockquote><blockquote><p>-f scripfile          scriptfile从脚本文件读取awk命令</p></blockquote><blockquote><p>-mf nnn         对nnn值设置内在限制，-mf选项限制分配给nnn的最大块数目；-mr选项限制记录的最大数目</p></blockquote><h4 id="模式和操作"><a href="#模式和操作" class="headerlink" title="模式和操作"></a>模式和操作</h4><blockquote><p>awk的模式可以是以下任意一个：</p><ul><li>/正则表达式/: 使用通配符的扩展集</li><li>关系表达式：使用运算进行操作，可以是字符串或者数字的比较测试</li><li>模式匹配表达式：用运算符<del>（匹配）和</del>！(不匹配)</li><li>BEGIN 语句块，pattern语句块，END语句块</li></ul></blockquote><blockquote><p>awk的操作由一个或多个命令、函数、表达式组成，之间由换行符或分号分割，并位于大括号内，主要部分是：</p><ul><li>变量或数组赋值</li><li>输出命令</li><li>内置函数</li><li>控制流语句</li></ul></blockquote><h3 id="awk支持的运算符"><a href="#awk支持的运算符" class="headerlink" title="awk支持的运算符"></a>awk支持的运算符</h3><table><thead><tr><th align="left">运算符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">= += -= <em>= /= %= ^= *</em>=</td><td align="left">赋值</td></tr><tr><td align="left">?:</td><td align="left">C条件表达式</td></tr><tr><td align="left">||</td><td align="left">逻辑或</td></tr><tr><td align="left">&amp;&amp;</td><td align="left">逻辑与</td></tr><tr><td align="left">~ 和 !~</td><td align="left">匹配正则表达式和不匹配正则表达式</td></tr><tr><td align="left">&lt; &lt;= &gt; &gt;= != ==</td><td align="left">关系运算符</td></tr><tr><td align="left">空格</td><td align="left">连接</td></tr><tr><td align="left">+ -</td><td align="left">加，减</td></tr><tr><td align="left">* / %</td><td align="left">乘，除与求余</td></tr><tr><td align="left">+ - !</td><td align="left">一元加，减和逻辑非</td></tr><tr><td align="left">^ ***</td><td align="left">求幂</td></tr><tr><td align="left">++ –</td><td align="left">增加或减少，作为前缀或后缀</td></tr><tr><td align="left">$</td><td align="left">字段引用</td></tr><tr><td align="left">in</td><td align="left">数组成员</td></tr></tbody></table><h3 id="awk的内建变量"><a href="#awk的内建变量" class="headerlink" title="awk的内建变量"></a>awk的内建变量</h3><table><thead><tr><th align="left">变量</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">$n</td><td align="left">当前记录的第n个字段，字段间由FS分隔</td></tr><tr><td align="left">$0</td><td align="left">完整的输入记录</td></tr><tr><td align="left">ARGC</td><td align="left">命令行参数的数目</td></tr><tr><td align="left">ARGIND</td><td align="left">命令行中当前文件的位置(从0开始算)</td></tr><tr><td align="left">ARGV</td><td align="left">包含命令行参数的数组</td></tr><tr><td align="left">CONVFMT</td><td align="left">数字转换格式(默认值为%.6g)ENVIRON环境变量关联数组</td></tr><tr><td align="left">ERRNO</td><td align="left">最后一个系统错误的描述</td></tr><tr><td align="left">FIELDWIDTHS</td><td align="left">字段宽度列表(用空格键分隔)</td></tr><tr><td align="left">FILENAME</td><td align="left">当前文件名</td></tr><tr><td align="left">FNR</td><td align="left">各文件分别计数的行号</td></tr><tr><td align="left">FS</td><td align="left">字段分隔符(默认是任何空格)</td></tr><tr><td align="left">IGNORECASE</td><td align="left">如果为真，则进行忽略大小写的匹配</td></tr><tr><td align="left">NF</td><td align="left">一条记录的字段的数目</td></tr><tr><td align="left">NR</td><td align="left">已经读出的记录数，就是行号，从1开始</td></tr><tr><td align="left">OFMT</td><td align="left">数字的输出格式(默认值是%.6g)</td></tr><tr><td align="left">OFS</td><td align="left">输出记录分隔符（输出换行符），输出时用指定的符号代替换行符</td></tr><tr><td align="left">ORS</td><td align="left">输出记录分隔符(默认值是一个换行符)</td></tr><tr><td align="left">RLENGTH</td><td align="left">由match函数所匹配的字符串的长度</td></tr><tr><td align="left">RS</td><td align="left">记录分隔符(默认是一个换行符)</td></tr><tr><td align="left">RSTART</td><td align="left">由match函数所匹配的字符串的第一个位置</td></tr><tr><td align="left">SUBSEP</td><td align="left">数组下标分隔符(默认值是/034)</td></tr></tbody></table><h3 id="实际应用-1"><a href="#实际应用-1" class="headerlink" title="实际应用"></a>实际应用</h3><h4 id="输出文件的第n、第m行"><a href="#输出文件的第n、第m行" class="headerlink" title="输出文件的第n、第m行"></a>输出文件的第n、第m行</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'&#123;print $n,$m&#125;'</span> test.txt//每行按空格或TAB分割</span><br></pre></td></tr></table></figure><blockquote><p>awk ‘{pattern + action}’ {filename}</p><p>// pattern表示awk在数据中查找的内容；action是在找到匹配内容时所执行的一系列命令；{}对一系列指令进行分组，不需要始终出现</p></blockquote><h4 id="按-分割输出第n、第m行"><a href="#按-分割输出第n、第m行" class="headerlink" title="按:分割输出第n、第m行"></a>按:分割输出第n、第m行</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk -F: <span class="string">'&#123;print $n,$m&#125;'</span> test.txt//-F指定分隔符</span><br></pre></td></tr></table></figure><h4 id="设置第二列为第一列的n倍"><a href="#设置第二列为第一列的n倍" class="headerlink" title="设置第二列为第一列的n倍"></a>设置第二列为第一列的n倍</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk -vm=n <span class="string">'&#123;print $1,$1*n&#125;'</span> test.txt//-v设置变量</span><br></pre></td></tr></table></figure><h4 id="过滤第一列大于2并且第三列等于’test’的行"><a href="#过滤第一列大于2并且第三列等于’test’的行" class="headerlink" title="过滤第一列大于2并且第三列等于’test’的行"></a>过滤第一列大于2并且第三列等于’test’的行</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'$1&gt;2 &amp;&amp; $3="test" &#123;print $1, $2, $3&#125;'</span> test.txt</span><br></pre></td></tr></table></figure><h4 id="整行中匹配test内容"><a href="#整行中匹配test内容" class="headerlink" title="整行中匹配test内容"></a>整行中匹配test内容</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat find.txt | awk <span class="string">'/test/&#123;print $1&#125;'</span></span><br></pre></td></tr></table></figure><h4 id="将目录下的-md文件批量修改为-txt"><a href="#将目录下的-md文件批量修改为-txt" class="headerlink" title="将目录下的.md文件批量修改为.txt"></a>将目录下的.md文件批量修改为.txt</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls *.md | awk -F. <span class="string">'&#123;print "mv "$1"."$2" "$1".txt"&#125;'</span> | sh</span><br></pre></td></tr></table></figure><h4 id="查看文件的总行数"><a href="#查看文件的总行数" class="headerlink" title="查看文件的总行数"></a>查看文件的总行数</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'END&#123;print NR&#125;'</span> find.txt</span><br></pre></td></tr></table></figure><h4 id="统计访问IP的次数"><a href="#统计访问IP的次数" class="headerlink" title="统计访问IP的次数"></a>统计访问IP的次数</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'&#123;a[$1]++&#125; END&#123;for(v in a)print v,a[v]&#125;'</span> access.log</span><br></pre></td></tr></table></figure><h4 id="统计访问次数大于1次的IP"><a href="#统计访问次数大于1次的IP" class="headerlink" title="统计访问次数大于1次的IP"></a>统计访问次数大于1次的IP</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'&#123;a[$1]++&#125; END&#123;for(v in a)&#123;if(a[v]&gt;1) print v,a[v]&#125;&#125;'</span> access.log</span><br></pre></td></tr></table></figure><h4 id="按访问次数排序取前3"><a href="#按访问次数排序取前3" class="headerlink" title="按访问次数排序取前3"></a>按访问次数排序取前3</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'&#123;a[$1]++&#125; END&#123;for(v in a) print v,a[v] | "sort -k2 -nr | head -3"&#125;'</span> access.log</span><br></pre></td></tr></table></figure><h4 id="统计返回的HTTP状态码"><a href="#统计返回的HTTP状态码" class="headerlink" title="统计返回的HTTP状态码"></a>统计返回的HTTP状态码</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'&#123;a[$1" "$9]++&#125; END&#123;for(v in a) print v&#125;'</span> access.log</span><br></pre></td></tr></table></figure><h4 id="统计404次数"><a href="#统计404次数" class="headerlink" title="统计404次数"></a>统计404次数</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk -v CNT=0 <span class="string">'&#123;if($9==404) CNT++&#125; END&#123;print $9,CNT&#125;'</span> access.log</span><br></pre></td></tr></table></figure><h2 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h2><blockquote><p>文本查找工具。</p></blockquote><h3 id="工作原理-2"><a href="#工作原理-2" class="headerlink" title="工作原理"></a>工作原理</h3><blockquote><ol><li>将一行文本读取到 模式空间</li><li>根据指定的正则，搜索该行的文本，看是否有匹配的内容</li><li>如果，整行一次匹配都没有，删除并读入下一行</li><li>如果匹配成功，则打印改行并读入下一行</li></ol></blockquote><h3 id="命令格式-2"><a href="#命令格式-2" class="headerlink" title="命令格式"></a>命令格式</h3><blockquote><p>grep [选项] 模式 文件名</p></blockquote><h4 id="常见命令选项-2"><a href="#常见命令选项-2" class="headerlink" title="常见命令选项"></a>常见命令选项</h4><blockquote><p>c    仅列出文件中包含模式的行数</p></blockquote><blockquote><p>i    忽略模式中字母的大小写</p></blockquote><blockquote><p>l    列出带有匹配行的文件名</p></blockquote><blockquote><p>n    在每一行的最前面列出行号</p></blockquote><blockquote><p>v    列出没有匹配模式的行</p></blockquote><blockquote><p>w    把表达式当作一个完整的单字符搜索，忽略那些部分匹配的行</p></blockquote><h3 id="实际应用-2"><a href="#实际应用-2" class="headerlink" title="实际应用"></a>实际应用</h3><h4 id="找出文件中包含test的所有行"><a href="#找出文件中包含test的所有行" class="headerlink" title="找出文件中包含test的所有行"></a>找出文件中包含test的所有行</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="built_in">test</span> find.txt</span><br><span class="line">grep ^test2 find.txt//找出以test2开头的行</span><br><span class="line">grep <span class="string">'[0-9]'</span> find.txt//过滤出所有包含数字的行</span><br></pre></td></tr></table></figure><h4 id="只输出包含test的总行数"><a href="#只输出包含test的总行数" class="headerlink" title="只输出包含test的总行数"></a>只输出包含test的总行数</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -c <span class="built_in">test</span> find.txt</span><br></pre></td></tr></table></figure><h4 id="去除所有空行和以’-’开头的行"><a href="#去除所有空行和以’-’开头的行" class="headerlink" title="去除所有空行和以’#’开头的行"></a>去除所有空行和以’#’开头的行</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -v <span class="string">'^#'</span> /etc/crontab | grep -v <span class="string">'^$'</span></span><br></pre></td></tr></table></figure><h2 id="综合应用"><a href="#综合应用" class="headerlink" title="综合应用"></a>综合应用</h2><h3 id="打印乘法口诀"><a href="#打印乘法口诀" class="headerlink" title="打印乘法口诀"></a>打印乘法口诀</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">seq 9 | sed <span class="string">'H;g'</span> | awk -v RS=<span class="string">''</span> <span class="string">'&#123;for(i=1;i&lt;=NF;i++)printf("%dx%d=%d%s", i, NR, i*NR, i==NR?"\n":"\t")&#125;'</span></span><br></pre></td></tr></table></figure><h3 id="输出多个路径下的文件-全路径"><a href="#输出多个路径下的文件-全路径" class="headerlink" title="输出多个路径下的文件(全路径)"></a>输出多个路径下的文件(全路径)</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> -e <span class="string">"/usr/gooparts/batch/ranking/BACK\n/usr/gooparts/htdocs/common/img/BACK"</span> | awk <span class="string">'&#123;cmd="p="$1" &amp;&amp; (ls -al $p | sed s#.*[[:space:]]#$p/#)";system(cmd); &#125;'</span> | grep -v <span class="string">'\.\.$'</span> | grep -v <span class="string">'\.$'</span></span><br></pre></td></tr></table></figure><h3 id="删除文件中的空行"><a href="#删除文件中的空行" class="headerlink" title="删除文件中的空行"></a>删除文件中的空行</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">'/^[  ]*$/d'</span> 27155_back_dir.txt</span><br></pre></td></tr></table></figure><h3 id="删除以一-二-三个数字结尾，输出”-XXX-XXX”的行"><a href="#删除以一-二-三个数字结尾，输出”-XXX-XXX”的行" class="headerlink" title="删除以一/二/三个数字结尾，输出”/XXX.XXX”的行"></a>删除以一/二/三个数字结尾，输出”/XXX.XXX”的行</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat 27155_back_dir.txt | grep -v <span class="string">'.*/[0-9]$'</span> | grep -v <span class="string">'.*/[0-9][0-9]$'</span> | grep -v <span class="string">'.*/[0-9][0-9][0-9]$'</span> | grep <span class="string">'.*/.*\..*'</span></span><br></pre></td></tr></table></figure><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="AWK"><a href="#AWK" class="headerlink" title="AWK"></a><a href="https://man.linuxde.net/awk" target="_blank" rel="noopener">AWK</a></h3><h3 id="wiki-sed"><a href="#wiki-sed" class="headerlink" title="wiki-sed"></a><a href="https://zh.wikipedia.org/wiki/Sed" target="_blank" rel="noopener">wiki-sed</a></h3><h3 id="sed推箱子源码"><a href="#sed推箱子源码" class="headerlink" title="sed推箱子源码"></a><a href="https://github.com/aureliojargas/sokoban.sed" target="_blank" rel="noopener">sed推箱子源码</a></h3><h3 id="AWK经典应用"><a href="#AWK经典应用" class="headerlink" title="AWK经典应用"></a><a href="https://www.cnblogs.com/linuxprobe/p/11387906.html" target="_blank" rel="noopener">AWK经典应用</a></h3><h3 id="access-log"><a href="#access-log" class="headerlink" title="access.log"></a>access.log</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">123.59.146.153 - - [5&#x2F;Sep&#x2F;2017:06:10:14 +0800] &quot;USER test +iw test :Test Wuz Here&quot; 400 173 &quot;-&quot; &quot;-&quot; &quot;-&quot;</span><br><span class="line">182.138.215.168 - - [8&#x2F;Sep&#x2F;2017:13:54:26 +0800] &quot;GET http:&#x2F;&#x2F;dongtaiwang.com&#x2F; HTTP&#x2F;1.1&quot; 200 3700 &quot;-&quot; &quot;Mozilla&#x2F;5.0 (Windows NT 10.0; WOW64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;45.0.2454.101 Safari&#x2F;537.36&quot; &quot;-&quot;</span><br><span class="line">182.138.215.127 - - [11&#x2F;Sep&#x2F;2017:13:54:26 +0800] &quot;CONNECT www.voanews.com:443 HTTP&#x2F;1.1&quot; 400 173 &quot;-&quot; &quot;-&quot; &quot;-&quot;</span><br><span class="line">104.192.74.12 - - [3&#x2F;Sep&#x2F;2017:14:39:05 +0800] &quot;GET &#x2F;robots.txt HTTP&#x2F;1.1&quot; 404 3650 &quot;http:&#x2F;&#x2F;www.lishuoshuo.xyz&#x2F;robots.txt&quot; &quot;Mozilla&#x2F;5.0 (Windows NT 6.1; WOW64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;39.0.2171.95 Safari&#x2F;537.36&quot; &quot;-&quot;</span><br><span class="line">123.59.146.153 - - [21&#x2F;Sep&#x2F;2017:14:39:05 +0800] &quot;GET &#x2F;robots.txt HTTP&#x2F;1.1&quot; 404 3650 &quot;http:&#x2F;&#x2F;www.lishuoshuo.xyz&#x2F;robots.txt&quot; &quot;Mozilla&#x2F;5.0 (Windows NT 6.1; WOW64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;39.0.2171.95 Safari&#x2F;537.36&quot; &quot;-&quot;</span><br><span class="line">123.19.146.98 - - [21&#x2F;Sep&#x2F;2017:14:39:05 +0800] &quot;GET &#x2F;robots.txt HTTP&#x2F;1.1&quot; 404 3650 &quot;http:&#x2F;&#x2F;www.lishuoshuo.xyz&#x2F;robots.txt&quot; &quot;Mozilla&#x2F;5.0 (Windows NT 6.1; WOW64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;39.0.2171.95 Safari&#x2F;537.36&quot; &quot;-&quot;</span><br><span class="line">82.138.1.17 - - [325&#x2F;Sep&#x2F;2019:13:54:26 +0800] &quot;CONNECT www.voanews.com:443 HTTP&#x2F;1.1&quot; 400 173 &quot;-&quot; &quot;-&quot; &quot;-&quot;</span><br></pre></td></tr></table></figure><h3 id="awk项目使用"><a href="#awk项目使用" class="headerlink" title="awk项目使用"></a>awk项目使用</h3><blockquote><p>略</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux文本处理 </tag>
            
            <tag> sed </tag>
            
            <tag> awk </tag>
            
            <tag> grep </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql主从同步部署</title>
      <link href="/2020/03/21/Mysql%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5%E9%83%A8%E7%BD%B2/"/>
      <url>/2020/03/21/Mysql%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ol><li>服务器</li></ol><blockquote><p>4核16G Centos7.2</p><p>IP: 47.113.91.11</p><p>IP: 47.113.87.12</p></blockquote><ol><li>mysql二进制安装包</li></ol><blockquote><p>mysql-5.6.46-linux-glibc2.12-x86_64.tar.gz</p><p>url：<a href="https://cdn.mysql.com//Downloads/MySQL-5.6/mysql-5.6.46-linux-glibc2.12-x86_64.tar.gz" target="_blank" rel="noopener">https://cdn.mysql.com//Downloads/MySQL-5.6/mysql-5.6.46-linux-glibc2.12-x86_64.tar.gz</a></p></blockquote><ol><li>依赖包安装</li></ol><blockquote><p>yum -y install autoconf</p></blockquote><h2 id="主从服务器安装Mysql"><a href="#主从服务器安装Mysql" class="headerlink" title="主从服务器安装Mysql"></a>主从服务器安装Mysql</h2><h3 id="卸载老版本Mysql"><a href="#卸载老版本Mysql" class="headerlink" title="卸载老版本Mysql"></a>卸载老版本Mysql</h3><ol><li>删除mysql相关的文件</li></ol><blockquote><p>find / -name mysql</p><p>rm -rf mysql文件路径</p></blockquote><h3 id="解压mysql二进制包到安装目录"><a href="#解压mysql二进制包到安装目录" class="headerlink" title="解压mysql二进制包到安装目录"></a>解压mysql二进制包到安装目录</h3><blockquote><p>mkdir /usr/local/mysql</p><p>tar -zxvf mysql-5.6.46-linux-glibc2.12-x86_64.tar.gz -C /usr/local/mysql</p><p>mv /usr/local/mysql/mysql-5.6.46-linux-glibc2.12-x86_64 /usr/local/mysql/mysql-5.6.46</p></blockquote><h3 id="添加Mysql用户组和Mysql用户"><a href="#添加Mysql用户组和Mysql用户" class="headerlink" title="添加Mysql用户组和Mysql用户"></a>添加Mysql用户组和Mysql用户</h3><ol><li>先检查是否有msyql用户组</li></ol><blockquote><p>groups mysql</p></blockquote><ol><li>有则跳过，没有则添加用户和用户组</li></ol><blockquote><p>groupadd mysql</p><p>useradd -r -g mysql mysql</p></blockquote><h3 id="更改mysql安装目录权限"><a href="#更改mysql安装目录权限" class="headerlink" title="更改mysql安装目录权限"></a>更改mysql安装目录权限</h3><blockquote><p>cd /usr/local/mysql/mysql-5.6.46</p><p>chown -R mysql:mysql ./</p></blockquote><h3 id="Mysql安装"><a href="#Mysql安装" class="headerlink" title="Mysql安装"></a>Mysql安装</h3><ol><li>执行安装脚本</li></ol><blockquote><p>./scripts/mysql_install_db –user=mysql</p></blockquote><ol><li>更改安装脚本文件拥有者</li></ol><blockquote><p>chmod -R root:root ./</p></blockquote><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><ol><li>Mysql默认配置文件是/etc/my.cnf，修改/etc/my.cnf文件：</li></ol><blockquote><p>[mysqld]</p><p>basedir=/usr/local/mysql/mysql-5.6.46 datadir=/usr/local/mysql/mysql-5.6.46/data</p><p>socket=/data/mysql/mysql.sock</p><p>[mysqld_safe]</p><p>log-error=/data/mysql/log/mysql_error.log</p><p>pid-file=/data/mysql/pid/mysql.pid</p></blockquote><ol><li>注：修改/etc/my.cnf后重新执行安装脚本才能启动mysql</li></ol><h3 id="更改Mysql密码"><a href="#更改Mysql密码" class="headerlink" title="更改Mysql密码"></a>更改Mysql密码</h3><ol><li>启动Mysql</li></ol><blockquote><p>./support-files/mysql.server start</p></blockquote><ol><li>更改Mysql密码</li></ol><blockquote><p>./bin/mysqladmin -u root -h localhost.localdomain password ‘密码’</p></blockquote><ol><li>登录Mysql</li></ol><blockquote><p>./bin/mysql -h 127.0.0.1 -uroot -p</p></blockquote><h3 id="增加远程登录权限"><a href="#增加远程登录权限" class="headerlink" title="增加远程登录权限"></a>增加远程登录权限</h3><ol><li>进入Mysql后执行：</li></ol><blockquote><p>grant all privileges on <em>.</em> to root@’%’ identified by ‘root’;</p><p>flush privileges;</p></blockquote><h3 id="将Mysql加入系统服务"><a href="#将Mysql加入系统服务" class="headerlink" title="将Mysql加入系统服务"></a>将Mysql加入系统服务</h3><blockquote><p>cp support-files/mysql.server /etc/init.d/mysqld</p><p>chkconfig –add mysqld</p><p>chkconfig mysqld on</p><p>service mysqld restart</p><p>service mysqld status</p></blockquote><h3 id="配置Mysql配置文件"><a href="#配置Mysql配置文件" class="headerlink" title="配置Mysql配置文件"></a>配置Mysql配置文件</h3><ol><li>编辑my.cnf</li></ol><blockquote><p>character-set-server=utf8 lower_case_table_names=1 max_allowed_packet=100M</p></blockquote><h2 id="Mysql主从同步配置"><a href="#Mysql主从同步配置" class="headerlink" title="Mysql主从同步配置"></a>Mysql主从同步配置</h2><blockquote><p>Master: 172.18.142.226</p><p>Slaver :172.18.142.225</p></blockquote><h3 id="设置Master的bin-log文件"><a href="#设置Master的bin-log文件" class="headerlink" title="设置Master的bin-log文件"></a>设置Master的bin-log文件</h3><ol><li>编辑/etc/my.cnf，在[mysqld]中加入下面配置，开启binlog功能</li></ol><blockquote><p>server-id=1 log-bin=/usr/local/mysql/mysql-5.6.46/mysql-bin.log</p><p>binlog-ignore-db=mysql binlog-do-db=test</p><p>binlog_cache_size=1M binlog_format=mixed expire_logs_days=3</p></blockquote><ol><li>重启mysql服务</li></ol><blockquote><p>service mysqld restart</p></blockquote><h3 id="创建复制帐号"><a href="#创建复制帐号" class="headerlink" title="创建复制帐号"></a>创建复制帐号</h3><blockquote><p>这个帐号必须具有 replication slave 的权限，可以为不同从库创建不同帐号，也可以使用统一帐号</p></blockquote><ol><li>进入Master的Mysql服务，创建replicate帐号</li></ol><blockquote><p>GRANT REPLICATION SLAVE ON <em>.</em> TO ‘replicate’@’%’ identified by ‘replicate’;</p><p>FLUSH PRIVILEGES;</p></blockquote><ol><li>获取Master二进制日志信息</li></ol><blockquote><p>FLUSH TABLES WITH READ LOCK;</p><p>SHOW MASTER STATUS;</p><p>UNLOCK TABLES;</p></blockquote><h3 id="对现有数据库文件备份"><a href="#对现有数据库文件备份" class="headerlink" title="对现有数据库文件备份"></a>对现有数据库文件备份</h3><ol><li>对Master上的数据执行mysqldump命令备份导出；</li><li>将备份的文件导入到Slaver中；</li></ol><h3 id="修改Slaver的-etc-my-cnf文件"><a href="#修改Slaver的-etc-my-cnf文件" class="headerlink" title="修改Slaver的/etc/my.cnf文件"></a>修改Slaver的/etc/my.cnf文件</h3><blockquote><p>server-id=2 relay-log=/usr/local/mysql/mysql-5.6.46/mysql-relay-bin relay-log-index=/usr/local/mysql/mysql-5.6.46/mysql-relay-bin.index read-only=1</p></blockquote><h3 id="配置Slaver连接Master进行数据同步"><a href="#配置Slaver连接Master进行数据同步" class="headerlink" title="配置Slaver连接Master进行数据同步"></a>配置Slaver连接Master进行数据同步</h3><ol><li>进入到Slaver的mysql服务，指定主机、用户名、密码、log文件、log位置</li></ol><blockquote><p>mysql&gt; CHANGE MASTER TO</p><p>​        -&gt; MASTER_HOST=’192.168.42.129’,</p><p>​        -&gt; MASTER_USER=’replicate’,</p><p>​        -&gt; MASTER_PASSWORD=’replicate’,</p><p>​        -&gt; MASTER_LOG_FILE=’replicate-bin.000001’,        ## 这个值是master status中的File值</p><p>​        -&gt; MASTER_LOG_POS=xxx;        ## xxx是master status中的Position值</p></blockquote><ol><li>开启同步，查看同步状态</li></ol><blockquote><p>Slave_IO_Running: Yes    Slave_SQL_Running: Yes        表示同步正在进行</p></blockquote><blockquote><p>START SLAVE;        开启同步</p><p>SHOW SLAVE STATUS \G        查看同步状态</p></blockquote><h3 id="关闭主从同步"><a href="#关闭主从同步" class="headerlink" title="关闭主从同步"></a>关闭主从同步</h3><ol><li>在Slave上停止主从同步</li></ol><blockquote><p>stop slave;</p></blockquote><ol><li>重置Slave信息</li></ol><blockquote><p>reset slave;        # 清除binlog文件及位置</p><p>reset slave all;        #清除slave的连接配置信息</p></blockquote><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="Mysql主从同步原理："><a href="#Mysql主从同步原理：" class="headerlink" title="Mysql主从同步原理："></a>Mysql主从同步原理：</h3><p>MySQL 的主从同步是一个异步复制的过程，其原理如下</p><blockquote><ol><li>Master 在执行完SQL 语句后，将相关的语句记录到binlog 文件中。</li><li>Slave 从Master 获取binlog 文件，并存于本地relay-log 文件中，然后读取master.info 文件，从上次同步时的position位置开始执行SQL 语句。</li></ol></blockquote><p>整个过程如下，主要由Master I/O 线程、Slave I/O 线程和Slave SQL 线程参与完成。</p><blockquote><ol><li>在Slave 上执行start slave，开启主从同步。</li><li>Slave I/O 线程通过Master 上的授权用户连接Master，并请求从指定的binlog 文件及位置开始的日志内容。</li><li>Master 接收到请求后，通过Master I/O 线程读取指定的binlog 内容并返回给Slave I/O 线程。同时返回本次读取的binlog 文件名及位置。</li><li>Slave I/O 线程将binlog 内容依次写入本地的relay-log 文件，并更新master.info 文件中的binlog 文件名和位置。</li><li>Slave SQL 线程实时检测本地relay-log 中新增的内容，解析成SQL 语句后在Slave 上顺序执行。</li><li>由此完成了从Master 到Slave 的基于SQL 执行语句的数据同步，确保数据的一致性。</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> 主从同步 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件编码</title>
      <link href="/2020/03/21/%E6%96%87%E4%BB%B6%E7%BC%96%E7%A0%81/"/>
      <url>/2020/03/21/%E6%96%87%E4%BB%B6%E7%BC%96%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><h3 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h3><h4 id="字符集是什么"><a href="#字符集是什么" class="headerlink" title="字符集是什么"></a>字符集是什么</h4><blockquote><p>字符是各种文字和符号的总称，包括国家文字、标点符号、图形符号、数字等。字符集是字符的集合。</p></blockquote><blockquote><p>​    虽然我们平时在计算机屏幕上看到的是实体化的汉字，但实际上在计算机存储介质中是按照01001这样的二进制流来存储的。</p><p>​    那么为了实现01二进制到实体化汉字的转换，就需要一个统一的转换标准。这种标准就是字符集标准（字符集）。</p></blockquote><blockquote><p>Q：为什么会有那么多的字符集标准呢？</p><p>A：很多规范和标准在最初制定时并没有意识到需要全球普适，于是，就出现了互不兼容的多个标准了</p></blockquote><h4 id="字符集有什么用"><a href="#字符集有什么用" class="headerlink" title="字符集有什么用"></a>字符集有什么用</h4><blockquote><p>字符集规定了 <strong>某个文字</strong> 和 <strong>某串二进制数字</strong>(文字的二进制存放方式) 的转换关系</p></blockquote><h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><blockquote><p>将<strong>字符(汉字)</strong>转换为<strong>字节序列(01二进制序列)</strong></p></blockquote><h3 id="解码"><a href="#解码" class="headerlink" title="解码"></a>解码</h3><blockquote><p>将<strong>字节序列(01二进制序列)</strong>转换为<strong>字符(汉字)</strong></p></blockquote><h3 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h3><blockquote><p>字符集只是一个规则集合的名字，对应到现实生活中，字符集就是某种语言的称谓，如：汉语、英语、日语…</p></blockquote><blockquote><p>对于有所有的字符集规则，要正确编码和解码一个字符，需要三个关键元素：<strong>字库表</strong>、<strong>编码字符集</strong>、 <strong>字符编码</strong></p></blockquote><h4 id="字库表"><a href="#字库表" class="headerlink" title="字库表"></a>字库表</h4><blockquote><p>是一个相当于所有可读或者可显示字符的数据库。字库表决定了可使用的素有字符的范围。</p></blockquote><h4 id="编码字符集"><a href="#编码字符集" class="headerlink" title="编码字符集"></a>编码字符集</h4><blockquote><p>即用一个编码值（code point）表示一个字符在字库中的位置</p></blockquote><h4 id="字符编码-1"><a href="#字符编码-1" class="headerlink" title="字符编码"></a>字符编码</h4><blockquote><p>编码字符集 和 实际存储值 之间的转换关系，一般来说都会直接将 code point 做为编码后的值直接存储的。</p><p>如：在ASCII表中，字符 A 在表中排在65位，而编码后的A的二进制是 01000001 ，转换成十进制也就是65</p></blockquote><h2 id="常用的-编码字符集-和-字符编码"><a href="#常用的-编码字符集-和-字符编码" class="headerlink" title="常用的 编码字符集 和 字符编码"></a>常用的 <strong>编码字符集</strong> 和 <strong>字符编码</strong></h2><h3 id="编码字符集-1"><a href="#编码字符集-1" class="headerlink" title="编码字符集"></a>编码字符集</h3><h4 id="Unicode"><a href="#Unicode" class="headerlink" title="Unicode"></a>Unicode</h4><blockquote><p>Unicode就是概念中提到的编码字符集。</p></blockquote><blockquote><p>随着互联网的发展，对同一字库集的要求越来越迫切，Unicode标准也就随之出现了。</p><p>Unicode字库集几乎涵盖了所有国家语言中出现的符号和问题，并为做了他们编号。</p><p>Unicode的编号从0000开始，一直到10FFFF公分为17个Plan，每个Plan有65535个字符。一些字符编码只是实现了其中的一个或几个Plan，如UTF-8只实现了第一个Plan</p></blockquote><h3 id="字符编码-2"><a href="#字符编码-2" class="headerlink" title="字符编码"></a>字符编码</h3><h4 id="UTF-8"><a href="#UTF-8" class="headerlink" title="UTF-8"></a>UTF-8</h4><blockquote><p>UTF-8就是概念中提到的字符编码，也就是Unicode字库集的一种实现。</p></blockquote><h4 id="ASCII"><a href="#ASCII" class="headerlink" title="ASCII"></a>ASCII</h4><blockquote><p>上世纪60年代，美国制定的一套对英语字符和二进制之间的对应关系。</p></blockquote><blockquote><p>我的理解是ASCII和Unicode是平等的关系。并且ASCII既是编码字符集又是字符编码(单字节字符编码)，ASCII表中的编号是直接存储在计算机中的。而Unicode只是定义了编号(用来和具体实现对应)，需要在实现它的字符编码中具体定义在计算机中存储的值。</p></blockquote><h4 id="GBK-GB2312-GB18030"><a href="#GBK-GB2312-GB18030" class="headerlink" title="GBK/GB2312/GB18030"></a>GBK/GB2312/GB18030</h4><blockquote><p>GB系列是中国国家标准中文字符集</p></blockquote><h4 id="EUC-JP"><a href="#EUC-JP" class="headerlink" title="EUC-JP"></a>EUC-JP</h4><blockquote><p>日本国家标准字符集</p></blockquote><h4 id="注："><a href="#注：" class="headerlink" title="注："></a>注：</h4><blockquote><p>ASCII、GB系列、EUC-JP既是编码字符集又是字符编码，即这些字符集中的编号可以直接存储到计算机中。</p></blockquote><blockquote><p>Unicode是为了统一所有国家的字符而制定的字符集，UTF-8是Unicode的实现之一。Unicode中的编号不能直接存储到计算机中，而是用来和UTF-8对应，UTF-8中的编码才是存储到计算机中的，这和ASCII、GB系列、EUC-JP的不同。</p></blockquote><blockquote><p>所以，GBK、EUC-JP和UTF-8的转换都需要通过Unicode，即：</p><p>GBK 转 UTF-8 ： GBK -&gt; Unicode -&gt; UTF-8</p><p>UTF-8 转 GBK：UTF-8 -&gt; Unicode -&gt; GBK</p></blockquote><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="为什么出现乱码"><a href="#为什么出现乱码" class="headerlink" title="为什么出现乱码"></a>为什么出现乱码</h3><blockquote><p>简单来说，出现乱码原因是编码和解码时用了不同或者不兼容的字符集</p></blockquote><blockquote><p>比如：</p><p>​        「中国」两个字用UTF-8编码后为下面（可用附录中在线转换工具），所以在计算机中存储的是E4B8ADE59BBD的二进制值</p></blockquote><table><thead><tr><th align="left"><strong>字符</strong></th><th align="left"><strong>编码10进制</strong></th><th align="left"><strong>编码16进制</strong></th><th align="left"><strong>Unicode编码10进制</strong></th><th align="left"><strong>Unicode编码16进制</strong></th></tr></thead><tbody><tr><td align="left">中</td><td align="left">14989485</td><td align="left">E4B8AD</td><td align="left">20013</td><td align="left">4E2D</td></tr><tr><td align="left">国</td><td align="left">15047613</td><td align="left">E59BBD</td><td align="left">22269</td><td align="left">56FD</td></tr></tbody></table><blockquote><p>然后，在解码的时候用GBK解码，就会出现乱码的情况</p></blockquote><h3 id="乱码转换"><a href="#乱码转换" class="headerlink" title="乱码转换"></a>乱码转换</h3><ul><li>在已知页面编码的情况下，把乱码通过在线工具，编码成计算机中存储的二进制码</li><li>在得到二进制码的情况下，按照各类字符编码的规则，猜测原来的编码方式</li><li>按照猜测的编码方式，将二进制码解码出来</li></ul><h2 id="Linux编码操作"><a href="#Linux编码操作" class="headerlink" title="Linux编码操作"></a>Linux编码操作</h2><h3 id="locale"><a href="#locale" class="headerlink" title="locale"></a>locale</h3><blockquote><p>Linux中的locale是表达程序用户地区方面的软件设定。</p><p>locale的设定包括 数据格式、货币金额格式、小数点符号、千分位符号、度量衡单位、通货符号、日期写法、日历类型、文字排序、姓名格式、地址等等。</p></blockquote><blockquote><ol><li>LANGUAGE 指定个人对语言环境值的主次偏好，例如zh_CN:en_US:en</li><li>LC_ALL 这不是一个环境变量，是一个可被C语言库函数setlocale设置的宏，其值可覆盖所有其他的locale设定。因此缺省时此值为空</li><li>LC_xxx 可设定locale各方面（category）的值，可以覆盖LANG的值。</li><li>LANG 指定默认使用的locale值</li></ol></blockquote><h3 id="file"><a href="#file" class="headerlink" title="file"></a>file</h3><blockquote><p>file -i filename    查看文件的字符集</p></blockquote><h3 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h3><blockquote><p>在vim中使用 :set fileencoding 查看文件编码格式</p></blockquote><h3 id="iconv"><a href="#iconv" class="headerlink" title="iconv"></a>iconv</h3><blockquote><p>Iconv -f encoding -t encoding sourcefile &gt;&gt; output</p></blockquote><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="在线查看字符集-编码关系"><a href="#在线查看字符集-编码关系" class="headerlink" title="在线查看字符集/编码关系"></a><a href="http://www.mytju.com/classcode/tools/encode_utf8.asp" target="_blank" rel="noopener">在线查看字符集/编码关系</a></h3><h3 id="Unicode-1"><a href="#Unicode-1" class="headerlink" title="Unicode"></a><a href="https://en.wikipedia.org/wiki/Unicode" target="_blank" rel="noopener">Unicode</a></h3><h3 id="locale-1"><a href="#locale-1" class="headerlink" title="locale"></a><a href="[https://zh.wikipedia.org/wiki/区域设置](https://zh.wikipedia.org/wiki/区域设置)">locale</a></h3><h3 id="ASCII码表"><a href="#ASCII码表" class="headerlink" title="ASCII码表"></a>ASCII码表</h3><p><img src="https://res.cloudinary.com/tg10020617/image/upload/v1584787379/20190408173150892_w78xlp.jpg" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux字符集 </tag>
            
            <tag> 字符编码 </tag>
            
            <tag> 文件编码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kafka Connect</title>
      <link href="/2020/03/21/Kafka-Connect/"/>
      <url>/2020/03/21/Kafka-Connect/</url>
      
        <content type="html"><![CDATA[<h2 id="Kafka-Connect-介绍（kafka-connect-是什么）"><a href="#Kafka-Connect-介绍（kafka-connect-是什么）" class="headerlink" title="Kafka Connect 介绍（kafka connect 是什么）"></a>Kafka Connect 介绍（kafka connect 是什么）</h2><h3 id="消息中间件"><a href="#消息中间件" class="headerlink" title="消息中间件"></a>消息中间件</h3><blockquote><p>消息中间件是利用高效可靠的消息传递机制进行异步的数据传输，并且可以进行分布式系统的集成。</p><p>消息中间件一般有两种传递模式：</p><ol><li>点对点模式：消息生产者将消息发送到队列中，消息消费者从队列中接收消息。</li><li>发布-订阅模式：该模式通过一个内容节点(topic)发布和订阅消息，消息发布者将消息发布到topic，消息订阅者订阅这个topic的消息。</li></ol></blockquote><h3 id="kafka"><a href="#kafka" class="headerlink" title="kafka"></a>kafka</h3><blockquote><p>kafka是消息中间件的一种。</p><p>kafka可以用于两大类别的应用：</p><ol><li>构建实时流数据管道，它可以在系统和应用之间可靠的获取数据，相当于消息队列。</li><li>构建实时流式应用程序，对这些流数据进行转换和影响，也就是流处理。</li></ol></blockquote><h3 id="kafka-connect介绍"><a href="#kafka-connect介绍" class="headerlink" title="kafka connect介绍"></a>kafka connect介绍</h3><blockquote><p>kafka是linkedin公司的架构师jay kreps，为了解决数据管道问题研发出的消息传递系统。</p><p>kafka connect是由 当时开发出kafka团队的核心成员成立的新公司 Confluent公司开发的confluent platform的核心功能。</p><p>注：kafka0.9及以上版本中已内置kafka connect。</p></blockquote><blockquote><p>kafka connect是一款可扩展并且可靠的在kafka和其他系统之间进行数据传输的工具。</p><p>kafka connect有两个核心概念（他们都称为connector）：</p><ol><li>Source：负责导入数据到kafka。</li><li>Sink：负责从kafka导出数据。</li></ol></blockquote><h2 id="Kafka-Connect优势（Kafka-Connect有什么用）"><a href="#Kafka-Connect优势（Kafka-Connect有什么用）" class="headerlink" title="Kafka Connect优势（Kafka Connect有什么用）"></a>Kafka Connect优势（Kafka Connect有什么用）</h2><h3 id="解决的问题"><a href="#解决的问题" class="headerlink" title="解决的问题"></a>解决的问题</h3><blockquote><p>程序员在构架kafka平台是遇到了下面问题：</p><ol><li>Schema管理</li><li>容错</li><li>并行化</li><li>数据延迟</li><li>分发担保</li><li>运营与监控</li></ol><p>Kafka Connect作为一个统一的框架，在大大减少程序员工作量的基础上，也负责解决上面的问题。</p></blockquote><h2 id="Kafka-Connect主要概念"><a href="#Kafka-Connect主要概念" class="headerlink" title="Kafka Connect主要概念"></a>Kafka Connect主要概念</h2><h3 id="connectors"><a href="#connectors" class="headerlink" title="connectors"></a>connectors</h3><blockquote><p>在kafka connect中，connector决定了数据应该从哪里复制过来已经数据应该写入到哪里去。</p><p>一个connector实例是一个需要负责在kafka和其他系统之间复制数据的逻辑作业。</p></blockquote><h3 id="tasks"><a href="#tasks" class="headerlink" title="tasks"></a>tasks</h3><blockquote><p>task是数据写入kafka和数据从kafka读出的具体实现。</p><p>每一个connector都会协调一系列的task去执行任务，connector可以把一项工作分割成许多的task，然后再把task分发到各个worker中去执行，</p></blockquote><h3 id="workers"><a href="#workers" class="headerlink" title="workers"></a>workers</h3><blockquote><p>运行connectors和tasks的进程。</p><p>connectors和tasks都是逻辑工作单位，必须安排在进程中执行。而在kafka connect中，这些进程就是workers，workers分为两种：</p><ol><li>standalone(单机)：在单机模式下，所有的工作都在一个进程中执行，但这不利于kafka connect的容错。</li><li>distributed(分布式)：提供了可扩展性和自动容错的功能。可以使用group.ip来启动多个worker进程，在有效的进程中，它们会自动协调执行connector和task；如果新增或挂掉了一个worker，其他worker会检测到然后重新分配connector和task。 </li></ol></blockquote><h3 id="converters"><a href="#converters" class="headerlink" title="converters"></a>converters</h3><blockquote><p>converter会把bytes数据转换成kafka connect内部的格式，也可以把kafka connect内部格式转化成bytes。</p></blockquote><h2 id="Kafka-Connect的使用（Kafka-Connect怎么用）"><a href="#Kafka-Connect的使用（Kafka-Connect怎么用）" class="headerlink" title="Kafka Connect的使用（Kafka Connect怎么用）"></a>Kafka Connect的使用（Kafka Connect怎么用）</h2><h3 id="kafka-connect的启动"><a href="#kafka-connect的启动" class="headerlink" title="kafka connect的启动"></a>kafka connect的启动</h3><h4 id="standalone模式"><a href="#standalone模式" class="headerlink" title="standalone模式"></a>standalone模式</h4><blockquote><p>在kafka0.9+版本以上，在kafka的安装目录下执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin&#x2F;connect-standalone.sh config&#x2F;connect-standalone.properties connector1.properties [connector2.properties ...]</span><br></pre></td></tr></table></figure><p>注意：单机模式的connector的配置直接通过命令行传递</p></blockquote><h4 id="distributed模式"><a href="#distributed模式" class="headerlink" title="distributed模式"></a>distributed模式</h4><blockquote><p>在kafka0.9+版本以上，在kafka的安装目录下执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin&#x2F;connect-distributed.sh config&#x2F;connect-distributed.properties</span><br></pre></td></tr></table></figure><p>注意：分布式模式的connector的配置不通过命令行传递。会使用REST API来创建、修改和销毁connector。</p></blockquote><h4 id="config-connect-xxx-properties配置文件"><a href="#config-connect-xxx-properties配置文件" class="headerlink" title="config/connect-xxx.properties配置文件"></a>config/connect-xxx.properties配置文件</h4><h5 id="公共配置文件（单机-amp-分布式都需要的一些配置）"><a href="#公共配置文件（单机-amp-分布式都需要的一些配置）" class="headerlink" title="公共配置文件（单机&amp;分布式都需要的一些配置）"></a>公共配置文件（单机&amp;分布式都需要的一些配置）</h5><blockquote><p>bootstrap.servers：用于连接到Kafka的Kafka服务器列表。</p><p>key.converter：Converter类，用于在Kafka连接格式和写入Kafka的序列化格式之间进行转换。这控制了向Kafka写入或从Kafka读取的消息中键的格式，并且由于这与连接器无关，因此允许任何连接器使用任何序列化格式。常见格式的例子包括JSON和Avro。</p><p>value.converte：Converter类，用于在Kafka连接格式和写入Kafka的序列化格式之间进行转换。这控制了向Kafka写入或从Kafka读取的消息中的值的格式，并且由于这与连接器无关，因此允许任何连接器使用任何序列化格式。常见格式的例子包括JSON和Avro。</p></blockquote><h5 id="standalone模式的重要配置"><a href="#standalone模式的重要配置" class="headerlink" title="standalone模式的重要配置"></a>standalone模式的重要配置</h5><blockquote><p>offset.storage.file.filename：存储 offset 数据的文件。</p><p>注：默认配置是config/server.properties文件。</p></blockquote><h5 id="distributed模式的重要配置"><a href="#distributed模式的重要配置" class="headerlink" title="distributed模式的重要配置"></a>distributed模式的重要配置</h5><blockquote><p>group.id：（默认连接群集）-群集的唯一名称，用于形成连接群集组；请注意，这不能与使用者组ID冲突。</p><p>config.storage.topic：（默认连接配置）-用于存储连接器和任务配置的主题；请注意，这应该是一个单分区、高度复制、压缩的主题。您可能需要手动创建主题以确保正确的配置，因为自动创建的主题可能有多个分区，或者自动配置为删除而不是压缩。</p><p>offset.storage.topic：（默认连接偏移量）-用于存储偏移量的主题；此主题应具有多个分区、被复制并配置为压缩。</p><p>status.storage.topic：（默认连接状态）-用于存储状态的主题；此主题可以有多个分区，应复制并配置为压缩。</p></blockquote><h4 id="自定义connectors"><a href="#自定义connectors" class="headerlink" title="自定义connectors"></a>自定义connectors</h4><h3 id="kafka-connect的查看-amp-管理（REST接口）"><a href="#kafka-connect的查看-amp-管理（REST接口）" class="headerlink" title="kafka connect的查看&amp;管理（REST接口）"></a>kafka connect的查看&amp;管理（REST接口）</h3><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="Kafka-Connect官方中文文档"><a href="#Kafka-Connect官方中文文档" class="headerlink" title="Kafka Connect官方中文文档"></a>Kafka Connect官方中文文档</h3><blockquote><p><a href="http://kafka.apachecn.org/documentation.html#connect" target="_blank" rel="noopener">KAFKA CONNECT</a></p></blockquote><h3 id="Confluent连接器仓库"><a href="#Confluent连接器仓库" class="headerlink" title="Confluent连接器仓库"></a>Confluent连接器仓库</h3><blockquote><p><a href="https://www.confluent.io/hub/" target="_blank" rel="noopener">CONFLUENT HUB</a></p></blockquote><h3 id="Confluent官方文档"><a href="#Confluent官方文档" class="headerlink" title="Confluent官方文档"></a>Confluent官方文档</h3><blockquote><p><a href="https://docs.confluent.io/2.0.0/connect/index.html" target="_blank" rel="noopener">CONFLUENT</a></p></blockquote><h3 id="MongoDB官方Source-Sink配置文件说明"><a href="#MongoDB官方Source-Sink配置文件说明" class="headerlink" title="MongoDB官方Source/Sink配置文件说明"></a>MongoDB官方Source/Sink配置文件说明</h3><blockquote><p><a href="https://docs.mongodb.com/kafka-connector/current/kafka-source/" target="_blank" rel="noopener">Source/Sink</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> MQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kafka </tag>
            
            <tag> kafka connect </tag>
            
            <tag> confluent </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDK 安装</title>
      <link href="/2020/03/21/JDK-%E5%AE%89%E8%A3%85/"/>
      <url>/2020/03/21/JDK-%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h3 id="下载JDK1-8至本地机器"><a href="#下载JDK1-8至本地机器" class="headerlink" title="下载JDK1.8至本地机器"></a>下载JDK1.8至本地机器</h3><blockquote><p>wget + JDK地址</p></blockquote><h3 id="将JDK上传到服务器"><a href="#将JDK上传到服务器" class="headerlink" title="将JDK上传到服务器"></a>将JDK上传到服务器</h3><blockquote><p>rz  选择JDK文件</p></blockquote><h3 id="创建安装目录并将JDK安装到指定目录"><a href="#创建安装目录并将JDK安装到指定目录" class="headerlink" title="创建安装目录并将JDK安装到指定目录"></a>创建安装目录并将JDK安装到指定目录</h3><blockquote><p>mkdir /usr/local/java</p><p>tar -zxvf jdk-8u211-linux-x64.tar.gz -C /usr/local/java/</p></blockquote><h3 id="设置-JAVA-HOME-和-PATH-变量"><a href="#设置-JAVA-HOME-和-PATH-变量" class="headerlink" title="设置 JAVA_HOME 和 PATH 变量"></a>设置 JAVA_HOME 和 PATH 变量</h3><blockquote><p>vim /etc/profile</p><p>将下面几行插入到profile文件末尾：</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;java&#x2F;jdk1.8.0_211</span><br><span class="line">export JRE_HOME&#x3D;$&#123;JAVA_HOME&#125;&#x2F;jre</span><br><span class="line">export CLASSPATH&#x3D;.:$&#123;JAVA_HOME&#125;&#x2F;lib:$&#123;JRE_HOME&#125;&#x2F;lib</span><br><span class="line">export PATH&#x3D;$&#123;JAVA_HOME&#125;&#x2F;bin:$PATH</span><br></pre></td></tr></table></figure></blockquote></blockquote><h3 id="重新加载-profile"><a href="#重新加载-profile" class="headerlink" title="重新加载 profile"></a>重新加载 profile</h3><blockquote><p>source /etc/profile</p></blockquote><h3 id="将-java-命令加入系统"><a href="#将-java-命令加入系统" class="headerlink" title="将 java 命令加入系统"></a>将 java 命令加入系统</h3><blockquote><p>ln -s /usr/local/java/jdk1.8.0_211/bin/java /usr/bin/java</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jdk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker安装（Centos）</title>
      <link href="/2020/03/21/Docker%E5%AE%89%E8%A3%85%EF%BC%88Centos%EF%BC%89/"/>
      <url>/2020/03/21/Docker%E5%AE%89%E8%A3%85%EF%BC%88Centos%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h2><h3 id="卸载旧版本"><a href="#卸载旧版本" class="headerlink" title="卸载旧版本"></a>卸载旧版本</h3><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum remove docker \</span><br><span class="line">               docker-client \</span><br><span class="line">               docker-client-latest \</span><br><span class="line">               docker-common \</span><br><span class="line">               docker-latest \</span><br><span class="line">               docker-latest-logrotate \</span><br><span class="line">               docker-logrotate \</span><br><span class="line">               docker-engine</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>Docker 安装有三种方式：</p><ol><li>使用repository安装；</li><li>下载RPM包手动安装；</li><li>使用 <a href="https://get.docker.com" target="_blank" rel="noopener">https://get.docker.com</a> 的get-docker.sh脚本安装；</li></ol><p>官方推荐使用第一种方式安装</p></blockquote><h3 id="安装需要的软件包"><a href="#安装需要的软件包" class="headerlink" title="安装需要的软件包"></a>安装需要的软件包</h3><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install -y yum-utils \</span><br><span class="line">device-mapper-persistent-data \</span><br><span class="line">lvm2</span><br></pre></td></tr></table></figure></blockquote><h3 id="设置存储库"><a href="#设置存储库" class="headerlink" title="设置存储库"></a>设置存储库</h3><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum-config-manager \</span><br><span class="line"> --add-repo \</span><br><span class="line"> http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo</span><br></pre></td></tr></table></figure></blockquote><h3 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h3><h4 id="1-安装最新版本的Docker"><a href="#1-安装最新版本的Docker" class="headerlink" title="1. 安装最新版本的Docker"></a>1. 安装最新版本的Docker</h4><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure></blockquote><h4 id="2-或者安装特定版本的Docker"><a href="#2-或者安装特定版本的Docker" class="headerlink" title="2. 或者安装特定版本的Docker"></a>2. 或者安装特定版本的Docker</h4><h5 id="列出可用版本"><a href="#列出可用版本" class="headerlink" title="列出可用版本"></a>列出可用版本</h5><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ yum list docker-ce --showduplicates | sort -r</span><br><span class="line"></span><br><span class="line">docker-ce.x86_64  3:18.09.1-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64  3:18.09.0-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64  18.06.1.ce-3.el7                    docker-ce-stable</span><br><span class="line">docker-ce.x86_64  18.06.0.ce-3.el7                    docker-ce-stable</span><br></pre></td></tr></table></figure></blockquote><h5 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h5><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install -y docker-ce-18.06.1.ce docker-ce-cli-18.09.1 containerd.io</span><br></pre></td></tr></table></figure></blockquote><h3 id="启动Docker"><a href="#启动Docker" class="headerlink" title="启动Docker"></a>启动Docker</h3><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl start docker</span><br></pre></td></tr></table></figure></blockquote><h2 id="Docker-Compose安装"><a href="#Docker-Compose安装" class="headerlink" title="Docker Compose安装"></a>Docker Compose安装</h2><h3 id="按照github-releases中对应版本，根据Docker版本安装相应的Compose"><a href="#按照github-releases中对应版本，根据Docker版本安装相应的Compose" class="headerlink" title="按照github releases中对应版本，根据Docker版本安装相应的Compose"></a>按照github releases中对应版本，根据Docker版本安装相应的Compose</h3><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L https:&#x2F;&#x2F;github.com&#x2F;docker&#x2F;compose&#x2F;releases&#x2F;download&#x2F;1.25.3&#x2F;docker-compose-&#96;uname -s&#96;-&#96;uname -m&#96; -o &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose</span><br></pre></td></tr></table></figure></blockquote><h3 id="添加可执行权限"><a href="#添加可执行权限" class="headerlink" title="添加可执行权限"></a>添加可执行权限</h3><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose</span><br></pre></td></tr></table></figure></blockquote><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="Docker安装官方教程"><a href="#Docker安装官方教程" class="headerlink" title="Docker安装官方教程"></a>Docker安装官方教程</h3><blockquote><p><a href="https://docs.docker.com/install/linux/docker-ce/centos/" target="_blank" rel="noopener">    DOCKER</a></p></blockquote><h3 id="Docker-Compose安装官方教程"><a href="#Docker-Compose安装官方教程" class="headerlink" title="Docker Compose安装官方教程"></a>Docker Compose安装官方教程</h3><blockquote><p><a href="https://docs.docker.com/compose/install/" target="_blank" rel="noopener">DOCKER COMPOSE</a></p></blockquote><h3 id="Docker-Compose-github-Releases"><a href="#Docker-Compose-github-Releases" class="headerlink" title="Docker Compose github Releases"></a>Docker Compose github Releases</h3><blockquote><p><a href="https://github.com/docker/compose/releases" target="_blank" rel="noopener">COMPOSE RELEASES</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> dockerfile </tag>
            
            <tag> docker compose </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSERVICE命令</title>
      <link href="/2020/03/21/CSERVICE%E5%91%BD%E4%BB%A4/"/>
      <url>/2020/03/21/CSERVICE%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><h3 id="容器IP"><a href="#容器IP" class="headerlink" title="容器IP"></a>容器IP</h3><blockquote><p>docker inspect 容器ID | grep IPAddr</p><p>eg: <code>docker inspect 5941fb0c8204|grep IPAddr</code></p></blockquote><h3 id="宿主-容器文件拷贝"><a href="#宿主-容器文件拷贝" class="headerlink" title="宿主/容器文件拷贝"></a>宿主/容器文件拷贝</h3><h4 id="宿主机-gt-容器"><a href="#宿主机-gt-容器" class="headerlink" title="宿主机 =&gt; 容器"></a>宿主机 =&gt; 容器</h4><blockquote><p>docker cp 宿主机文件目录位置 容器名称:容器目录位置</p><p>eg: <code>docker cp ./test.txt cservice-kafka-1:/opt/kafka</code></p></blockquote><h4 id="容器-gt-宿主机"><a href="#容器-gt-宿主机" class="headerlink" title="容器 =&gt; 宿主机"></a>容器 =&gt; 宿主机</h4><blockquote><p>docker cp 容器名称:容器文件目录位置 宿主机文件目录位置</p><p>eg: <code>docker cp cservice-kafka-1:/opt/kafka /User/tangguoqiang</code></p></blockquote><h3 id="root用户启动容器（root用户启动后passwd修改root密码）"><a href="#root用户启动容器（root用户启动后passwd修改root密码）" class="headerlink" title="root用户启动容器（root用户启动后passwd修改root密码）"></a>root用户启动容器（root用户启动后passwd修改root密码）</h3><blockquote><p>docker exec -it -u root 容器名 /bin/bash</p><p>eg: <code>docker exec -it -u root cservice-jenkins-1 /bin/bash</code></p></blockquote><h3 id="查看docker启动日志"><a href="#查看docker启动日志" class="headerlink" title="查看docker启动日志"></a>查看docker启动日志</h3><blockquote><p>实时加载的日志信息：docker logs -f –tail=200 容器ID</p><p>eg: <code>docker logs -f --tail=200 9166c619e12f</code></p></blockquote><h2 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a>Zookeeper</h2><h2 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h2><h3 id="Kafka-topic"><a href="#Kafka-topic" class="headerlink" title="Kafka topic"></a>Kafka topic</h3><h4 id="Kafka-topics-list"><a href="#Kafka-topics-list" class="headerlink" title="Kafka topics list"></a>Kafka topics list</h4><blockquote><p>eg: <code>kafka-topics.sh --zookeeper cservice-zookeeper-1:2181 --list</code></p></blockquote><h4 id="Kafka-topic内容"><a href="#Kafka-topic内容" class="headerlink" title="Kafka topic内容"></a>Kafka topic内容</h4><blockquote><p>eg: <code>bin/kafka-console-consumer.sh --bootstrap-server cservice-kafka-1:9092 --topic test --from-beginning</code></p></blockquote><h3 id="Kafka-connect-启动"><a href="#Kafka-connect-启动" class="headerlink" title="Kafka connect 启动"></a>Kafka connect 启动</h3><h4 id="standalone模式"><a href="#standalone模式" class="headerlink" title="standalone模式"></a>standalone模式</h4><blockquote><p>connect-standalone.sh standalone配置文件 Sources配置文件 Sink配置文件 </p><p>eg: <code>bin/connect-standalone.sh config/connect-standalone.properties config/connect-file-source.properties config/connect-file-sink.properties</code></p></blockquote><h4 id="distributed模式"><a href="#distributed模式" class="headerlink" title="distributed模式"></a>distributed模式</h4><blockquote><p>connect-distributed.sh distributed配置文件</p><p>eg: <code>bin/connect-distributed.sh config/connect-distributed.properties</code></p></blockquote><h2 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h2><h3 id="导入-导出数据"><a href="#导入-导出数据" class="headerlink" title="导入/导出数据"></a>导入/导出数据</h3><h4 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h4><blockquote><p>mongodump –host 172.18.142.225 –port 27018 –username “admin” -p “BTZ1107” –authenticationDatabase admin -d policy -c polices –out backup.bak</p></blockquote><h4 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h4><blockquote><p>mongoimport –db policy –collection polices –file /3.json</p></blockquote><h3 id="Docker容器中配置Mongo副本集"><a href="#Docker容器中配置Mongo副本集" class="headerlink" title="Docker容器中配置Mongo副本集"></a>Docker容器中配置Mongo副本集</h3><blockquote><ol><li>mongod 以副本集形式启动 <code>mongod --replSet rs0</code></li><li>查看各mongo节点的IP及端口（docker容器中查询方式如上）</li><li>进入任意一mongo节点的命令行，执行 <code>conf={ &quot;_id&quot;:&quot;rs0&quot;, &quot;members&quot;:[ {&quot;_id&quot;:0,&quot;host&quot;:&quot;172.19.0.2:27017&quot;}, {&quot;_id&quot;:1,&quot;host&quot;:&quot;172.19.0.3:27017&quot;}, {&quot;_id&quot;:2,&quot;host&quot;:&quot;172.19.0.5:27017&quot;} ] }</code></li><li>进入其他节点的mongo命令行，执行 <code>rs.slaveOk()</code>开始同步数据</li></ol></blockquote><h3 id="Mongo副本集"><a href="#Mongo副本集" class="headerlink" title="Mongo副本集"></a>Mongo副本集</h3><h4 id="增加副本集"><a href="#增加副本集" class="headerlink" title="增加副本集"></a>增加副本集</h4><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rs.add(&quot;ip:port&quot;);</span><br></pre></td></tr></table></figure></blockquote><h4 id="删除副本集"><a href="#删除副本集" class="headerlink" title="删除副本集"></a>删除副本集</h4><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rs.remove(&quot;ip:port&quot;);</span><br></pre></td></tr></table></figure></blockquote><h4 id="修改conf"><a href="#修改conf" class="headerlink" title="修改conf"></a>修改conf</h4><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cfg &#x3D; rs.conf();</span><br><span class="line">cfg.members[2].host&#x3D;[&quot;ip:port&quot;];</span><br><span class="line">rs.reconfig(cfg);</span><br></pre></td></tr></table></figure></blockquote><h2 id="Zip"><a href="#Zip" class="headerlink" title="Zip"></a>Zip</h2><h3 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h3><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zip -r xxx.zip .&#x2F;filename</span><br></pre></td></tr></table></figure></blockquote><h3 id="解压缩"><a href="#解压缩" class="headerlink" title="解压缩"></a>解压缩</h3><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip -d .&#x2F;filedir xxx.zip</span><br></pre></td></tr></table></figure></blockquote>]]></content>
      
      
      <categories>
          
          <category> CSERVICE </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
