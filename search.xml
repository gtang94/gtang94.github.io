<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>GIT使用</title>
    <url>/2021/03/04/GIT%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="ALIAS"><a href="#ALIAS" class="headerlink" title="ALIAS"></a>ALIAS</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ~/.git/config</span></span><br><span class="line">ci = commit</span><br><span class="line">st = status</span><br><span class="line">co = checkout</span><br><span class="line">br = branch</span><br><span class="line">ss = status --short</span><br><span class="line">df = diff</span><br><span class="line">lo = <span class="built_in">log</span> --oneline</span><br><span class="line">lg = <span class="built_in">log</span> --color --graph --pretty=format:<span class="string">'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset'</span> --abbrev-commit</span><br></pre></td></tr></table></figure>

<h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><h3 id="常见分支"><a href="#常见分支" class="headerlink" title="常见分支"></a>常见分支</h3><p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1614871446/74843131-c8748500-532b-11ea-9cd9-280d997a6563_uapny6.png" alt="images"></p>
<ul>
<li><p>master: 理论上只有一个最稳定的主分支</p>
</li>
<li><p>develop: 理论上只有一个待发布的开发分支</p>
</li>
<li><p>feature: 多个正在开发的分支</p>
</li>
<li><p>hotfix: </p>
<blockquote>
<ol>
<li><p>一般线上bug，可在develop分支切hotFix分支进行修改，完成后合并到develop(一般是release-*)，下次版本发布时一起发布。</p>
</li>
<li><p>紧急线上bug，应在master分支上切hotfix分支进行修改，完成后合并到master发布</p>
</li>
</ol>
</blockquote>
</li>
<li><p>release-*: 可能从develop分支切分而来，但一定要合并到develop和master分支上；该分支一般用来： </p>
<blockquote>
<ol>
<li><p>在发布前紧急修复细小bug </p>
</li>
<li><p>准备要发布的版本号等数据 </p>
</li>
<li><p>合并细小bug</p>
</li>
</ol>
</blockquote>
</li>
</ul>
<p><strong>注意：</strong></p>
<ol>
<li><p><strong>合并前使用merge -no-ff 生成合并记录</strong></p>
</li>
<li><p><strong>分支合并前提交pull request进行code review</strong></p>
</li>
</ol>
<h3 id="分支命名规范"><a href="#分支命名规范" class="headerlink" title="分支命名规范"></a>分支命名规范</h3><blockquote>
<p>git分支分为集成分支(develop)、功能分支(feature)和修复分支(hotfix)</p>
</blockquote>
<h4 id="集成分支"><a href="#集成分支" class="headerlink" title="集成分支"></a>集成分支</h4><ul>
<li><p>版本内的集成分支： feature/versions/{$version}</p>
</li>
<li><p>所有待发布功能的集成分支： develop</p>
</li>
</ul>
<h4 id="功能分支"><a href="#功能分支" class="headerlink" title="功能分支"></a>功能分支</h4><ul>
<li><p>版本功能分支(根据版本需求拆分的功能分支): <code>feature/{$version}/{$issue_id}_{description}</code></p>
</li>
<li><p>非版本功能分支(不跟版本一起上线的功能或者一些不紧急的bug): <code>feature/{$username}/{$issue_id}_{$description}</code></p>
</li>
</ul>
<blockquote>
<p><code>{$username}</code> 代表开发者，例如：tanggq<br><code>{$version}</code> 代表版本号，例如：v2.1.1<br><code>{$issue_id}</code> 代表gitee的Issue Id，例如： #ISSUE12345<br><code>{$description}</code> 代表分支功能简短描述</p>
</blockquote>
<h4 id="修复分支"><a href="#修复分支" class="headerlink" title="修复分支"></a>修复分支</h4><ul>
<li>线上bug分支: <code>hotfix/{$username}/{$issue_id}_{$description}</code></li>
</ul>
<h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><h3 id="约定式提交规范"><a href="#约定式提交规范" class="headerlink" title="约定式提交规范"></a>约定式提交规范</h3><p>约定式提交规范是使用最广泛的git提交规范，源自<a href="https://github.com/angular/angular.js/blob/master/DEVELOPERS.md#-git-commit-guidelines" target="_blank" rel="noopener">Angular JS</a>，提交格式如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;<span class="built_in">type</span>&gt;(&lt;scope&gt;): &lt;subject&gt;</span><br><span class="line">//&lt;BLANK LINE&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">//&lt;BLANK LINE&gt;</span><br><span class="line">&lt;footer&gt;</span><br></pre></td></tr></table></figure>

<h3 id="规范说明"><a href="#规范说明" class="headerlink" title="规范说明"></a>规范说明</h3><ol>
<li><code>&lt;type&gt;</code> 是提交类型，必须是以下类型中的一个：</li>
</ol>
<ul>
<li>feat：增加一个新功能</li>
<li>fix：修复bug</li>
<li>docs：只修改了文档</li>
<li>style：做了不影响代码含义的修改，空格、格式化、缺少分号等等</li>
<li>refactor：代码重构，既不是修复bug，也不是新功能的修改</li>
<li>perf：改进性能的代码</li>
<li>test：增加测试或更新已有的测试</li>
<li>chore：构建或辅助工具或依赖库的更新</li>
</ul>
<ol start="2">
<li><p><code>(&lt;scope&gt;)</code> 可选，表示影响的范围、功能、模块</p>
</li>
<li><p><code>&lt;subject&gt;</code> 简单说明，不超过50个字</p>
</li>
<li><p><code>&lt;body&gt;</code> 选填，用于填写更详细的描述，可以分成多行。 无重大变更一般不写</p>
</li>
<li><p><code>&lt;footer&gt;</code> 选填，用于关联issue，一般是关联issue、关闭issue</p>
</li>
</ol>
]]></content>
      <categories>
        <category>架构</category>
      </categories>
      <tags>
        <tag>alias</tag>
        <tag>branch</tag>
        <tag>commit</tag>
      </tags>
  </entry>
  <entry>
    <title>yum update的破坏性</title>
    <url>/2021/02/10/yum-update%E7%9A%84%E7%A0%B4%E5%8C%96%E6%80%A7/</url>
    <content><![CDATA[<h2 id="yum"><a href="#yum" class="headerlink" title="yum"></a>yum</h2><blockquote>
<p>yum 是一款自动化升级、安装、卸载rpm安装包的工具。 yum是使用一个中心仓库管理一部分应用程序的依赖关系，根据计算出来的依赖关系进行相关的升级、安装、更新等操作。</p>
</blockquote>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><blockquote>
<ul>
<li>可以同时配置多个资源库</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>配置文件简洁（/etc/yum.conf）</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>自动化处理更新rpm包时遇到的依赖问题</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>与rpm数据库一致</li>
</ul>
</blockquote>
<h2 id="yum-update的造成的影响"><a href="#yum-update的造成的影响" class="headerlink" title="yum update的造成的影响"></a>yum update的造成的影响</h2><blockquote>
<ul>
<li>升级内核</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>升级linux发行版本</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>升级所有包</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>改变软件设置和系统设置</li>
</ul>
</blockquote>
<h2 id="避免升级影响系统"><a href="#避免升级影响系统" class="headerlink" title="避免升级影响系统"></a>避免升级影响系统</h2><h3 id="update升级系统和发行版"><a href="#update升级系统和发行版" class="headerlink" title="update升级系统和发行版"></a>update升级系统和发行版</h3><blockquote>
<p>修改yum.conf配置文件，update时忽略内核和发行版</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@iZm5ei1yo0mi0y72r6dyoxZ ~]<span class="comment"># echo -e "\nexclude=kernel* \nexclude=centos-release*" &gt;&gt; /etc/yum.conf</span></span><br></pre></td></tr></table></figure>

<h4 id="对比升级前后"><a href="#对比升级前后" class="headerlink" title="对比升级前后"></a>对比升级前后</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@iZm5ei1yo0mi0y72r6dyoxZ ~]<span class="comment"># uname -a</span></span><br><span class="line">Linux iZm5ei1yo0mi0y72r6dyoxZ 3.10.0-1062.12.1.el7.x86_64 <span class="comment">#1 SMP Tue Feb 4 23:02:59 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux</span></span><br><span class="line">[root@iZm5ei1yo0mi0y72r6dyoxZ ~]<span class="comment"># cat /etc/centos-release</span></span><br><span class="line">CentOS Linux release 7.6.1810 (Core) </span><br><span class="line">[root@iZm5ei1yo0mi0y72r6dyoxZ ~]<span class="comment"># </span></span><br><span class="line">[root@iZm5ei1yo0mi0y72r6dyoxZ ~]<span class="comment"># yum update</span></span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">[root@iZm5ei1yo0mi0y72r6dyoxZ ~]<span class="comment"># uname -a</span></span><br><span class="line">Linux iZm5ei1yo0mi0y72r6dyoxZ 3.10.0-1062.12.1.el7.x86_64 <span class="comment">#1 SMP Tue Feb 4 23:02:59 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux</span></span><br><span class="line">[root@iZm5ei1yo0mi0y72r6dyoxZ ~]<span class="comment"># cat /etc/centos-release</span></span><br><span class="line">CentOS Linux release 7.6.1810 (Core) </span><br><span class="line">[root@iZm5ei1yo0mi0y72r6dyoxZ ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<h3 id="upgrade升级"><a href="#upgrade升级" class="headerlink" title="upgrade升级"></a>upgrade升级</h3><blockquote>
<p>upgrade时只升级所有包，不升级软件和系统内核</p>
</blockquote>
<h4 id="对比升级前后-1"><a href="#对比升级前后-1" class="headerlink" title="对比升级前后"></a>对比升级前后</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除/etc/yum.conf配置文件中的“exclude=kernel* exclude=centos-release*”</span></span><br><span class="line">[root@iZm5ei1yo0mi0y72r6dyoxZ ~]<span class="comment"># uname -a</span></span><br><span class="line">Linux iZm5ei1yo0mi0y72r6dyoxZ 3.10.0-1062.12.1.el7.x86_64 <span class="comment">#1 SMP Tue Feb 4 23:02:59 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux</span></span><br><span class="line">[root@iZm5ei1yo0mi0y72r6dyoxZ ~]<span class="comment"># cat /etc/centos-release</span></span><br><span class="line">CentOS Linux release 7.6.1810 (Core) </span><br><span class="line">[root@iZm5ei1yo0mi0y72r6dyoxZ ~]<span class="comment"># yum -y upgrade</span></span><br><span class="line">[root@iZm5ei1yo0mi0y72r6dyoxZ ~]<span class="comment"># uname -a</span></span><br><span class="line">Linux iZm5ei1yo0mi0y72r6dyoxZ 3.10.0-1062.12.1.el7.x86_64 <span class="comment">#1 SMP Tue Feb 4 23:02:59 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux</span></span><br><span class="line">[root@iZm5ei1yo0mi0y72r6dyoxZ ~]<span class="comment"># cat /etc/centos-release</span></span><br><span class="line">CentOS Linux release 7.6.1810 (Core) </span><br><span class="line">[root@iZm5ei1yo0mi0y72r6dyoxZ ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<h2 id="误升级的回退"><a href="#误升级的回退" class="headerlink" title="误升级的回退"></a>误升级的回退</h2><h3 id="内核回退"><a href="#内核回退" class="headerlink" title="内核回退"></a>内核回退</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看当前内核版本</span></span><br><span class="line">[root@iZm5ei1yo0mi0y72r6dyoxZ ~]<span class="comment"># uname -r</span></span><br><span class="line">3.10.0-1062.12.1.el7.x86_64</span><br><span class="line"><span class="comment"># 查看当前内核详细信息</span></span><br><span class="line">[root@iZm5ei1yo0mi0y72r6dyoxZ ~]<span class="comment"># hostnamectl </span></span><br><span class="line">   Static hostname: iZm5ei1yo0mi0y72r6dyoxZ</span><br><span class="line">         Icon name: computer-vm</span><br><span class="line">           Chassis: vm</span><br><span class="line">        Machine ID: 20200220105402131453637367482142</span><br><span class="line">           Boot ID: f77698effc3d4250a195982dc8510977</span><br><span class="line">    Virtualization: kvm</span><br><span class="line">  Operating System: CentOS Linux 7 (Core)</span><br><span class="line">       CPE OS Name: cpe:/o:centos:centos:7</span><br><span class="line">            Kernel: Linux 3.10.0-1062.12.1.el7.x86_64</span><br><span class="line">      Architecture: x86-64</span><br><span class="line"><span class="comment"># 查看历史内核信息</span></span><br><span class="line">[root@iZm5ei1yo0mi0y72r6dyoxZ ~]<span class="comment"># cat /boot/grub2/grub.cfg |grep menuentry</span></span><br><span class="line"><span class="keyword">if</span> [ x<span class="string">"<span class="variable">$&#123;feature_menuentry_id&#125;</span>"</span> = xy ]; <span class="keyword">then</span></span><br><span class="line">  menuentry_id_option=<span class="string">"--id"</span></span><br><span class="line">  menuentry_id_option=<span class="string">""</span></span><br><span class="line"><span class="built_in">export</span> menuentry_id_option</span><br><span class="line">menuentry <span class="string">'CentOS Linux (3.10.0-1160.15.2.el7.x86_64) 7 (Core)'</span> --class centos --class gnu-linux --class gnu --class os --unrestricted <span class="variable">$menuentry_id_option</span> <span class="string">'gnulinux-3.10.0-1062.12.1.el7.x86_64-advanced-bdb48242-7da4-491c-ad1a-ae0994a965c9'</span> &#123;</span><br><span class="line">menuentry <span class="string">'CentOS Linux (3.10.0-1062.12.1.el7.x86_64) 7 (Core)'</span> --class centos --class gnu-linux --class gnu --class os --unrestricted <span class="variable">$menuentry_id_option</span> <span class="string">'gnulinux-3.10.0-1062.12.1.el7.x86_64-advanced-bdb48242-7da4-491c-ad1a-ae0994a965c9'</span> &#123;</span><br><span class="line">menuentry <span class="string">'CentOS Linux (3.10.0-1062.el7.x86_64) 7 (Core)'</span> --class centos --class gnu-linux --class gnu --class os --unrestricted <span class="variable">$menuentry_id_option</span> <span class="string">'gnulinux-3.10.0-1062.el7.x86_64-advanced-bdb48242-7da4-491c-ad1a-ae0994a965c9'</span> &#123;</span><br><span class="line">menuentry <span class="string">'CentOS Linux (0-rescue-20200220105402131453637367482142) 7 (Core)'</span> --class centos --class gnu-linux --class gnu --class os --unrestricted <span class="variable">$menuentry_id_option</span> <span class="string">'gnulinux-0-rescue-20200220105402131453637367482142-advanced-bdb48242-7da4-491c-ad1a-ae0994a965c9'</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前已设置的内核信息（可能未生效）</span></span><br><span class="line">[root@iZm5ei1yo0mi0y72r6dyoxZ ~]<span class="comment"># grub2-editenv list</span></span><br><span class="line">saved_entry=CentOS Linux (3.10.0-1062.12.1.el7.x86_64) 7 (Core)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置内核</span></span><br><span class="line">[root@iZm5ei1yo0mi0y72r6dyoxZ ~]<span class="comment"># grub2-set-default "CentOS Linux (3.10.0-1160.15.2.el7.x86_64) 7 (Core)"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">[root@iZm5ei1yo0mi0y72r6dyoxZ ~]<span class="comment"># reboot</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启后查看是否生效</span></span><br><span class="line">[root@iZm5ei1yo0mi0y72r6dyoxZ ~]<span class="comment"># uname -r</span></span><br><span class="line">3.10.0-1160.15.2.el7.x86_64</span><br></pre></td></tr></table></figure>

<h3 id="发行版回退"><a href="#发行版回退" class="headerlink" title="发行版回退"></a>发行版回退</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 已存在的centos发行版的包</span></span><br><span class="line">[root@iZm5ei1yo0mi0y72r6dyoxZ ~]<span class="comment"># rpm -qa | grep centos-release</span></span><br><span class="line">centos-release-scl-2-3.el7.centos.noarch</span><br><span class="line">centos-release-scl-rh-2-3.el7.centos.noarch</span><br><span class="line">centos-release-7-9.2009.1.el7.centos.x86_64</span><br><span class="line">[root@iZm5ei1yo0mi0y72r6dyoxZ ~]<span class="comment"># </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载某版本的发行包</span></span><br><span class="line">[root@iZm5ei1yo0mi0y72r6dyoxZ ~]<span class="comment"># wget http://vault.centos.org/7.6.1810/os/x86_64/Packages/centos-release-7-6.1810.2.el7.centos.x86_64.rpm</span></span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强制回退到某个发行版本</span></span><br><span class="line">[root@iZm5ei1yo0mi0y72r6dyoxZ ~]<span class="comment"># rpm -ivh centos-release-7-6.1810.2.el7.centos.x86_64.rpm --force</span></span><br><span class="line">Preparing...                          <span class="comment">################################# [100%]</span></span><br><span class="line">Updating / installing...</span><br><span class="line">   1:centos-release-7-6.1810.2.el7.cen<span class="comment">################################# [100%]</span></span><br><span class="line">[root@iZm5ei1yo0mi0y72r6dyoxZ ~]<span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 已存在的centos发行版的包</span></span><br><span class="line">[root@iZm5ei1yo0mi0y72r6dyoxZ ~]<span class="comment"># rpm -qa | grep centos-release</span></span><br><span class="line">centos-release-scl-2-3.el7.centos.noarch</span><br><span class="line">centos-release-scl-rh-2-3.el7.centos.noarch</span><br><span class="line">centos-release-7-9.2009.1.el7.centos.x86_64</span><br><span class="line">centos-release-7-6.1810.2.el7.centos.x86_64</span><br><span class="line"></span><br><span class="line"><span class="comment"># 回退确认</span></span><br><span class="line">[root@iZm5ei1yo0mi0y72r6dyoxZ ~]<span class="comment"># cat /etc/centos-release</span></span><br><span class="line">CentOS Linux release 7.6.1810 (Core) </span><br><span class="line">[root@iZm5ei1yo0mi0y72r6dyoxZ ~]<span class="comment"># uname -r</span></span><br><span class="line">3.10.0-1160.15.2.el7.x86_64</span><br><span class="line">[root@iZm5ei1yo0mi0y72r6dyoxZ ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>yum update</tag>
      </tags>
  </entry>
  <entry>
    <title>Ant</title>
    <url>/2021/02/08/Ant/</url>
    <content><![CDATA[<h2 id="WHAT"><a href="#WHAT" class="headerlink" title="WHAT"></a>WHAT</h2><h3 id="Ant"><a href="#Ant" class="headerlink" title="Ant"></a>Ant</h3><blockquote>
<p>Apache Ant 是一个Java编写的命令行工具，主要是用来驱动构建文件中的描述的进程作为彼此依赖的目标和扩展点。 Ant主要是用来构建Java应用程序，当然也可以构建C和C++程序。</p>
</blockquote>
<h3 id="Ant-和-Maven区别"><a href="#Ant-和-Maven区别" class="headerlink" title="Ant 和 Maven区别"></a>Ant 和 Maven区别</h3><blockquote>
<p>Maven 是一个软件项目管理工具，基于POM(项目对象)模型的概念。 Maven可以从中央仓库获取程序依赖包，用以项目的编译、打包、发布等。 Maven有三套独立的生命周期：clean周期、default周期、site周期，clean周期又有以下阶段：pre-clean、clean、post-clean。 执行mvn clean时，必须按顺序先执行pre-clean，再执行clean</p>
</blockquote>
<blockquote>
<p>Ant 没有生命周期，所有的操作都需要手动去创建、部署</p>
</blockquote>
<h3 id="Ant的优势"><a href="#Ant的优势" class="headerlink" title="Ant的优势"></a>Ant的优势</h3><blockquote>
<ul>
<li>跨平台</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>语法清晰、 使用简单（与make比，不敢和maven比）</li>
</ul>
</blockquote>
<h2 id="HOW"><a href="#HOW" class="headerlink" title="HOW"></a>HOW</h2><h3 id="Ant环境配置"><a href="#Ant环境配置" class="headerlink" title="Ant环境配置"></a>Ant环境配置</h3><h4 id="JDK安装"><a href="#JDK安装" class="headerlink" title="JDK安装"></a>JDK安装</h4><blockquote>
<p>略</p>
</blockquote>
<h4 id="Ant下载"><a href="#Ant下载" class="headerlink" title="Ant下载"></a>Ant下载</h4><blockquote>
<p><a href="https://ant.apache.org/bindownload.cgi" target="_blank" rel="noopener">https://ant.apache.org/bindownload.cgi</a></p>
</blockquote>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@iZm5ei1yo0mi0y72r6dyoxZ /]<span class="comment"># cd /usr/local/src</span></span><br><span class="line">[root@iZm5ei1yo0mi0y72r6dyoxZ src]<span class="comment"># mkdir /usr/local/apache</span></span><br><span class="line">[root@iZm5ei1yo0mi0y72r6dyoxZ src]<span class="comment"># tar zxvf apache-ant-1.9.15-bin.tar.gz -C /usr/local/apache/</span></span><br><span class="line">[root@iZm5ei1yo0mi0y72r6dyoxZ src]<span class="comment"># echo -e "\nANT_HOME=/usr/local/apache/apache-ant-1.9.15\nPATH=$&#123;ANT_HOME&#125;/bin:$PATH" &gt;&gt; /etc/profile</span></span><br><span class="line">[root@iZm5ei1yo0mi0y72r6dyoxZ src]<span class="comment"># source /etc/profile</span></span><br><span class="line">[root@iZm5ei1yo0mi0y72r6dyoxZ src]<span class="comment"># ant -version</span></span><br><span class="line">Apache Ant(TM) version 1.9.15 compiled on May 10 2020</span><br></pre></td></tr></table></figure>

<h3 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h3><h4 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@VM-0-8-centos tmp]<span class="comment"># mkdir -p /tmp/test/src/club/hermit</span></span><br><span class="line">[root@VM-0-8-centos tmp]<span class="comment"># mkdir -p /tmp/test/classes</span></span><br></pre></td></tr></table></figure>

<h4 id="App-java-tmp-test-src-club-hermit-App-java"><a href="#App-java-tmp-test-src-club-hermit-App-java" class="headerlink" title="App.java(/tmp/test/src/club/hermit/App.java)"></a>App.java(/tmp/test/src/club/hermit/App.java)</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> club.hermit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"this is a ant build test application"</span>);</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="build-xml-tmp-test-build-xml"><a href="#build-xml-tmp-test-build-xml" class="headerlink" title="build.xml(/tmp/test/build.xml)"></a>build.xml(/tmp/test/build.xml)</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">name</span>=<span class="string">"Ant Test"</span> <span class="attr">default</span>=<span class="string">"compile"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"root"</span> <span class="attr">value</span>=<span class="string">"/tmp/test"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">target</span> <span class="attr">name</span>=<span class="string">"compile"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">delete</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileset</span> <span class="attr">dir</span>=<span class="string">"classes"</span> <span class="attr">includes</span>=<span class="string">"**/*.class"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javac</span> <span class="attr">srcdir</span>=<span class="string">"src"</span> <span class="attr">destdir</span>=<span class="string">"classes"</span> <span class="attr">includeantruntime</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">target</span> <span class="attr">name</span>=<span class="string">"clean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">delete</span> <span class="attr">dir</span>=<span class="string">"classes"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">target</span> <span class="attr">name</span>=<span class="string">"run"</span> <span class="attr">depends</span>=<span class="string">"compile"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java</span> <span class="attr">classname</span>=<span class="string">"club.hermit.App"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">classpath</span> <span class="attr">path</span>=<span class="string">"classes"</span>&gt;</span><span class="tag">&lt;/<span class="name">classpath</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">java</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="run"><a href="#run" class="headerlink" title="run"></a>run</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@iZm5ei1yo0mi0y72r6dyoxZ <span class="built_in">test</span>]<span class="comment"># ant run</span></span><br><span class="line">Buildfile: /tmp/<span class="built_in">test</span>/build.xml</span><br><span class="line"></span><br><span class="line">compile:</span><br><span class="line">    [javac] Compiling 1 <span class="built_in">source</span> file to /tmp/<span class="built_in">test</span>/classes</span><br><span class="line"></span><br><span class="line">run:</span><br><span class="line">     [java] this is a ant build <span class="built_in">test</span> application</span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL</span><br><span class="line">Total time: 1 second</span><br><span class="line">[root@iZm5ei1yo0mi0y72r6dyoxZ <span class="built_in">test</span>]<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><ul>
<li><a href="https://iowiki.com/ant/ant_build_files.html" target="_blank" rel="noopener">Ant</a></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Apache Ant</tag>
        <tag>编译工具</tag>
      </tags>
  </entry>
  <entry>
    <title>Optional</title>
    <url>/2020/11/24/Optional/</url>
    <content><![CDATA[<blockquote>
<p>空指针异常是Java中最常出现的异常，JDK8中使用Optional包装对象和解决空指针异常的一系列问题</p>
</blockquote>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Optional</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Common instance for &#123;<span class="doctag">@code</span> empty()&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Optional&lt;?&gt; EMPTY = <span class="keyword">new</span> Optional&lt;&gt;();</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * If non-null, the value; if null, indicates no value is present</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> T value;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructs an empty instance.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@implNote</span> Generally only one empty instance, &#123;<span class="doctag">@link</span> Optional#EMPTY&#125;,</span></span><br><span class="line"><span class="comment">     * should exist per VM.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Optional</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructs an instance with the value present.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value the non-null value to be present</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if value is null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Optional</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = Objects.requireNonNull(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>该类支持泛型，其属性value可以是任意类型T</li>
<li>该类有两个构造方法，且都是<code>private</code>，也即不能用外部构造该类的实例</li>
</ul>
</blockquote>
<h2 id="Api"><a href="#Api" class="headerlink" title="Api"></a>Api</h2><table>
<thead>
<tr>
<th>方法</th>
<th>介绍</th>
</tr>
</thead>
<tbody><tr>
<td><code>public static&lt;T&gt; Optional&lt;T&gt; empty()</code></td>
<td>该方法返回一个空的Optional实例，该实例的value为空</td>
</tr>
<tr>
<td><code>public static &lt;T&gt; Optional&lt;T&gt; of(T value)</code></td>
<td>根据传入的非空的value构造Optional实例</td>
</tr>
<tr>
<td><code>public static &lt;T&gt; Optional&lt;T&gt; ofNullable(T value)</code></td>
<td>根据传入的value构造Optional实例。如果传入的是非空的value，则和of(T value)一样；如果传入的是空的value，则调用empty()方法实例化Optional</td>
</tr>
<tr>
<td><code>public T get()</code></td>
<td>如果容器非空，则返回Optional的值，否则抛出NoSuchElementException异常</td>
</tr>
<tr>
<td><code>public boolean isPresent()</code></td>
<td>判断当前的Optional是否已经设置了值</td>
</tr>
<tr>
<td><code>public void ifPresent(Consumer&lt;? super T&gt; consumer)</code></td>
<td>判断当前Optional是否已设置了值，如果有值，则调用Consumer函数式接口进行处理</td>
</tr>
<tr>
<td><code>public Optional&lt;T&gt; filter(Predicate&lt;? super T&gt; predicate)</code></td>
<td>如果设置了值，且满足Predicate的判读条件，则返回该Optional，否则返回一个空的Optional</td>
</tr>
<tr>
<td><code>public&lt;U&gt; Optional&lt;U&gt; map(Function&lt;? super T, ? extends U&gt; mapper)</code></td>
<td>如果Optional设置了value，则调用Function进行处理，并返回包含处理后值的Optional，否则返回空的Optional</td>
</tr>
<tr>
<td><code>public&lt;U&gt; Optional&lt;U&gt; flatMap(Function&lt;? super T, Optional&lt;U&gt;&gt; mapper)</code></td>
<td>与map()方法类似，但他的mapper结构已经是一个Optional，不需要再对结果进行包装</td>
</tr>
<tr>
<td><code>public T orElse(T other)</code></td>
<td>如果Optional的值不为空，则返回该值，否则返回other</td>
</tr>
<tr>
<td><code>public T orElseGet(Supplier&lt;? extends T&gt; other)</code></td>
<td>如果Optional值不为空，则返回该值，否则根据other另外生成一个</td>
</tr>
<tr>
<td><code>public &lt;X extends Throwable&gt; T orElseThrow(Supplier&lt;? extends X&gt; exceptionSupplier) throws X</code></td>
<td>如果Option值不为空，则返回该值，否则通过supplier抛出一个异常</td>
</tr>
</tbody></table>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">JDK8之前：</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (msg != <span class="keyword">null</span>) &#123;</span><br><span class="line">		System.out.println(msg);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">JDK8:</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">  Optional.ofNullable(msg)</span><br><span class="line">    .ifPresent(System.out.println(msg))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">JDK8之前：</span><br><span class="line"><span class="keyword">if</span> ( user != <span class="keyword">null</span>) &#123;</span><br><span class="line">  doSomething(user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">JDK8：</span><br><span class="line">Optional.ofNullable（user）</span><br><span class="line">	.ifPresent(u-&gt;&#123;</span><br><span class="line">		doSomething(u);</span><br><span class="line">	&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">JDK8之前：</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(User user)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (user != <span class="keyword">null</span>) &#123;</span><br><span class="line">		String name = user.getName();</span><br><span class="line">		<span class="keyword">if</span> (<span class="string">"zhangsan"</span>.equals(name)) &#123;</span><br><span class="line">			<span class="keyword">return</span> user;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		user = <span class="keyword">new</span> User();</span><br><span class="line">		user.setName(<span class="string">"zhangsan"</span>);</span><br><span class="line">		<span class="keyword">return</span> user;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">JDK8:</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> Optional.ofNullable(user)</span><br><span class="line">    .filter(u-&gt;<span class="string">"zhangsan"</span>.equals(u.getName()))</span><br><span class="line">    .orElseGet(() -&gt; &#123;</span><br><span class="line">      User user1 = <span class="keyword">new</span> User();</span><br><span class="line">      user1.setName(<span class="string">"zhangsan"</span>);</span><br><span class="line">      <span class="keyword">return</span> user1;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>源码分析</category>
      </categories>
      <tags>
        <tag>JDK8</tag>
        <tag>Optional</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx安装</title>
    <url>/2020/11/21/Nginx%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h2 id="包下载-amp-依赖安装"><a href="#包下载-amp-依赖安装" class="headerlink" title="包下载&amp;依赖安装"></a>包下载&amp;依赖安装</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@VM-0-8-centos ~]<span class="comment"># cd /usr/local/src/</span></span><br></pre></td></tr></table></figure>

<h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><blockquote>
<p><a href="https://nginx.org/en/download.html" target="_blank" rel="noopener">Nginx</a></p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@VM-0-8-centos src]<span class="comment"># wget http://nginx.org/download/nginx-1.10.2.tar.gz</span></span><br></pre></td></tr></table></figure>

<h3 id="OpenSSL"><a href="#OpenSSL" class="headerlink" title="OpenSSL"></a>OpenSSL</h3><blockquote>
<p><a href="https://www.openssl.org/" target="_blank" rel="noopener">OpenSSL</a></p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@VM-0-8-centos src]<span class="comment"># wget http://www.openssl.org/source/openssl-fips-2.0.10.tar.gz</span></span><br><span class="line">[root@VM-0-8-centos src]<span class="comment"># tar zxvf openssl-fips-2.0.10.tar.gz</span></span><br><span class="line">[root@VM-0-8-centos src]<span class="comment"># cd openssl-fips-2.0.10/</span></span><br><span class="line">[root@VM-0-8-centos openssl-fips-2.0.10]<span class="comment"># ./config &amp;&amp; make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure>

<h3 id="zlib"><a href="#zlib" class="headerlink" title="zlib"></a>zlib</h3><blockquote>
<p><a href="http://www.zlib.net/" target="_blank" rel="noopener">zlib</a></p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@VM-0-8-centos src]<span class="comment"># wget http://zlib.net/zlib-1.2.11.tar.gz</span></span><br><span class="line">[root@VM-0-8-centos src]<span class="comment"># tar zxvf zlib-1.2.11.tar.gz</span></span><br><span class="line">[root@VM-0-8-centos src]<span class="comment"># cd zlib-1.2.11/</span></span><br><span class="line">[root@VM-0-8-centos zlib-1.2.11]<span class="comment"># ./configure &amp;&amp; make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure>

<h3 id="pcre"><a href="#pcre" class="headerlink" title="pcre"></a>pcre</h3><blockquote>
<p><a href="http://www.pcre.org/" target="_blank" rel="noopener">pcre</a></p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@VM-0-8-centos src]<span class="comment"># wget https://ftp.pcre.org/pub/pcre/pcre-8.40.tar.gz</span></span><br><span class="line">[root@VM-0-8-centos src]<span class="comment"># tar zxvf pcre-8.40.tar.gz</span></span><br><span class="line">[root@VM-0-8-centos src]<span class="comment"># cd pcre-8.40/</span></span><br><span class="line">[root@VM-0-8-centos pcre-8.40]<span class="comment"># ./configure &amp;&amp; make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure>

<h3 id="C-依赖"><a href="#C-依赖" class="headerlink" title="C++依赖"></a>C++依赖</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@VM-0-8-centos src]<span class="comment"># yum install gcc-c++</span></span><br></pre></td></tr></table></figure>



<h2 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@VM-0-8-centos src]<span class="comment"># tar zxvf nginx-1.10.2.tar.gz</span></span><br><span class="line">[root@VM-0-8-centos src]<span class="comment"># cd nginx-1.10.2/</span></span><br><span class="line">[root@VM-0-8-centos nginx-1.10.2]<span class="comment"># ./configure &amp;&amp; make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure>

<h3 id="启动Nginx"><a href="#启动Nginx" class="headerlink" title="启动Nginx"></a>启动Nginx</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@VM-0-8-centos sbin]<span class="comment"># /usr/local/nginx/sbin/nginx</span></span><br></pre></td></tr></table></figure>



<h2 id="Nginx配置"><a href="#Nginx配置" class="headerlink" title="Nginx配置"></a>Nginx配置</h2><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3>]]></content>
      <categories>
        <category>环境配置</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Shiro</title>
    <url>/2020/11/01/Shiro/</url>
    <content><![CDATA[<h2 id="Shiro简介"><a href="#Shiro简介" class="headerlink" title="Shiro简介"></a>Shiro简介</h2><blockquote>
<p>shiro是java安全框架，shiro不会去维护用户、也不会去维护权限，需要程序员自己自己这些，shiro框架提供对交互过程的处理。</p>
</blockquote>
<blockquote>
<p>shiro可以完成以下基本功能：</p>
<ul>
<li>Authentication: 身份认证、登录，验证用户是否拥有相应身份</li>
<li>Authorization: 授权（权限验证）,即验证某个已认证得用户是否拥有某个权限</li>
<li>Session Management: 会话管理(Session管理)</li>
<li>Cryptograhpy: 加密</li>
</ul>
<p>也可完成以下高级功能：</p>
<ul>
<li>Web Support: 集成到web环境</li>
<li>Caching: 缓存，在用户登录后，将用户的基本信息、权限信息缓存到cache中，减小DB的压力、提供查询效率</li>
<li>Concurrency: 支持多线程应用的并发验证，如在一个线程中开启另一个线程，通过shiro可以自动将权限传递过去</li>
<li>Testing: 提供测试支持</li>
<li>Run as: 允许一个用户假装成另一个用户去访问</li>
<li>Remember me: 一次登录后，下次再来的会话不用再次登录</li>
</ul>
</blockquote>
<h3 id="从应用程序角度看shiro"><a href="#从应用程序角度看shiro" class="headerlink" title="从应用程序角度看shiro"></a>从应用程序角度看shiro</h3><p><img src="https://atts.w3cschool.cn/attachments/image/wk/shiro/2.png" alt="images"></p>
<blockquote>
<ul>
<li>subject: 主体。 代表了当前“用户”，是一个抽象概念。 这个subject可以是人，也可以是程序。所有的subject都绑定到securitymanager上，即对subject的所有操作，实际都是securitymanager去执行的。 subject和slf4j类似，都起门面的作用。</li>
<li>securitymanager: 安全管理器。 是shrio的核心，管理这所有的subject，也就是管理着所有和安全有关的操作。</li>
<li>域，realm相当于dataSources，是securitymanager的数据源，securitymanager操作时所有的用户数据、权限数据都是从这个realm中获取的。</li>
</ul>
</blockquote>
<blockquote>
<p>所以，对于应用程序来说，使用Shiro时包含以下两步：</p>
<ol>
<li>通过subject提供的API进行应用的认证、授权</li>
<li>向shiro框架提供数据源，即Realm</li>
</ol>
</blockquote>
<h3 id="从框架内部看shiro"><a href="#从框架内部看shiro" class="headerlink" title="从框架内部看shiro"></a>从框架内部看shiro</h3><p><img src="https://atts.w3cschool.cn/attachments/image/wk/shiro/3.png" alt="images"></p>
<blockquote>
<p>Subject: 主体，可以看到subject可以是任何可以使用shiro的application</p>
<p>Security Manager: shiro框架的核心，它管理者所有的Subject，负责进行认证、授权、会话、缓存的管理</p>
<p>Authenticator: 认证器，负责主体的认证，如果用户觉得Shiro默认的不好用，则可以自定义实现。Authenticator中的Authentication Strategy用来决定哪种情况下认证通过</p>
<p>Authrizer: 授权器（访问控制器），用来决定主体是否有权限进行相应的操作，即控制着用户能访问application中的哪些功能</p>
<p>Realm: 可以有一个或多个的Realm，是数据源，可以是JDBC实现的，也可以是LDAP实现等。Shiro并不知道我们的用户/权限具体的数据结构或存储位置，所以需要我们自己实现这个Realm</p>
<p>Session Manager: 此处的Session并不是传统意义上的Web中的Session，而是Shiro抽象出来的自己的Session</p>
<p>SessionDAO: 是用于操作Shiro抽象出的Session的数据访问对象，用户Session的CRUD，比如要把Session放入到redis中，则可以实现自己的SessionDAO用于操作redis中的这些Session数据</p>
<p>CacheManager: 缓存控制器，用来管理用户、角色、权限等的缓存</p>
<p>Cryptography: 加密模块</p>
</blockquote>
<h2 id="身份验证"><a href="#身份验证" class="headerlink" title="身份验证"></a>身份验证</h2><blockquote>
<p>在shiro中，用户需要提供<strong>principals(身份)</strong>和<strong>credentials(证明)</strong>，使得应用程序可以识别这个用户是谁。</p>
<ul>
<li>principals: 身份，即主体的标识属性。可以是用户名、邮箱、手机号等。</li>
<li>credentials: 凭证，即只有主体知道的安全值，如密码等。</li>
</ul>
</blockquote>
<p><img src="https://atts.w3cschool.cn/attachments/image/wk/shiro/4.png" alt="images"></p>
<h3 id="身份登录流程"><a href="#身份登录流程" class="headerlink" title="身份登录流程"></a>身份登录流程</h3><blockquote>
<p>流程如下：</p>
<ol>
<li>调用Subject.login(token)登录，其会自动委托给SecurityManager，调用之前必须先通过SecurityUtils.setSecurityManager()设置</li>
<li>SecurityManager负责真正的身份验证逻辑，它会委托给Authenticator进行验证</li>
<li>Authennticator才是真正的身份验证者，Shiro中核心的身份验证入口点，此处可以自定义自己的实现</li>
<li>Authenticator可能会委托给相应的AuthenticationStrategy进行多Realm身份验证，默认ModularRealmAuthenticator会调用AuthenticationStrategy进行多Realm身份验证</li>
<li>Authenticator会把相应的token传入Realm，从Realm获取身份信息，如果没有抛出异常就表示身份验证失败了</li>
</ol>
</blockquote>
<h3 id="Realm"><a href="#Realm" class="headerlink" title="Realm"></a>Realm</h3><blockquote>
<p>Realm是shiro的数据源，SecurityManager从Realm中获取用户信息进行比较确定用户身份是否合法；也从Realm中得到用户的角色/权限信息，以验证用户是否有操作权限</p>
<p>Realm源码如下：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Realm</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span></span>; <span class="comment">// 返回唯一的realm名字</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(AuthenticationToken var1)</span></span>; <span class="comment">// 判断此realm是否支持toekn</span></span><br><span class="line"></span><br><span class="line">    <span class="function">AuthenticationInfo <span class="title">getAuthenticationInfo</span><span class="params">(AuthenticationToken var1)</span> <span class="keyword">throws</span> AuthenticationException</span>; <span class="comment">// 根据token获取认证信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>shiro提供的默认Realm：</p>
</blockquote>
<p><img src="https://atts.w3cschool.cn/attachments/image/wk/shiro/5.png" alt="images"></p>
<blockquote>
<p>一般自定义实现的Realm都继承自AuthorizingRealm（授权），其继承自AuthenticatingRealm(身份验证)</p>
<ul>
<li>IniRealm: [users]部分指定用户名、密码、角色；[roles]部分指定权限信息（users/roles在.ini文件中配置）</li>
<li>PropertiesRealm: user.username=password,role1,role2指定用户名、密码、角色；role.role1=permission1,permission2指定角色及权限信息</li>
<li>JdbcRealm:通过sql查询相应的信息</li>
</ul>
</blockquote>
<h2 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h2><blockquote>
<p>授权，即访问控制，也就是在应用中控制谁能访问哪些资源。授权中涉及到的几个概念：</p>
<ul>
<li>主体: 访问应用的用户，在shiro中用subject表示该用户</li>
<li>资源: 在应用中用户可以访问的任何东西，如：CRUD数据</li>
<li>权限: 表示在应用中用户能不能访问某个资源。<strong>权限只表示有没有对某个资源操作的权力，并不表示哪出是具体哪个用户对这个资源的权力。所以后续还需要把权限赋予给用户，但这个赋予的操作需要实际运营(或其他工作人员)去配置</strong></li>
<li>角色: 权限的集合，一般情况下会赋予用户角色而不是权限，因为每个用户大多数情况下有多个权限</li>
</ul>
<p>角色有分为隐式角色和显式角色：</p>
<ul>
<li>隐式角色: 即直接通过角色来验证用户是否有操作权限。这种是将各种角色的逻辑判断写在代码中的，要修改时只能修改代码</li>
<li>显式角色: 即通过权限控制谁能访问某个资源。角色聚合一组权限集合，当要修改时，只需增删角色中的权限</li>
</ul>
</blockquote>
<h3 id="授权方式"><a href="#授权方式" class="headerlink" title="授权方式"></a>授权方式</h3><h4 id="编程式"><a href="#编程式" class="headerlink" title="编程式"></a>编程式</h4><blockquote>
<p>编程式即通过if/else完成授权逻辑，例：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Subject subject = SecurityUtils.getSubject();</span><br><span class="line"><span class="keyword">if</span> (subject.hasRole(<span class="string">"admin"</span>)) &#123;</span><br><span class="line">  <span class="comment">// 有admin角色的相关权限</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 无权限</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="注解式"><a href="#注解式" class="headerlink" title="注解式"></a>注解式</h4><blockquote>
<p>通过Java注解完成授权逻辑，例：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequiresRoles</span>(<span class="string">"admin"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 有admin角色的权限时执行改方法，没有时则抛出异常</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="JSP-GSP标签"><a href="#JSP-GSP标签" class="headerlink" title="JSP/GSP标签"></a>JSP/GSP标签</h4><blockquote>
<p>在JSP页面通过标签完成授权逻辑，例：</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;shiro:hasRole name = <span class="string">"admin"</span> &gt;</span><br><span class="line">  &lt;!- 有admin角色的权限 -&gt;</span><br><span class="line">&lt;/shiro:hasRole&gt;</span><br></pre></td></tr></table></figure>



<h3 id="授权流程"><a href="#授权流程" class="headerlink" title="授权流程"></a>授权流程</h3><p><img src="https://atts.w3cschool.cn/attachments/image/wk/shiro/6.png" alt="images"></p>
<blockquote>
<p>授权流程如下：</p>
<ol>
<li>首先调用Subject.isPermitted<em>/hasRole</em>接口，其会委托给SecurityManager，而SecurityManager接着会委托给Authorizer</li>
<li>Authorizer是真正的授权者，如果我们调用如isPermitted(“user:view”)，其首先会通过PermissionResolver把字符串转成相应的Permission实例</li>
<li>在进行授权前，会调用相应的Realm获取Subject相应的角色/权限用于匹配传入的角色/权限</li>
<li>Authorizer会判断Realm的角色/权限是否和传入的匹配，如果有多个Realm，会委托给ModularRealmAuthorizer进行循环判断，如果匹配的如isPermitted<em>/hasRole</em>会返回true,否则返回false表示授权失败</li>
</ol>
</blockquote>
<blockquote>
<p>ModularRealmAuthorizer进行多Realm匹配流程：</p>
<ol>
<li>首先检查相应的Realm是否实现了Authorizer</li>
<li>如果实现了Authorizer，那么接着调用相应的isPermitted*/hasRole*接口进行匹配</li>
<li>如果有一个Realm匹配那么将返回true，否则返回false</li>
</ol>
</blockquote>
<blockquote>
<p>如果Realm进行授权的话，应该继承AuthorizingRealm，其流程是：</p>
<ol>
<li>如果调用hasRole*，则直接获取AuthorizationInfo.getRoles()与传入的角色比较</li>
<li>如果调用的如isPermitted(“user:view”)，则首先通过PermissionResolver将权限字符串转成相应的Permission实例，默认使用WildcardPermissionResolver，即转成通配符的WildcardPermission；</li>
<li>通过AuthorizationInfo.getObjectPermissions()得到Permission实例集合；通过AuthorizationInfo.getStringPermissions()得到字符串集合并通过PermissionResolver解析为Permission实例，然后获取用户的角色，并通过RolePermissionResolver解析角色对应的权限集合</li>
<li>接着调用Permission.implies(Permission p)逐个与传入的权限比较，如果有匹配的则返回true,否则返回false</li>
</ol>
</blockquote>
<h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><h3 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h3><blockquote>
<p>Servlet是JavaEE规范的一种，也就是servlet是规范(体现在java中就是个接口)，主要是为了扩展Java作为Web服务的功能，统一接口。</p>
<p>其他厂商如tomcat、jetty根据serlvet规范，内部实现了servlet接口及web功能，并对外暴露出tomcat容器、jetty容器。</p>
<p>在jetty容器监听到Web请求后，容器会根据URL信息，确定要将请求交给哪个servlet去处理，处理完后再交给容器，容器再返回给客户端。</p>
</blockquote>
<p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1604246170/servlet_f1uprm.webp" alt="images"></p>
<h3 id="Shiro的拦截器Filter"><a href="#Shiro的拦截器Filter" class="headerlink" title="Shiro的拦截器Filter"></a>Shiro的拦截器Filter</h3><blockquote>
<p>shiro使用了和Servlet一样的Filter接口扩展，shiro拦截器基础类图如下：</p>
</blockquote>
<p><img src="https://atts.w3cschool.cn/attachments/image/wk/shiro/14.png" alt="images"></p>
<blockquote>
<ul>
<li>NameableFilter: 给Filter起名字，默认FilterName</li>
<li>OncePerRequestFilter: 用于防止多次执行Filter，也就是说一次请求只会走一次拦截器，另外提供一个enabled属性，表示是否开启该拦截器实例</li>
<li>ShiroFilater: 是整个Shiro的入口，用于拦截需要安全控制的请求进行处理</li>
<li>AdviceFilter: 提供了AOP的支持</li>
<li>PathMatchingaFilter: 提供了基于Ant风格的请求路径匹配功能及拦截器参数解析的功能</li>
<li>AccessControlFilter: 提供了访问控制的功能，比如是否允许访问、当访问拒绝时如何处理等等</li>
</ul>
</blockquote>
<h3 id="拦截器链"><a href="#拦截器链" class="headerlink" title="拦截器链"></a>拦截器链</h3><blockquote>
<p>shiro对servlet容器的FilterChain进行了代理，即ShiroFilter在继续Servlet容器的Filter链的执行之前，通过ProxiedFilterChain对servlet容器的FilterChain进行了代理；即先走Shiro自己的Filter体系，然后才会委托给Servlet容器的FilterChain进行Servlet容器级别的Filter链执行</p>
</blockquote>
]]></content>
      <categories>
        <category>源码分析</category>
      </categories>
      <tags>
        <tag>Shiro</tag>
        <tag>认证</tag>
        <tag>授权</tag>
        <tag>servlet</tag>
      </tags>
  </entry>
  <entry>
    <title>RESTful Code 设计</title>
    <url>/2020/10/22/RESTful%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<blockquote>
<p>一个好的系统，即使在出错的时候，也应该是对开发人员友好的(可根据错误信息快速定位到问题)</p>
</blockquote>
<h2 id="CODE码需解决的问题"><a href="#CODE码需解决的问题" class="headerlink" title="CODE码需解决的问题"></a>CODE码需解决的问题</h2><blockquote>
<ol>
<li>标识具体出了什么问题；</li>
<li>标识哪个服务/中间件出了问题;</li>
<li>通过CODE码快速定位问题和解决方案；</li>
<li>通过CODE码前端判断显示内容;</li>
</ol>
</blockquote>
<h2 id="RESTful-设计风格下的状态码"><a href="#RESTful-设计风格下的状态码" class="headerlink" title="RESTful 设计风格下的状态码"></a>RESTful 设计风格下的状态码</h2><blockquote>
<p>在REST的设计中，CODE码有两种设计方式：</p>
<ol>
<li>遵循RESTful标准，使用或扩展RFC2616定义的标准HTTP状态码；</li>
<li>在ReposeBody中自定义REST CODE码；</li>
</ol>
<p>在知乎上有两个对REST码和HTTP码讨论的<a href="https://www.zhihu.com/question/309888255" target="_blank" rel="noopener">问题一</a>、<a href="https://www.zhihu.com/question/310737821/answer/585641618" target="_blank" rel="noopener">问题二</a></p>
<p>在各大厂中，Google/阿里使用遵循RESTful的设计方式，腾讯系列使用自定义REST CODE的设计方式；</p>
</blockquote>
<h3 id="两种设计方式的原因"><a href="#两种设计方式的原因" class="headerlink" title="两种设计方式的原因"></a>两种设计方式的原因</h3><h4 id="遵循RESTful-HTTP标准"><a href="#遵循RESTful-HTTP标准" class="headerlink" title="遵循RESTful/HTTP标准"></a>遵循RESTful/HTTP标准</h4><blockquote>
<ol>
<li>在标准满足业务的基础上，遵守标准。 将表示‘处理状态’的字段code放在body中相当于自定义一个协议；</li>
<li>占用端对端的数据容量；</li>
<li>相对前端来说，HTTP本身有CODE码，BODY中再增加REST CODE增加复杂度；</li>
</ol>
</blockquote>
<h4 id="自定义REST-CODE码"><a href="#自定义REST-CODE码" class="headerlink" title="自定义REST CODE码"></a>自定义REST CODE码</h4><blockquote>
<ol>
<li>HTTP(或RESTful)规范的设计目标是整个互联网资源，CODE码只定义了大概的方向，具体业务需要具体针对；</li>
<li>标准HTTP CODE业务场景不足，像404，不能具体表示用户不存在或者订单不存在或者商品不存在；</li>
<li>如果沿用CODE码，部分宽带服务商会把非200响应跳转到其他页面(可使用https解决该问题)；</li>
</ol>
</blockquote>
<h2 id="遵循RESTful的设计"><a href="#遵循RESTful的设计" class="headerlink" title="遵循RESTful的设计"></a>遵循RESTful的设计</h2><blockquote>
<ol>
<li>自定义 <strong>错误代码-HTTP状态码</strong> 的对应关系;</li>
<li>在各微服务的Response Data中返回 errorCode、 serviceName、 errorMessage等，具体参考附录中的结构；在gateway中屏蔽掉某些字段后返回；</li>
</ol>
</blockquote>
<h2 id="REST-CODE码分类"><a href="#REST-CODE码分类" class="headerlink" title="REST CODE码分类"></a>REST CODE码分类</h2><blockquote>
<p>系统错误(码)<br>主要指系统和操作系统交互中的错误；如socker错误、文件IO错误、申请内存错误等。<br>系统错误需要在后台日志中记录详细的错误堆栈信息。</p>
</blockquote>
<blockquote>
<p>业务错误(码)<br>主要是指业务系统内部的错误；如参数不合法、登陆时用户名或密码错误、操作不符合某业务条件等。<br>业务错误不需要再后台日志中记录详细的错误堆栈信息。</p>
</blockquote>
<blockquote>
<p>依赖服务错误(码)<br>主要是指业务系统依赖的基础服务发生的错误；如mongo/mysql/cache连接错误、上游服务超时或返回错误等。<br>依赖服务错误需要记录到后台日志中。</p>
</blockquote>
<h2 id="CSERVICE-CODE设计"><a href="#CSERVICE-CODE设计" class="headerlink" title="CSERVICE CODE设计"></a>CSERVICE CODE设计</h2><h3 id="HTTP-CODE码规划V1"><a href="#HTTP-CODE码规划V1" class="headerlink" title="HTTP CODE码规划V1"></a>HTTP CODE码规划V1</h3><table>
<thead>
<tr>
<th>CODE</th>
<th>MSG</th>
<th>DES</th>
<th>EMPLOY</th>
</tr>
</thead>
<tbody><tr>
<td>100</td>
<td>Continue</td>
<td>服务器已经接收到请求头，并且客户端应继续发送请求主体</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>200</td>
<td>Ok</td>
<td>请求已成功</td>
<td></td>
</tr>
<tr>
<td>201</td>
<td>Create</td>
<td>请求已被实现，且有一个新的资源被依需而创建</td>
<td></td>
</tr>
<tr>
<td>202</td>
<td>Accepted</td>
<td>服务器已接受请求，但尚未处理。最终可能会也可能不会被处理</td>
<td></td>
</tr>
<tr>
<td>205</td>
<td>Reset Content</td>
<td>服务器成功处理了请求，但没有返回任何内容。改响应要求请求者重置文档视图</td>
<td>？？？</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>301</td>
<td>Moved Permanently</td>
<td>永久重定向</td>
<td></td>
</tr>
<tr>
<td>302</td>
<td>Found</td>
<td>临时重定向</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>400</td>
<td>Bad Request</td>
<td>客户端错误，服务器不处理该请求</td>
<td></td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
<td>用户未认证</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td>服务器已理解请求，但拒绝执行该请求。在响应实体中讲清楚为何不能被执行</td>
<td></td>
</tr>
<tr>
<td>404</td>
<td>Not Found</td>
<td>资源未找到</td>
<td></td>
</tr>
<tr>
<td>405</td>
<td>Method Not Allowed</td>
<td>请求行中的请求方法不能用于请求该资源。需返回一个Allow头信息用以表示当前资源能接受的请求方法列表</td>
<td></td>
</tr>
<tr>
<td>407</td>
<td>Proxy Authentication Required</td>
<td>客户端必须在代理服务器上进行身份验证</td>
<td></td>
</tr>
<tr>
<td>408</td>
<td>Request Timeout</td>
<td>请求超时</td>
<td></td>
</tr>
<tr>
<td>410</td>
<td>Gone</td>
<td>请求的资源不再可用</td>
<td></td>
</tr>
<tr>
<td>413</td>
<td>Request Entity Too Large</td>
<td>服务器拒绝处理当前请求，因为请求提交的数据超过服务器处理范围</td>
<td></td>
</tr>
<tr>
<td>415</td>
<td>Unsupported Media Type</td>
<td>请求提交的媒体类型不是服务器支持的类型</td>
<td></td>
</tr>
<tr>
<td>418</td>
<td>I’m a teapot</td>
<td>彩蛋状态码（看以后是否能用到）</td>
<td></td>
</tr>
<tr>
<td>424</td>
<td>Locked</td>
<td>当前资源被锁定</td>
<td></td>
</tr>
<tr>
<td>451</td>
<td>Unavailable For Legal Reasons</td>
<td>法律要求而拒绝</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>500</td>
<td>Internal Server Error</td>
<td>通用错误，服务器遇到一个未曾预料的状况</td>
<td></td>
</tr>
<tr>
<td>501</td>
<td>Not Implemented</td>
<td>服务器不支持当前请求所需的某个功能</td>
<td></td>
</tr>
<tr>
<td>502</td>
<td>Bad Gateway</td>
<td>在网关或代理服务器请求时，上游服务器接收到无效响应</td>
<td></td>
</tr>
<tr>
<td>503</td>
<td>Service Unavailable</td>
<td>由于服务器临时维护或过载，服务器无法处理该请求</td>
<td></td>
</tr>
<tr>
<td>504</td>
<td>Gateway Timeout</td>
<td>在网关或代理服务器请求时，上游服务器超时</td>
<td></td>
</tr>
</tbody></table>
<h3 id="HTTP-CODE码规划V2"><a href="#HTTP-CODE码规划V2" class="headerlink" title="HTTP CODE码规划V2"></a>HTTP CODE码规划V2</h3><h4 id="错误代码说明"><a href="#错误代码说明" class="headerlink" title="错误代码说明"></a>错误代码说明</h4><blockquote>
<p>11209</p>
</blockquote>
<table>
<thead>
<tr>
<th>1</th>
<th>12</th>
<th>09</th>
</tr>
</thead>
<tbody><tr>
<td>系统级错误（1:系统级、2:服务级、3:其他）</td>
<td>服务模块</td>
<td>具体错误</td>
</tr>
</tbody></table>
<h4 id="服务代码定义"><a href="#服务代码定义" class="headerlink" title="服务代码定义"></a>服务代码定义</h4><table>
<thead>
<tr>
<th>服务代码</th>
<th>DESC</th>
</tr>
</thead>
<tbody><tr>
<td>10</td>
<td>gateway_server</td>
</tr>
<tr>
<td>11</td>
<td>media_server</td>
</tr>
<tr>
<td>12</td>
<td>sms_server</td>
</tr>
<tr>
<td>13</td>
<td>order_server</td>
</tr>
<tr>
<td>14</td>
<td>ucenter_server</td>
</tr>
<tr>
<td>15</td>
<td>sso_server</td>
</tr>
<tr>
<td>30</td>
<td>mysql_server</td>
</tr>
<tr>
<td>31</td>
<td>mongo_server</td>
</tr>
<tr>
<td>32</td>
<td>redis_server</td>
</tr>
</tbody></table>
<h4 id="具体错误定义"><a href="#具体错误定义" class="headerlink" title="具体错误定义"></a>具体错误定义</h4><table>
<thead>
<tr>
<th>错误代码</th>
<th>MSG</th>
<th>DES</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>OK</td>
<td>成功</td>
</tr>
<tr>
<td>01</td>
<td>System error</td>
<td>系统错误</td>
</tr>
<tr>
<td>02</td>
<td>System unavailable</td>
<td>服务暂停</td>
</tr>
<tr>
<td>03</td>
<td>Remote Service error</td>
<td>远程服务错误</td>
</tr>
<tr>
<td>04</td>
<td>IP limit</td>
<td>IP限制不能请求该资源</td>
</tr>
<tr>
<td>05</td>
<td>Too many pending tasks, system is busy</td>
<td>系统繁忙</td>
</tr>
<tr>
<td>06</td>
<td>Job expired</td>
<td>请求超时</td>
</tr>
<tr>
<td>07</td>
<td>Illegal request</td>
<td>非法请求</td>
</tr>
<tr>
<td>08</td>
<td>Request api not found</td>
<td>接口不存在</td>
</tr>
<tr>
<td>09</td>
<td>HTTP method is not suported for this request</td>
<td>请求的HTTP METHOD不支持</td>
</tr>
<tr>
<td>10</td>
<td>IP requests out of rate limit</td>
<td>IP请求次数过多</td>
</tr>
<tr>
<td>11</td>
<td>User requests out of rate limit</td>
<td>用户请求次数过多</td>
</tr>
<tr>
<td>12</td>
<td>Param error</td>
<td>参数错误</td>
</tr>
<tr>
<td>13</td>
<td>REQUEST_BODY_LENGTH_OVER_LIMIT</td>
<td>请求体过长</td>
</tr>
<tr>
<td>14</td>
<td>USER_DOES_NOT_EXISTS</td>
<td>用户不存在</td>
</tr>
<tr>
<td>15</td>
<td>OUT_OF_LIMIT</td>
<td>提交内容过于频繁</td>
</tr>
<tr>
<td>16</td>
<td>REPEAT_CONTENT</td>
<td>提交相似内容</td>
</tr>
<tr>
<td>17</td>
<td>Contain illegal website</td>
<td>包含非法网址</td>
</tr>
<tr>
<td>18</td>
<td>Content is illegal</td>
<td>包含非法内容</td>
</tr>
<tr>
<td>19</td>
<td>Your ip’s behave in a comic boisterous or unruly manner</td>
<td>IP流量异常</td>
</tr>
<tr>
<td>20</td>
<td>sms can’t null</td>
<td>短信验证码不能为空</td>
</tr>
<tr>
<td>21</td>
<td>Illegal entity id</td>
<td>不合法的实体ID</td>
</tr>
<tr>
<td>22</td>
<td>DB error</td>
<td>DB错误</td>
</tr>
<tr>
<td>23</td>
<td>mongo error</td>
<td>MONGO异常</td>
</tr>
<tr>
<td>24</td>
<td>redis error</td>
<td>REDIS异常</td>
</tr>
<tr>
<td>25</td>
<td>The phone number has been used</td>
<td>该手机号已经被使用</td>
</tr>
<tr>
<td>26</td>
<td>The account has bean bind phone</td>
<td>该用户已绑定手机号</td>
</tr>
<tr>
<td>27</td>
<td>Auth faild</td>
<td>认证失败</td>
</tr>
<tr>
<td>28</td>
<td>Username or password error</td>
<td>用户名或密码错误</td>
</tr>
<tr>
<td>29</td>
<td>Username and pwd auth out of rate limit</td>
<td>用户密码超过请求限制</td>
</tr>
<tr>
<td>30</td>
<td>Version rejected</td>
<td>版本号错误</td>
</tr>
<tr>
<td>31</td>
<td>Token expired</td>
<td>Token已经过期</td>
</tr>
<tr>
<td>32</td>
<td>Token revoked</td>
<td>Token不合法</td>
</tr>
<tr>
<td>33</td>
<td>Invalid status</td>
<td>无效状态码</td>
</tr>
<tr>
<td>34</td>
<td>BaseResCode error</td>
<td>返回码设置异常</td>
</tr>
<tr>
<td>35</td>
<td>SMS error</td>
<td>短信验证码错误</td>
</tr>
<tr>
<td>36</td>
<td>NOT SUPPORT LOGIN METHOD</td>
<td>请选择验证码登录或密码登录</td>
</tr>
<tr>
<td>37</td>
<td>User has bean lock, please contact admin</td>
<td>账号已被锁定,请联系管理员</td>
</tr>
<tr>
<td>38</td>
<td>Cap error</td>
<td>图片验证码错误</td>
</tr>
<tr>
<td>39</td>
<td>Reference not found</td>
<td>推荐人不存在</td>
</tr>
</tbody></table>
<h4 id="错误代码对照表"><a href="#错误代码对照表" class="headerlink" title="错误代码对照表"></a>错误代码对照表</h4><h5 id="系统级错误"><a href="#系统级错误" class="headerlink" title="系统级错误"></a>系统级错误</h5><table>
<thead>
<tr>
<th>CODE</th>
<th>MSG</th>
<th>DES</th>
</tr>
</thead>
<tbody><tr>
<td>10001</td>
<td>System error</td>
<td>系统错误</td>
</tr>
<tr>
<td>10002</td>
<td>System unavailable</td>
<td>服务暂停</td>
</tr>
<tr>
<td>10003</td>
<td>Remote Service error</td>
<td>远程服务错误</td>
</tr>
<tr>
<td>10004</td>
<td>IP limit</td>
<td>IP限制不能请求该资源</td>
</tr>
<tr>
<td>10005</td>
<td>Param error</td>
<td>参数错误</td>
</tr>
<tr>
<td>10006</td>
<td>Too many pending tasks, system is busy</td>
<td>系统繁忙</td>
</tr>
<tr>
<td>10007</td>
<td>Job expired</td>
<td>请求超时</td>
</tr>
<tr>
<td>10008</td>
<td>Illegal request</td>
<td>非法请求</td>
</tr>
<tr>
<td>10009</td>
<td>Miss required parameter</td>
<td>缺少必要的参数</td>
</tr>
<tr>
<td>10010</td>
<td>Request body length over limit</td>
<td>请求体过长</td>
</tr>
<tr>
<td>10011</td>
<td>Request api not found</td>
<td>接口不存在</td>
</tr>
<tr>
<td>10012</td>
<td>HTTP method is not suported for this request</td>
<td>请求的HTTP METHOD不支持</td>
</tr>
<tr>
<td>10013</td>
<td>IP requests out of rate limit</td>
<td>IP请求次数过多</td>
</tr>
<tr>
<td>10014</td>
<td>User requests out of rate limit</td>
<td>用户请求次数过多</td>
</tr>
</tbody></table>
<h5 id="服务级错误"><a href="#服务级错误" class="headerlink" title="服务级错误"></a>服务级错误</h5><table>
<thead>
<tr>
<th>CODE</th>
<th>MSG</th>
<th>DES</th>
</tr>
</thead>
<tbody><tr>
<td>20001</td>
<td>System error</td>
<td>系统错误</td>
</tr>
</tbody></table>
<h2 id="HTTP标准状态码"><a href="#HTTP标准状态码" class="headerlink" title="HTTP标准状态码"></a>HTTP标准状态码</h2><blockquote>
<p>HTTP 状态码是用来表示网页服务器超文本传输协议响应状态的3位数字代码，由RFC 2616规范定义。</p>
<p>所有状态码的第一个数字代表了响应的五种状态之一 。</p>
</blockquote>
<h3 id="1xx-表示消息"><a href="#1xx-表示消息" class="headerlink" title="1xx 表示消息"></a>1xx 表示消息</h3><blockquote>
<p>这一类型的状态码，代表请求已被接受，需要继续处理。这类响应是临时响应，只包含状态行和某些可选的响应头信息，并以空行结束。由于HTTP/1.0协议中没有定义任何1xx状态码，所以除非在某些试验条件下，服务器禁止向此类客户端发送1xx响应。这些状态码代表的响应都是信息性的，标示客户应该采取的其他行动。</p>
</blockquote>
<h4 id="100-Continue"><a href="#100-Continue" class="headerlink" title="100 Continue"></a>100 Continue</h4><blockquote>
<p>服务器已经接收到请求头，并且客户端应继续发送请求主体（在需要发送身体的请求的情况下：例如，POST请求）,或者如果请求已经完成，忽略这个响应。服务器必须在请求完成后向客户端发送一个最终响应。要使服务器检查请求的头部，客户端必须在其初始请求中发送<code>Expect: 100-continue</code>作为头部，并在发送正文之前接收<code>100 Continue</code>状态代码。响应代码417期望失败表示请求不应继续。</p>
</blockquote>
<h4 id="101-Switching-Protocols"><a href="#101-Switching-Protocols" class="headerlink" title="101 Switching Protocols"></a>101 Switching Protocols</h4><blockquote>
<p>服务器已经理解了客户端的请求，并将通过Upgrade消息头通知客户端采用不同的协议来完成这个请求。在发送完这个响应最后的空行后，服务器将会切换到在Upgrade消息头中定义的那些协议。</p>
<p>只有在切换新的协议更有好处的时候才应该采取类似措施。例如，切换到新的HTTP版本（如HTTP/2）比旧版本更有优势，或者切换到一个实时且同步的协议（如WebSocket）以传送利用此类特性的资源。</p>
</blockquote>
<h4 id="102-Processing"><a href="#102-Processing" class="headerlink" title="102 Processing"></a>102 Processing</h4><blockquote>
<p>WebDAV请求可能包含许多涉及文件操作的子请求，需要很长时间才能完成请求。该代码表示服务器已经收到并正在处理请求，但无响应可用。这样可以防止客户端超时，并假设请求丢失。</p>
</blockquote>
<h3 id="2xx-表示成功"><a href="#2xx-表示成功" class="headerlink" title="2xx 表示成功"></a>2xx 表示成功</h3><blockquote>
<p>这一类型的状态码，代表请求已成功被服务器接收、理解、并接受。</p>
</blockquote>
<h4 id="200-Ok"><a href="#200-Ok" class="headerlink" title="200 Ok"></a>200 Ok</h4><blockquote>
<p>请求已成功，请求所希望的响应头或数据体将随此响应返回。实际的响应将取决于所使用的请求方法。在GET请求中，响应将包含与请求的资源相对应的实体。在POST请求中，响应将包含描述或操作结果的实体。</p>
</blockquote>
<h4 id="201-Created"><a href="#201-Created" class="headerlink" title="201 Created"></a>201 Created</h4><blockquote>
<p>请求已经被实现，而且有一个新的资源已经依据请求的需要而创建，且其URI已经随Location头信息返回。假如需要的资源无法及时创建的话，应当返回202 Accepted.</p>
</blockquote>
<h4 id="202-Accepted"><a href="#202-Accepted" class="headerlink" title="202 Accepted"></a>202 Accepted</h4><blockquote>
<p>服务器已接受请求，但尚未处理。最终该请求可能会也可能不会被执行，并且可能在处理发生时被禁止。</p>
</blockquote>
<h4 id="203-Non-Authoritative-Information（自HTTP-1-1起）"><a href="#203-Non-Authoritative-Information（自HTTP-1-1起）" class="headerlink" title="203 Non-Authoritative Information（自HTTP / 1.1起）"></a>203 Non-Authoritative Information（自HTTP / 1.1起）</h4><blockquote>
<p>服务器是一个转换代理服务器（transforming proxy，例如网络加速器），以<code>200 OK</code>状态码为起源，但回应了原始响应的修改版本。</p>
</blockquote>
<h4 id="204-No-Content"><a href="#204-No-Content" class="headerlink" title="204 No Content"></a>204 No Content</h4><blockquote>
<p>服务器成功处理了请求，没有返回任何内容。在强制门户功能中，Wifi设备连接到需要进行Web认证的Wifi接入点时，通过访问一个能生成HTTP 204响应的的网站，如果能正常收到204响应，则代表无需Web认证，否则会弹出网页浏览器界面，显示出Web网页认证界面用于让用户认证登录。</p>
</blockquote>
<h4 id="205-Reset-Content"><a href="#205-Reset-Content" class="headerlink" title="205 Reset Content"></a>205 Reset Content</h4><blockquote>
<p>服务器成功处理了请求，但没有返回任何内容。与204响应不同，此响应要求请求者重置文档视图。</p>
</blockquote>
<h4 id="206-Partial-Content"><a href="#206-Partial-Content" class="headerlink" title="206 Partial Content"></a>206 Partial Content</h4><blockquote>
<p>服务器已经成功处理了部分GET请求。类似于FlashGet或者迅雷这类的HTTP下载工具都是使用此类响应实现断点续传或者将一个大文档分解为多个下载段同时下载。</p>
</blockquote>
<h4 id="207-Multi-Status"><a href="#207-Multi-Status" class="headerlink" title="207 Multi-Status"></a>207 Multi-Status</h4><blockquote>
<p>代表之后的消息体将是一个XML消息，并且可能依照之前子请求数量的不同，包含一系列独立的响应代码。</p>
</blockquote>
<h4 id="208-Already-Reported"><a href="#208-Already-Reported" class="headerlink" title="208 Already Reported"></a>208 <strong>Already Reported</strong></h4><blockquote>
<p>DAV绑定的成员已经在（多状态）响应之前的部分被列举，且未被再次包含。</p>
</blockquote>
<h4 id="226-IM-Used"><a href="#226-IM-Used" class="headerlink" title="226 IM Used"></a>226 <strong>IM Used</strong></h4><blockquote>
<p>服务器已经满足了对资源的请求，对实体请求的一个或多个实体操作的结果表示。</p>
</blockquote>
<h3 id="3xx-表示重定向"><a href="#3xx-表示重定向" class="headerlink" title="3xx 表示重定向"></a>3xx 表示重定向</h3><blockquote>
<p>这类状态码代表需要客户端采取进一步的操作才能完成请求。通常，这些状态码用来重定向，后续的请求地址（重定向目标）在本次响应的Location域中指明。</p>
<p>当且仅当后续的请求所使用的方法是GET或者HEAD时，用户浏览器才可以在没有用户介入的情况下自动提交所需要的后续请求。客户端应当自动监测无限循环重定向（例如：A→B→C→……→A或A→A），因为这会导致服务器和客户端大量不必要的资源消耗。按照HTTP/1.0版规范的建议，浏览器不应自动访问超过5次的重定向。</p>
</blockquote>
<h4 id="300-Multiple-Choices"><a href="#300-Multiple-Choices" class="headerlink" title="300 Multiple Choices"></a>300 Multiple Choices</h4><blockquote>
<p>被请求的资源有一系列可供选择的回馈信息，每个都有自己特定的地址和浏览器驱动的商议信息。用户或浏览器能够自行选择一个首选的地址进行重定向。</p>
<p>除非这是一个HEAD请求，否则该响应应当包括一个资源特性及地址的列表的实体，以便用户或浏览器从中选择最合适的重定向地址。这个实体的格式由Content-Type定义的格式所决定。浏览器可能根据响应的格式以及浏览器自身能力，自动作出最合适的选择。当然，RFC 2616规范并没有规定这样的自动选择该如何进行。</p>
<p>如果服务器本身已经有了首选的回馈选择，那么在Location中应当指明这个回馈的URI；浏览器可能会将这个Location值作为自动重定向的地址。此外，除非额外指定，否则这个响应也是可缓存的。</p>
</blockquote>
<h4 id="301-Moved-Permanently"><a href="#301-Moved-Permanently" class="headerlink" title="301 Moved Permanently"></a>301 Moved Permanently</h4><blockquote>
<p>被请求的资源已永久移动到新位置，并且将来任何对此资源的引用都应该使用本响应返回的若干个URI之一。如果可能，拥有链接编辑功能的客户端应当自动把请求的地址修改为从服务器反馈回来的地址。除非额外指定，否则这个响应也是可缓存的。</p>
<p>新的永久性的URI应当在响应的Location域中返回。除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。</p>
<p>如果这不是一个GET或者HEAD请求，那么浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。</p>
<p>注意：对于某些使用HTTP/1.0协议的浏览器，当它们发送的POST请求得到了一个301响应的话，接下来的重定向请求将会变成GET方式。</p>
</blockquote>
<h4 id="302-Found"><a href="#302-Found" class="headerlink" title="302 Found"></a>302 Found</h4><blockquote>
<p>要求客户端执行临时重定向（原始描述短语为“Moved Temporarily”）。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。只有在Cache-Control或Expires中进行了指定的情况下，这个响应才是可缓存的。</p>
<p>新的临时性的URI应当在响应的Location域中返回。除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。</p>
<p>如果这不是一个GET或者HEAD请求，那么浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。</p>
<p>注意：虽然RFC 1945和RFC 2068规范不允许客户端在重定向时改变请求的方法，但是很多现存的浏览器将302响应视作为，并且使用GET方式访问在Location中规定的URI，而无视原先请求的方法。因此状态码303和被添加了进来，用以明确服务器期待客户端进行何种反应。</p>
</blockquote>
<h4 id="303-See-Other"><a href="#303-See-Other" class="headerlink" title="303 See Other"></a>303 See Other</h4><blockquote>
<p>对应当前请求的响应可以在另一个URI上被找到，当响应于POST（或PUT / DELETE）接收到响应时，客户端应该假定服务器已经收到数据，并且应该使用单独的GET消息发出重定向。这个方法的存在主要是为了允许由脚本激活的POST请求输出重定向到一个新的资源。这个新的URI不是原始资源的替代引用。同时，303响应禁止被缓存。当然，第二个请求（重定向）可能被缓存。</p>
<p>新的URI应当在响应的Location域中返回。除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。</p>
<p>注意：许多HTTP/1.1版以前的浏览器不能正确理解303状态。如果需要考虑与这些浏览器之间的互动，应该可以胜任，因为大多数的浏览器处理302响应时的方式恰恰就是上述规范要求客户端处理303响应时应当做的。</p>
</blockquote>
<h4 id="304-Not-Modified"><a href="#304-Not-Modified" class="headerlink" title="304 Not Modified"></a>304 Not Modified</h4><blockquote>
<p>表示资源在由请求头中的If-Modified-Since或If-None-Match参数指定的这一版本之后，未曾被修改。在这种情况下，由于客户端仍然具有以前下载的副本，因此不需要重新传输资源。</p>
</blockquote>
<h4 id="305-Use-Proxy"><a href="#305-Use-Proxy" class="headerlink" title="305 Use Proxy"></a>305 Use Proxy</h4><blockquote>
<p>被请求的资源必须通过指定的代理才能被访问。Location域中将给出指定的代理所在的URI信息，接收者需要重复发送一个单独的请求，通过这个代理才能访问相应资源。只有原始服务器才能创建305响应。许多HTTP客户端（像是Mozilla和Internet Explorer）都没有正确处理这种状态代码的响应，主要是出于安全考虑。</p>
<p>注意：RFC 2068中没有明确305响应是为了重定向一个单独的请求，而且只能被原始服务器创建。忽视这些限制可能导致严重的安全后果。</p>
</blockquote>
<h4 id="306-Switch-Proxy"><a href="#306-Switch-Proxy" class="headerlink" title="306 Switch Proxy"></a>306 Switch Proxy</h4><blockquote>
<p>在最新版的规范中，306状态码已经不再被使用。最初是指“后续请求应使用指定的代理”。</p>
</blockquote>
<h4 id="307-Temporary-Redirect"><a href="#307-Temporary-Redirect" class="headerlink" title="307 Temporary Redirect"></a>307 Temporary Redirect</h4><blockquote>
<p>在这种情况下，请求应该与另一个URI重复，但后续的请求应仍使用原始的URI。 与302相反，当重新发出原始请求时，不允许更改请求方法。 例如，应该使用另一个POST请求来重复POST请求。</p>
</blockquote>
<h4 id="308-Permanent-Redirect"><a href="#308-Permanent-Redirect" class="headerlink" title="308 Permanent Redirect"></a>308 Permanent Redirect</h4><blockquote>
<p>请求和所有将来的请求应该使用另一个URI重复。 307和308重复302和301的行为，但不允许HTTP方法更改。 例如，将表单提交给永久重定向的资源可能会顺利进行。</p>
</blockquote>
<h3 id="4xx-表示客户端错误"><a href="#4xx-表示客户端错误" class="headerlink" title="4xx 表示客户端错误"></a>4xx 表示客户端错误</h3><blockquote>
<p>这类的状态码代表了客户端看起来可能发生了错误，妨碍了服务器的处理。除非响应的是一个HEAD请求，否则服务器就应该返回一个解释当前错误状况的实体，以及这是临时的还是永久性的状况。这些状态码适用于任何请求方法。浏览器应当向用户显示任何包含在此类错误响应中的实体内容。</p>
<p>如果错误发生时客户端正在传送数据，那么使用TCP的服务器实现应当仔细确保在关闭客户端与服务器之间的连接之前，客户端已经收到了包含错误信息的数据包。如果客户端在收到错误信息后继续向服务器发送数据，服务器的TCP栈将向客户端发送一个重置数据包，以清除该客户端所有还未识别的输入缓冲，以免这些数据被服务器上的应用程序读取并干扰后者。</p>
</blockquote>
<h4 id="400-Bad-Request"><a href="#400-Bad-Request" class="headerlink" title="400 Bad Request"></a>400 Bad Request</h4><blockquote>
<p>由于明显的客户端错误（例如，格式错误的请求语法，太大的大小，无效的请求消息或欺骗性路由请求），服务器不能或不会处理该请求。</p>
</blockquote>
<h4 id="401-Unauthorized"><a href="#401-Unauthorized" class="headerlink" title="401 Unauthorized"></a>401 Unauthorized</h4><blockquote>
<p>类似于403 Forbidden，401语义即“未认证”，即用户没有必要的凭据。该状态码表示当前请求需要用户验证。该响应必须包含一个适用于被请求资源的WWW-Authenticate信息头用以询问用户信息。客户端可以重复提交一个包含恰当的Authorization头信息的请求。如果当前请求已经包含了Authorization证书，那么401响应代表着服务器验证已经拒绝了那些证书。如果401响应包含了与前一个响应相同的身份验证询问，且浏览器已经至少尝试了一次验证，那么浏览器应当向用户展示响应中包含的实体信息，因为这个实体信息中可能包含了相关诊断信息。</p>
<p>注意：当网站（通常是网站域名）禁止IP地址时，有些网站状态码显示的401，表示该特定地址被拒绝访问网站。</p>
</blockquote>
<h4 id="402-Payment-Required"><a href="#402-Payment-Required" class="headerlink" title="402 Payment Required"></a>402 Payment Required</h4><blockquote>
<p>该状态码是为了将来可能的需求而预留的。该状态码最初的意图可能被用作某种形式的数字现金或在线支付方案的一部分，但几乎没有哪家服务商使用，而且这个状态码通常不被使用。如果特定开发人员已超过请求的每日限制，Google Developers API会使用此状态码。</p>
</blockquote>
<h4 id="403-Forbidden"><a href="#403-Forbidden" class="headerlink" title="403 Forbidden"></a>403 Forbidden</h4><blockquote>
<p>服务器已经理解请求，但是拒绝执行它。与401响应不同的是，身份验证并不能提供任何帮助，而且这个请求也不应该被重复提交。如果这不是一个HEAD请求，而且服务器希望能够讲清楚为何请求不能被执行，那么就应该在实体内描述拒绝的原因。当然服务器也可以返回一个404响应，假如它不希望让客户端获得任何信息。</p>
</blockquote>
<h4 id="404-Not-Found"><a href="#404-Not-Found" class="headerlink" title="404 Not Found"></a>404 Not Found</h4><blockquote>
<p>请求失败，请求所希望得到的资源未被在服务器上发现，但允许用户的后续请求。没有信息能够告诉用户这个状况到底是暂时的还是永久的。假如服务器知道情况的话，应当使用410状态码来告知旧资源因为某些内部的配置机制问题，已经永久的不可用，而且没有任何可以跳转的地址。404这个状态码被广泛应用于当服务器不想揭示到底为何请求被拒绝或者没有其他适合的响应可用的情况下。</p>
</blockquote>
<blockquote>
<p>请求的资源的内容特性无法满足请求头中的条件，因而无法生成响应实体，该请求不可接受。</p>
<p>除非这是一个HEAD请求，否则该响应就应当返回一个包含可以让用户或者浏览器从中选择最合适的实体特性以及地址栏表的实体。实体的格式由Content-Type头中定义的媒体类型决定。浏览器可以根据格式及自身能力自行作出最佳选择。但是，规范中并没有定义任何作出此类自动选择的标准。</p>
</blockquote>
<h4 id="405-Method-Not-Allowed"><a href="#405-Method-Not-Allowed" class="headerlink" title="405 Method Not Allowed"></a>405 Method Not Allowed</h4><blockquote>
<p>请求行中指定的请求方法不能被用于请求相应的资源。该响应必须返回一个Allow头信息用以表示出当前资源能够接受的请求方法的列表。例如，需要通过POST呈现数据的表单上的GET请求，或只读资源上的PUT请求。</p>
<p>鉴于PUT，DELETE方法会对服务器上的资源进行写操作，因而绝大部分的网页服务器都不支持或者在默认配置下不允许上述请求方法，对于此类请求均会返回405错误。</p>
</blockquote>
<h4 id="406-Not-Acceptable"><a href="#406-Not-Acceptable" class="headerlink" title="406 Not Acceptable"></a>406 Not Acceptable</h4><blockquote>
<p>请求的资源的内容特性无法满足请求头中的条件，因而无法生成响应实体，该请求不可接受。</p>
<p>除非这是一个HEAD请求，否则该响应就应当返回一个包含可以让用户或者浏览器从中选择最合适的实体特性以及地址栏表的实体。实体的格式由Content-Type头中定义的媒体类型决定。浏览器可以根据格式及自身能力自行作出最佳选择。但是，规范中并没有定义任何作出此类自动选择的标准。</p>
</blockquote>
<h4 id="407-Proxy-Authentication-Required"><a href="#407-Proxy-Authentication-Required" class="headerlink" title="407 Proxy Authentication Required"></a>407 Proxy Authentication Required</h4><blockquote>
<p>与401响应类似，只不过客户端必须在代理服务器上进行身份验证。代理服务器必须返回一个Proxy-Authenticate用以进行身份询问。客户端可以返回一个Proxy-Authorization信息头用以验证。</p>
</blockquote>
<h4 id="408-Request-Timeout"><a href="#408-Request-Timeout" class="headerlink" title="408 Request Timeout"></a>408 Request Timeout</h4><blockquote>
<p>请求超时。根据HTTP规范，客户端没有在服务器预备等待的时间内完成一个请求的发送，客户端可以随时再次提交这一请求而无需进行任何更改。</p>
</blockquote>
<h4 id="409-Conflict"><a href="#409-Conflict" class="headerlink" title="409 Conflict"></a>409 Conflict</h4><blockquote>
<p>表示因为请求存在冲突无法处理该请求，例如多个同步更新之间的编辑冲突。</p>
</blockquote>
<h4 id="410-Gone"><a href="#410-Gone" class="headerlink" title="410 Gone"></a>410 Gone</h4><blockquote>
<p>表示所请求的资源不再可用，将不再可用。当资源被有意地删除并且资源应被清除时，应该使用这个。在收到410状态码后，用户应停止再次请求资源。但大多数服务端不会使用此状态码，而是直接使用404状态码。</p>
</blockquote>
<h4 id="411-Length-Required"><a href="#411-Length-Required" class="headerlink" title="411 Length Required"></a>411 Length Required</h4><blockquote>
<p>服务器拒绝在没有定义Content-Length头的情况下接受请求。在添加了表明请求消息体长度的有效Content-Length头之后，客户端可以再次提交该请求。</p>
</blockquote>
<h4 id="412-Precondition-Failed"><a href="#412-Precondition-Failed" class="headerlink" title="412 Precondition Failed"></a>412 Precondition Failed</h4><blockquote>
<p>服务器在验证在请求的头字段中给出先决条件时，没能满足其中的一个或多个。这个状态码允许客户端在获取资源时在请求的元信息（请求头字段数据）中设置先决条件，以此避免该请求方法被应用到其希望的内容以外的资源上。</p>
</blockquote>
<h4 id="413-Request-Entity-Too-Large"><a href="#413-Request-Entity-Too-Large" class="headerlink" title="413 Request Entity Too Large"></a>413 Request Entity Too Large</h4><blockquote>
<p>前称“Request Entity Too Large”，表示服务器拒绝处理当前请求，因为该请求提交的实体数据大小超过了服务器愿意或者能够处理的范围。此种情况下，服务器可以关闭连接以免客户端继续发送此请求。</p>
<p>如果这个状况是临时的，服务器应当返回一个Retry-After的响应头，以告知客户端可以在多少时间以后重新尝试。</p>
</blockquote>
<h4 id="414-Request-URI-Too-Long"><a href="#414-Request-URI-Too-Long" class="headerlink" title="414 Request-URI Too Long"></a>414 Request-URI Too Long</h4><blockquote>
<p>前称“Request-URI Too Long”，表示请求的URI长度超过了服务器能够解释的长度，因此服务器拒绝对该请求提供服务。通常将太多数据的结果编码为GET请求的查询字符串，在这种情况下，应将其转换为POST请求。这比较少见，通常的情况包括：</p>
</blockquote>
<h4 id="415-Unsupported-Media-Type"><a href="#415-Unsupported-Media-Type" class="headerlink" title="415 Unsupported Media Type"></a>415 Unsupported Media Type</h4><blockquote>
<p>对于当前请求的方法和所请求的资源，请求中提交的互联网媒体类型并不是服务器中所支持的格式，因此请求被拒绝。例如，客户端将图像上传格式为svg，但服务器要求图像使用上传格式为jpg。</p>
</blockquote>
<h4 id="416-Requested-Range-Not-Satisfiable"><a href="#416-Requested-Range-Not-Satisfiable" class="headerlink" title="416 Requested Range Not Satisfiable"></a>416 Requested Range Not Satisfiable</h4><blockquote>
<p>前称“Requested Range Not Satisfiable”。客户端已经要求文件的一部分（Byte serving），但服务器不能提供该部分。例如，如果客户端要求文件的一部分超出文件尾端。</p>
</blockquote>
<h4 id="417-Expectation-Failed"><a href="#417-Expectation-Failed" class="headerlink" title="417 Expectation Failed"></a>417 Expectation Failed</h4><blockquote>
<p>在请求头Expect中指定的预期内容无法被服务器满足，或者这个服务器是一个代理服显的证据证明在当前路由的下一个节点上，Expect的内容无法被满足。</p>
</blockquote>
<h4 id="418-I’m-a-teapot"><a href="#418-I’m-a-teapot" class="headerlink" title="418 I’m a teapot"></a>418 I’m a teapot</h4><blockquote>
<p>本操作码是在1998年作为IETF的传统愚人节笑话, 在RFC 2324超文本咖啡壶控制协议’中定义的，并不需要在真实的HTTP服务器中定义。当一个控制茶壶的HTCPCP收到BREW或POST指令要求其煮咖啡时应当回传此错误。这个HTTP状态码在某些网站（包括Google.com）与项目（如Node.js、ASP.NET和Go语言）中用作彩蛋。</p>
</blockquote>
<h4 id="422-Misdirected-Request"><a href="#422-Misdirected-Request" class="headerlink" title="422 Misdirected Request"></a>422 Misdirected Request</h4><blockquote>
<p>该请求针对的是无法产生响应的服务器（例如因为连接重用）。</p>
</blockquote>
<h4 id="423-Unprocessable-Entity"><a href="#423-Unprocessable-Entity" class="headerlink" title="423 Unprocessable Entity"></a>423 Unprocessable Entity</h4><blockquote>
<p>请求格式正确，但是由于含有语义错误，无法响应。</p>
</blockquote>
<h4 id="424-Locked"><a href="#424-Locked" class="headerlink" title="424 Locked"></a>424 Locked</h4><blockquote>
<p>当前资源被锁定。</p>
</blockquote>
<h4 id="425-Failed-Dependency"><a href="#425-Failed-Dependency" class="headerlink" title="425 Failed Dependency"></a>425 Failed Dependency</h4><blockquote>
<p>由于之前的某个请求发生的错误，导致当前请求失败，例如PROPPATCH。</p>
</blockquote>
<h4 id="426-Too-Early"><a href="#426-Too-Early" class="headerlink" title="426 Too Early"></a>426 Too Early</h4><blockquote>
<p>服务器拒绝处理在Early Data中的请求，以规避可能的重放攻击。</p>
</blockquote>
<h4 id="427-Upgrade-Required"><a href="#427-Upgrade-Required" class="headerlink" title="427 Upgrade Required"></a>427 Upgrade Required</h4><blockquote>
<p>客户端应切换到Upgrade头字段中给出的不同协议，如TLS/1.0。</p>
</blockquote>
<h4 id="428-Precondition-Required"><a href="#428-Precondition-Required" class="headerlink" title="428 Precondition Required"></a>428 Precondition Required</h4><blockquote>
<p>原服务器要求该请求满足一定条件。这是为了防止“未更新”问题，即客户端读取（GET）一个资源的状态，更改它，并将它写（PUT）回服务器，但这期间第三方已经在服务器上更改了该资源的状态，因此导致了冲突。”</p>
</blockquote>
<h4 id="429-Too-Many-Requests"><a href="#429-Too-Many-Requests" class="headerlink" title="429 Too Many Requests"></a>429 Too Many Requests</h4><blockquote>
<p>用户在给定的时间内发送了太多的请求。旨在用于网络限速。</p>
</blockquote>
<h4 id="431-Request-Header-Fields-Too-Large"><a href="#431-Request-Header-Fields-Too-Large" class="headerlink" title="431 Request Header Fields Too Large"></a>431 Request Header Fields Too Large</h4><blockquote>
<p>服务器不愿处理请求，因为一个或多个头字段过大。</p>
</blockquote>
<h4 id="451-Unavailable-For-Legal-Reasons"><a href="#451-Unavailable-For-Legal-Reasons" class="headerlink" title="451 Unavailable For Legal Reasons"></a>451 Unavailable For Legal Reasons</h4><blockquote>
<p>该访问因法律的要求而被拒绝，由IETF在2015核准后新增加。</p>
</blockquote>
<h3 id="5xx-表示服务器错误"><a href="#5xx-表示服务器错误" class="headerlink" title="5xx 表示服务器错误"></a>5xx 表示服务器错误</h3><blockquote>
<p>表示服务器无法完成明显有效的请求。这类状态码代表了服务器在处理请求的过程中有错误或者异常状态发生，也有可能是服务器意识到以当前的软硬件资源无法完成对请求的处理。除非这是一个HEAD请求，否则服务器应当包含一个解释当前错误状态以及这个状况是临时的还是永久的解释信息实体。浏览器应当向用户展示任何在当前响应中被包含的实体。这些状态码适用于任何响应方法。</p>
</blockquote>
<h4 id="500-Internal-Server-Error"><a href="#500-Internal-Server-Error" class="headerlink" title="500 Internal Server Error"></a>500 Internal Server Error</h4><blockquote>
<p>通用错误消息，服务器遇到了一个未曾预料的状况，导致了它无法完成对请求的处理。没有给出具体错误信息。</p>
</blockquote>
<h4 id="501-Not-Implemented"><a href="#501-Not-Implemented" class="headerlink" title="501 Not Implemented"></a>501 Not Implemented</h4><blockquote>
<p>服务器不支持当前请求所需要的某个功能。当服务器无法识别请求的方法，并且无法支持其对任何资源的请求。（例如，网络服务API的新功能）</p>
</blockquote>
<h4 id="502-Bad-Gateway"><a href="#502-Bad-Gateway" class="headerlink" title="502 Bad Gateway"></a>502 Bad Gateway</h4><blockquote>
<p>作为网关或者代理工作的服务器尝试执行请求时，从上游服务器接收到无效的响应。</p>
</blockquote>
<h4 id="503-Service-Unavailable"><a href="#503-Service-Unavailable" class="headerlink" title="503 Service Unavailable"></a>503 Service Unavailable</h4><blockquote>
<p>由于临时的服务器维护或者过载，服务器当前无法处理请求。这个状况是暂时的，并且将在一段时间以后恢复。如果能够预计延迟时间，那么响应中可以包含一个Retry-After头用以标明这个延迟时间。如果没有给出这个Retry-After信息，那么客户端应当以处理500响应的方式处理它。</p>
</blockquote>
<h4 id="504-Gateway-Timeout"><a href="#504-Gateway-Timeout" class="headerlink" title="504 Gateway Timeout"></a>504 Gateway Timeout</h4><blockquote>
<p>作为网关或者代理工作的服务器尝试执行请求时，未能及时从上游服务器（URI标识出的服务器，例如HTTP、FTP、LDAP）或者辅助服务器（例如DNS）收到响应。</p>
<p>注意：某些代理服务器在DNS查询超时时会返回400或者500错误。</p>
</blockquote>
<h4 id="505-HTTP-Version-Not-Supported"><a href="#505-HTTP-Version-Not-Supported" class="headerlink" title="505 HTTP Version Not Supported"></a>505 HTTP Version Not Supported</h4><blockquote>
<p>服务器不支持，或者拒绝支持在请求中使用的HTTP版本。这暗示着服务器不能或不愿使用与客户端相同的版本。响应中应当包含一个描述了为何版本不被支持以及服务器支持哪些协议的实体。</p>
</blockquote>
<h4 id="506-Variant-Also-Negotiates"><a href="#506-Variant-Also-Negotiates" class="headerlink" title="506 Variant Also Negotiates"></a>506 Variant Also Negotiates</h4><blockquote>
<p>由《透明内容协商协议》（RFC 2295）扩展，代表服务器存在内部配置错误，被请求的协商变元资源被配置为在透明内容协商中使用自己，因此在一个协商处理中不是一个合适的重点。</p>
</blockquote>
<h4 id="507-Insufficient-Storage"><a href="#507-Insufficient-Storage" class="headerlink" title="507 Insufficient Storage"></a>507 Insufficient Storage</h4><blockquote>
<p>服务器无法存储完成请求所必须的内容。这个状况被认为是临时的。</p>
</blockquote>
<h4 id="508-Loop-Detected"><a href="#508-Loop-Detected" class="headerlink" title="508  Loop Detected"></a>508  Loop Detected</h4><blockquote>
<p>服务器在处理请求时陷入死循环。 （可代替 208状态码）</p>
</blockquote>
<h4 id="510-Not-Extended"><a href="#510-Not-Extended" class="headerlink" title="510 Not Extended"></a>510 Not Extended</h4><blockquote>
<p>获取资源所需要的策略并没有被满足。</p>
</blockquote>
<h4 id="511-Network-Authentication-Required"><a href="#511-Network-Authentication-Required" class="headerlink" title="511 Network Authentication Required"></a>511 Network Authentication Required</h4><blockquote>
<p>客户端需要进行身份验证才能获得网络访问权限，旨在限制用户群访问特定网络。（例如连接WiFi热点时的强制网络门户）</p>
</blockquote>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="RFC-2616"><a href="#RFC-2616" class="headerlink" title="RFC 2616"></a><a href="https://tools.ietf.org/html/rfc2616" target="_blank" rel="noopener">RFC 2616</a></h3><h3 id="腾讯开放平台API"><a href="#腾讯开放平台API" class="headerlink" title="腾讯开放平台API"></a><a href="https://wiki.open.qq.com/wiki/v3/user/is_area_login" target="_blank" rel="noopener">腾讯开放平台API</a></h3><h3 id="Google-RESTful文档"><a href="#Google-RESTful文档" class="headerlink" title="Google RESTful文档"></a><a href="https://www.googleapis.com/discovery/v1/apis" target="_blank" rel="noopener">Google RESTful文档</a></h3><h3 id="阿里云开发者平台"><a href="#阿里云开发者平台" class="headerlink" title="阿里云开发者平台"></a><a href="https://developer.aliyun.com/api" target="_blank" rel="noopener">阿里云开发者平台</a></h3><h3 id="GitHub-API"><a href="#GitHub-API" class="headerlink" title="GitHub API"></a><a href="https://api.github.com/" target="_blank" rel="noopener">GitHub API</a></h3><h3 id="IM开发文档"><a href="#IM开发文档" class="headerlink" title="IM开发文档"></a><a href="http://docs-im.easemob.com/start/450errorcode/10restapierrorcode" target="_blank" rel="noopener">IM开发文档</a></h3><h3 id="ERROR错误设计参考"><a href="#ERROR错误设计参考" class="headerlink" title="ERROR错误设计参考"></a><a href="https://xargin.com/error-design/" target="_blank" rel="noopener">ERROR错误设计参考</a></h3>]]></content>
      <categories>
        <category>架构</category>
      </categories>
      <tags>
        <tag>restful</tag>
        <tag>http code</tag>
        <tag>rest api</tag>
      </tags>
  </entry>
  <entry>
    <title>Java异常</title>
    <url>/2020/09/03/Java%E5%BC%82%E5%B8%B8/</url>
    <content><![CDATA[<h2 id="WHAT"><a href="#WHAT" class="headerlink" title="WHAT"></a>WHAT</h2><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><blockquote>
<p>异常是指由于某种未预知的情况，导致程序中断运行的一种指令流，如：文件找不到、非法参数、网络超时等。为了保证程序正常运行，在设计程序时需要考虑到各种情况并正确处理这些情况</p>
</blockquote>
<blockquote>
<p>异常也是一种对象，在Java中，所有异常类的基类是<code>java.lang.Throwable</code>，Java中将异常划分为两类：</p>
<ul>
<li>Error：表示程序中无法处理的错误，一般是指程序执行时JVM出现了错误</li>
<li>Exception：表示程序本身由于健壮性不足导致的错误，程序本身可以捕捉到这类错误</li>
</ul>
</blockquote>
<blockquote>
<p>Exception异常又分为两类：</p>
<ul>
<li>运行时异常：RuntimeException类及其子类表示JVM在运行期间可能出现的错误。这类异常处于不可查异常，一般是由程序逻辑错误引起的，在程序中可以选择捕获处理，也可以不处理</li>
<li>编译异常：除RuntimeException及子类之外的异常。如果程序中出现了此类异常，则必须对该异常进行处理，否则编译不通过</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@startuml</span><br><span class="line">left to right direction</span><br><span class="line">Throwable &lt;|-- Error</span><br><span class="line">Throwable &lt;|-- Exception</span><br><span class="line"></span><br><span class="line">Error &lt;|-- VirtualMachineError</span><br><span class="line">VirtualMachineError &lt;|-- StackOverflowError</span><br><span class="line">Error &lt;|-- AWTError</span><br><span class="line"></span><br><span class="line">Exception &lt;|-- IOException</span><br><span class="line">Exception &lt;|-- RuntimeException</span><br><span class="line"></span><br><span class="line">IOException &lt;|-- EOFException</span><br><span class="line">IOException &lt;|-- FileNotFoundException</span><br><span class="line"></span><br><span class="line">RuntimeException &lt;|-- MissingResourceException</span><br><span class="line">RuntimeException &lt;|-- ClassNotFoundException</span><br><span class="line">RuntimeException &lt;|-- NullPointerException</span><br><span class="line">RuntimeException &lt;|-- IllegalArgumentException</span><br><span class="line">RuntimeException &lt;|-- ArrayIndexOutOfBoundsException</span><br><span class="line">RuntimeException &lt;|-- UnknownTypeException</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure>

<h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><blockquote>
<p>在Java中，可通过 <strong>捕获</strong> 和 <strong>抛出</strong> 两种方式来处理异常</p>
</blockquote>
<h4 id="捕获异常"><a href="#捕获异常" class="headerlink" title="捕获异常"></a>捕获异常</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">  <span class="comment">// 有可能产生异常的代码</span></span><br><span class="line">&#125; <span class="keyword">catch</span>(ExceptionClz1 e1) &#123;</span><br><span class="line">  <span class="comment">// 处理异常</span></span><br><span class="line">&#125; <span class="keyword">catch</span>(ExceptionClz2 e2) &#123;</span><br><span class="line">  <span class="comment">// 处理异常</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">  <span class="comment">// 不管是否发生异常，finally中的语句都会被执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="抛出异常"><a href="#抛出异常" class="headerlink" title="抛出异常"></a>抛出异常</h4><blockquote>
<p>在代码中可以使用 <code>throws new ExceptionClz();</code> 的方式想调用该方法的上级方法抛出异常</p>
</blockquote>
<h2 id="HOW"><a href="#HOW" class="headerlink" title="HOW"></a>HOW</h2><h3 id="异常类"><a href="#异常类" class="headerlink" title="异常类"></a>异常类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> club.hermit.study.exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseBusinessException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BaseBusinessException</span><span class="params">(Integer code, String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(msg);</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCode</span><span class="params">(Integer code)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMsg</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> club.hermit.study.exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Business</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String str = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//            str.equals("233");</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BaseBusinessException(-<span class="number">1</span>, <span class="string">"this is baseBusiness Exception"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (BaseBusinessException e1) &#123;</span><br><span class="line">            e1.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e2) &#123;</span><br><span class="line">            e2.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">club.hermit.study.exception.BaseBusinessException: this is baseBusiness Exception</span><br><span class="line">	at club.hermit.study.exception.Business.main(Business.java:11)</span><br></pre></td></tr></table></figure>



<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="Java-常见异常"><a href="#Java-常见异常" class="headerlink" title="Java 常见异常"></a>Java 常见异常</h3><table>
<thead>
<tr>
<th>异常类</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>java.lang.NullPointerException</td>
<td>空指针异常。当应用试图在要求使用对象的地方使用了null时，抛出该异常。譬如：调用null对象的实例方法、访问null对象的属性、计算null对象的长度、使用throw语句抛出null等等</td>
</tr>
<tr>
<td>java.lang.NoSuchMethodException</td>
<td>方法不存在异常。当访问某个类的不存在的方法时抛出该异常</td>
</tr>
<tr>
<td>java.lang.NoSuchFieldException</td>
<td>属性不存在异常。当访问某个类的不存在的属性时抛出该异常</td>
</tr>
<tr>
<td>java.lang.ArrayIndexOutOfBoundsException</td>
<td>数组索引越界异常。当对数组的索引值为负数或大于等于数组大小时抛出</td>
</tr>
<tr>
<td>java.lang.ClassNotFoundException</td>
<td>找不到类异常。当应用试图根据字符串形式的类名构造类，而在遍历CLASSPAH之后找不到对应名称的class文件时，抛出该异常</td>
</tr>
<tr>
<td>java.lang.ClassCastException</td>
<td>类造型异常。假设有类A和B（A不是B的父类或子类），O是A的实例，那么当强制将O构造为类B的实例时抛出该异常。该异常经常被称为强制类型转换异常</td>
</tr>
<tr>
<td>java.lang.StackOverflowError</td>
<td>堆栈溢出错误。当一个应用递归调用的层次太深而导致堆栈溢出或者陷入死循环时抛出该错误</td>
</tr>
<tr>
<td>java.lang.OutOfMemoryError</td>
<td>内存不足错误。当可用内存不足以让Java虚拟机分配给一个对象时抛出该错误</td>
</tr>
<tr>
<td>java.lang.AbstractMethodError</td>
<td>抽象方法错误。当应用试图调用抽象方法时抛出</td>
</tr>
<tr>
<td>java.lang.AssertionError</td>
<td>断言错，用来指示一个断言失败的情况</td>
</tr>
<tr>
<td>java.lang.ClassCircularityError</td>
<td>类循环依赖错误。在初始化一个类时，若检测到类之间循环依赖则抛出该异常</td>
</tr>
<tr>
<td>java.lang.ClassFormatError</td>
<td>类格式错误。当Java虚拟机试图从一个文件中读取Java类，而检测到该文件的内容不符合类的有效格式时抛出</td>
</tr>
<tr>
<td>java.lang.ExceptionInInitializerError</td>
<td>初始化程序错误。当执行一个类的静态初始化程序的过程中，发生了异常时抛出。静态初始化程序是指直接包含于类中的static语句段</td>
</tr>
<tr>
<td>java.lang.NoClassDefFoundError</td>
<td>未找到类定义错误。当Java虚拟机或者类装载器试图实例化某个类，而找不到该类的定义时抛出该错误</td>
</tr>
<tr>
<td>java.lang.NoSuchFieldError</td>
<td>域不存在错误。当应用试图访问或者修改某类的某个域，而该类的定义中没有该域的定义时抛出该错误</td>
</tr>
<tr>
<td>java.lang.NoSuchMethodError</td>
<td>方法不存在错误。当应用试图调用某类的某个方法，而该类的定义中没有该方法的定义时抛出该错误</td>
</tr>
<tr>
<td>java.lang.ThreadDeath</td>
<td>线程结束。当调用Thread类的stop方法时抛出该错误，用于指示线程结束</td>
</tr>
<tr>
<td>java.lang.UnknownError</td>
<td>未知错误。用于指示Java虚拟机发生了未知严重错误的情况</td>
</tr>
<tr>
<td>java.lang.ArrayStoreException</td>
<td>数组存储异常。当向数组中存放非数组声明类型对象时抛出</td>
</tr>
<tr>
<td>java.lang.CloneNotSupportedException</td>
<td>不支持克隆异常。当没有实现Cloneable接口或者不支持克隆方法时,调用其clone()方法则抛出该异常</td>
</tr>
<tr>
<td>java.lang.EnumConstantNotPresentException</td>
<td>枚举常量不存在异常。当应用试图通过名称和枚举类型访问一个枚举对象，但该枚举对象并不包含常量时，抛出该异常</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>源码分析</category>
      </categories>
      <tags>
        <tag>Throwable</tag>
        <tag>Error</tag>
        <tag>Exception</tag>
      </tags>
  </entry>
  <entry>
    <title>函数式编程</title>
    <url>/2020/08/31/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="WHAT"><a href="#WHAT" class="headerlink" title="WHAT"></a>WHAT</h2><h3 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h3><blockquote>
<p>函数式编程是一种编程范式。它把计算当成是数学函数的求值，从而避免改变状态和使用可变数据。它是一种声明式的编程范式，通过表达式和声明而不是语句来编程。</p>
</blockquote>
<blockquote>
<p><strong>函数式编程</strong> 和 <strong>面向对象编程 **、</strong>面向过程编程** 等属于同一平行位置，都是一种编程思想或编程范式。</p>
</blockquote>
<h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><blockquote>
<p>函数类似于数学中的函数：输入元素-&gt;输入元素的集合的映射关系，并且每个输入元素只能映射到一个输出元素上，比如f(x) = x^2 = 4，则x可以是-2，也可以是2</p>
</blockquote>
<blockquote>
<p>对应到函数式编程中，输入元素-2/2称为函数的<strong>参数</strong>，输出元素4称为<strong>值</strong>，输入元素和其他附加元素的集合合称为函数的<strong>定义域</strong>，输出元素的集合合称为函数的<strong>到达域</strong>，输出元素的集合称为<strong>像</strong>。注：到达域 还可能包含除了像中元素之外的其他元素。</p>
</blockquote>
<h4 id="λ演算"><a href="#λ演算" class="headerlink" title="λ演算"></a>λ演算</h4><blockquote>
<p>λ演算是对函数概念的简化，λ演算的函数有主要两个特征：</p>
<ul>
<li>λ演算中的函数都是匿名的，没有显式的名称。比如函数<code>sum(x,y)=x+y</code>可以写成<code>(x,y)|-&gt;x+y</code>，由于函数本身仅由映射关系来确定，函数名称实际上并没有意义</li>
<li>λ演算中的函数都只有一个输入。有多个输入的函数可以转换称多个只包含一个输入的函数的嵌套调用。如<code>(x,y)|-&gt;x+y</code>可以转换成<code>x|-&gt;(y|-&gt;x+y)</code>，右边的函数的返回值是另一个函数</li>
</ul>
</blockquote>
<blockquote>
<p>λ演算是基于λ项的语言，λ项是λ演算的基本单元，λ演算在λ项上定义了各种转换规则</p>
</blockquote>
<h5 id="λ项"><a href="#λ项" class="headerlink" title="λ项"></a>λ项</h5><blockquote>
<p>λ项由下面规则来定义：</p>
<ul>
<li>一个变量x本身就是一个λ项</li>
<li>如果M是λ项，x是一个变量，那么(λx.M)也是一个λ项，这样的λ项称为λ抽象。x和M中间的点用来分隔函数参数和内容</li>
<li>如果M和N都是λ项，那么（MN）也是一个λ项，这样的λ项称为应用</li>
</ul>
</blockquote>
<h3 id="函数式编程和面向对象编程"><a href="#函数式编程和面向对象编程" class="headerlink" title="函数式编程和面向对象编程"></a>函数式编程和面向对象编程</h3><blockquote>
<p>例如，Son、Father、Grandpa三个元素</p>
<p>面向对象中的关系则是：Father类 继承 Grandpa类，Son类 继承 Father类</p>
<p>函数式编程中的关系 则是：Grandpa、Father、Son表示事务，fg、ff表示关系，fg作用到Grandpa事务上，则产生了Father事务，ff作用到Father事务上，则产生了Son事务</p>
</blockquote>
<h3 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h3><blockquote>
<p>JDK1.8采用了函数式接口作为Lambda表达式的目标类型。函数式接口是一个有且仅有一个抽象方法声明的接口，任意只包含一个抽象方法的接口，都可以用来做成Lambda表达式。</p>
</blockquote>
<blockquote>
<p>普通接口和函数式接口的区别：</p>
<ul>
<li>函数式接口中只能有一个抽象方法</li>
<li>接口中唯一的抽象方法的命名并不重要，因为函数式接口就是对某一行为进行抽象，主要目地就是支持Lambda表达式</li>
<li>自定义函数式接口时，应当在接口前加上@FunctionIInterface注解</li>
</ul>
</blockquote>
<h3 id="Java中的Lambda表达式"><a href="#Java中的Lambda表达式" class="headerlink" title="Java中的Lambda表达式"></a>Java中的Lambda表达式</h3><blockquote>
<p>Lambda表达式，也可称为闭包，允许把函数作为参数，使代码更加简洁</p>
</blockquote>
<h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h4><blockquote>
<p>Lambda表达式的基本结构为 <code>(arguments)-&gt;body</code>，有下列情况：</p>
<ul>
<li>参数类型可推导时，不需要指定类型，如：<code>(a)-&gt;System.out.println(a)</code></li>
<li>当只有一个参数且类型可推导时，不强制写()，如：<code>a-&gt;System.out.println(a)</code></li>
<li>参数指定类型时，必须有括号，如：<code>(int a)-&gt;System.out.println(a)</code></li>
<li>参数可以为空，如：<code>()-&gt;System.out.println(&quot;2333&quot;)</code></li>
<li>body需要用{}包含语句，当只有一条语句时{}可省略。<strong>注：有{}要return，无{}不能return</strong></li>
</ul>
</blockquote>
<h4 id="Lambda表示式的缺点"><a href="#Lambda表示式的缺点" class="headerlink" title="Lambda表示式的缺点"></a>Lambda表示式的缺点</h4><blockquote>
<ul>
<li>可读性太差，代码越长越差</li>
<li>难调试，没办法将代码运行中出现的问题输出到日志</li>
<li>只有JDK1.8以上才可以用</li>
</ul>
</blockquote>
<h2 id="HOW"><a href="#HOW" class="headerlink" title="HOW"></a>HOW</h2><h3 id="JDK内置的函数式接口"><a href="#JDK内置的函数式接口" class="headerlink" title="JDK内置的函数式接口"></a>JDK内置的函数式接口</h3><h4 id="JDK1-8之前的函数式接口"><a href="#JDK1-8之前的函数式接口" class="headerlink" title="JDK1.8之前的函数式接口"></a>JDK1.8之前的函数式接口</h4><table>
<thead>
<tr>
<th>函数式接口</th>
<th>方法名</th>
</tr>
</thead>
<tbody><tr>
<td><code>java.lang.Runnable</code></td>
<td><code>void run();</code></td>
</tr>
<tr>
<td><code>java.util.concurrent.Callable</code></td>
<td><code>V call();</code></td>
</tr>
<tr>
<td><code>java.security.PrivilegedAction</code></td>
<td><code>T run();</code></td>
</tr>
<tr>
<td><code>java.util.Comparator</code></td>
<td><code>int compare(T o1, T o2);</code></td>
</tr>
<tr>
<td><code>java.io.FileFilter</code></td>
<td><code>boolean accept(File pathname);</code></td>
</tr>
<tr>
<td><code>java.nio.file.PathMatcher</code></td>
<td><code>boolean matches(Path path);</code></td>
</tr>
<tr>
<td><code>java.lang.reflect.InvocationHandler</code></td>
<td><code>Object invoke(Object proxy, Method method, Object[] args)</code></td>
</tr>
<tr>
<td><code>java.beans.PropertyChangeListener</code></td>
<td><code>void propertyChange(PropertyChangeEvent evt);</code></td>
</tr>
<tr>
<td><code>java.awt.event.ActionListener</code></td>
<td><code>void actionPerformed(ActionEvent e);</code></td>
</tr>
<tr>
<td><code>javax.swing.event.ChangeListener</code></td>
<td><code>void stateChanged(ChangeEvent e);</code></td>
</tr>
</tbody></table>
<h4 id="JDK1-8新增的函数式接口"><a href="#JDK1-8新增的函数式接口" class="headerlink" title="JDK1.8新增的函数式接口"></a>JDK1.8新增的函数式接口</h4><table>
<thead>
<tr>
<th>函数式接口</th>
<th>方法名</th>
<th>形式化描述</th>
<th>分类</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>Supplier&lt;T&gt;</code></td>
<td><code>T get();</code></td>
<td><code>()-&gt;T</code></td>
<td>供给型</td>
<td>返回一个结果</td>
</tr>
<tr>
<td><code>Consumer&lt;T&gt;</code></td>
<td><code>void accept(T t);</code></td>
<td><code>(T)-&gt;void</code></td>
<td>消费型</td>
<td>消费一个输入</td>
</tr>
<tr>
<td><code>BiConsumer&lt;T, U&gt;</code></td>
<td><code>void accept(T t, U u);</code></td>
<td><code>(T,U)-&gt;void</code></td>
<td>消费型</td>
<td>消费两个输入</td>
</tr>
<tr>
<td><code>Function&lt;T, R&gt;</code></td>
<td><code>R apply(T t);</code></td>
<td><code>(T)-&gt;R</code></td>
<td>映射型</td>
<td>完成类型的变换</td>
</tr>
<tr>
<td><code>UnaryOperator&lt;T&gt;</code></td>
<td><code>R apply(T t);</code></td>
<td><code>(T)-&gt;T</code></td>
<td>映射型</td>
<td>同Function，入参和出参类型一致</td>
</tr>
<tr>
<td><code>BiFunction&lt;T, U, R&gt;</code></td>
<td><code>R apply(T t, U u);</code></td>
<td><code>(T,U)-&gt;R</code></td>
<td>映射型</td>
<td>同Function，接受两个参数</td>
</tr>
<tr>
<td><code>BinaryOperator&lt;T&gt;</code></td>
<td><code>T apply(T t, U u);</code></td>
<td><code>(T,T)-&gt;T</code></td>
<td>映射型</td>
<td>同Function，参数类型一致</td>
</tr>
<tr>
<td><code>Predicate&lt;T&gt;</code></td>
<td><code>boolean test(T t);</code></td>
<td><code>(T)-&gt;boolean</code></td>
<td>预测型</td>
<td>判断输入是否符合预期</td>
</tr>
<tr>
<td><code>BiPredicate&lt;T, U&gt;</code></td>
<td><code>boolean test(T t, U u);</code></td>
<td><code>(T,U)-&gt;boolean</code></td>
<td>预测型</td>
<td>同Predicate，接受两个参数</td>
</tr>
</tbody></table>
<h3 id="函数式接口的使用"><a href="#函数式接口的使用" class="headerlink" title="函数式接口的使用"></a>函数式接口的使用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">func</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Consumer consumer = System.out::println;</span><br><span class="line">        consumer.accept(<span class="string">"this is a consumer test"</span>);</span><br><span class="line"></span><br><span class="line">        Function&lt;Integer, Integer&gt; function = (a) -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> a + a;</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(function.apply(<span class="number">12</span>));</span><br><span class="line"></span><br><span class="line">        Predicate&lt;Integer&gt; predicate = (a) -&gt; a &gt; <span class="number">0</span>;</span><br><span class="line">        System.out.println(predicate.test(-<span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">this is a consumer <span class="built_in">test</span></span><br><span class="line">24</span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h3 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h3><blockquote>
<p>JDK1.8新增了Stream，可以支持以一种声明的方式处理数据</p>
<p>Stream在程序中将要处理的集合看作一种流，流在管道中传输，并且可以在管道的节点上进行处理，比如筛选、排序、聚合等</p>
</blockquote>
<h4 id="Stream的操作"><a href="#Stream的操作" class="headerlink" title="Stream的操作"></a>Stream的操作</h4><blockquote>
<p>Stream操作分为中间操作和最终操作两种，中间操作返回Stream本身，最终操作返回一特定类型的计算结果</p>
</blockquote>
<h5 id="中间操作（intermediate）"><a href="#中间操作（intermediate）" class="headerlink" title="中间操作（intermediate）"></a>中间操作（intermediate）</h5><blockquote>
<p>一个流可以后面跟随零个或多个intermediate操作，其目地主要是打开流，做出某种程度的数据过滤，然后返回一个新的流，交给下一个操作使用</p>
<p>中间操作仅仅是调用这类方法，并没有真正开始流的遍历</p>
</blockquote>
<blockquote>
<p>常用的中间操作有：</p>
<ul>
<li>map</li>
<li>filter</li>
<li>distinct</li>
<li>sorted</li>
<li>peek</li>
<li>limit</li>
<li>skip</li>
<li>parallel</li>
<li>sequential</li>
<li>unordered</li>
</ul>
</blockquote>
<h5 id="最终操作（terminal）"><a href="#最终操作（terminal）" class="headerlink" title="最终操作（terminal）"></a>最终操作（terminal）</h5><blockquote>
<p>一个流只能有一个terminal操作，当这个操作执行后，流就被使用完了，无法再被操作</p>
<p>最终操作才会真正开始流的遍历，并且会生成一个结果</p>
</blockquote>
<blockquote>
<p>常用的最终操作有：</p>
<ul>
<li>forEach</li>
<li>forEachOrdered</li>
<li>toArray</li>
<li>reduce</li>
<li>collect</li>
<li>min</li>
<li>max</li>
<li>count</li>
<li>anyMatch</li>
<li>allMatch</li>
<li>noneMatch</li>
<li>findFirst</li>
<li>findAny</li>
<li>iterator</li>
</ul>
</blockquote>
<h4 id="Stream-的使用"><a href="#Stream-的使用" class="headerlink" title="Stream 的使用"></a>Stream 的使用</h4><h5 id="构造流"><a href="#构造流" class="headerlink" title="构造流"></a>构造流</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream stream = Stream.of(<span class="string">"hello"</span>, <span class="string">"world"</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] str = <span class="keyword">new</span> String[] &#123;<span class="string">"hello"</span>, <span class="string">"world"</span>&#125;</span><br><span class="line">Stream stream1 = Stream.of(str);</span><br><span class="line">Stream stream2 = Arrays.stream(str);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = Arrays.asList(&#123;<span class="string">"hello"</span>, <span class="string">"world"</span>&#125;);</span><br><span class="line">Stream stream = list.stream();</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 构造基本数据类型int、long、double的流</span></span><br><span class="line">IntStream stream = IntStream.rang(<span class="number">1</span>,<span class="number">10</span>);</span><br></pre></td></tr></table></figure>

<h5 id="流转化为其他数据结构"><a href="#流转化为其他数据结构" class="headerlink" title="流转化为其他数据结构"></a>流转化为其他数据结构</h5><blockquote>
<p>转化为数组</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] str = stream.toArray(String[]::<span class="keyword">new</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>转化为集合</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = stream.collect(Collectors.toList());</span><br><span class="line">Set set = stream.collect(Collectors.toSet());</span><br></pre></td></tr></table></figure>

<blockquote>
<p>转化为字符串</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str = stream.collect(Collectors.joining()).toString;</span><br></pre></td></tr></table></figure>

<h5 id="流的操作"><a href="#流的操作" class="headerlink" title="流的操作"></a>流的操作</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> club.hermit.stydy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Java8Tester</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"使用 Java 7: "</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算空字符串</span></span><br><span class="line">        List&lt;String&gt; strings = Arrays.asList(<span class="string">"abc"</span>, <span class="string">""</span>, <span class="string">"bc"</span>, <span class="string">"efg"</span>, <span class="string">"abcd"</span>,<span class="string">""</span>, <span class="string">"jkl"</span>);</span><br><span class="line">        System.out.println(<span class="string">"列表: "</span> +strings);</span><br><span class="line">        <span class="keyword">long</span> count = getCountEmptyStringUsingJava7(strings);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"空字符数量为: "</span> + count);</span><br><span class="line">        count = getCountLength3UsingJava7(strings);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"字符串长度为 3 的数量为: "</span> + count);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除空字符串</span></span><br><span class="line">        List&lt;String&gt; filtered = deleteEmptyStringsUsingJava7(strings);</span><br><span class="line">        System.out.println(<span class="string">"筛选后的列表: "</span> + filtered);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除空字符串，并使用逗号把它们合并起来</span></span><br><span class="line">        String mergedString = getMergedStringUsingJava7(strings,<span class="string">", "</span>);</span><br><span class="line">        System.out.println(<span class="string">"合并字符串: "</span> + mergedString);</span><br><span class="line">        List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取列表元素平方数</span></span><br><span class="line">        List&lt;Integer&gt; squaresList = getSquares(numbers);</span><br><span class="line">        System.out.println(<span class="string">"平方数列表: "</span> + squaresList);</span><br><span class="line">        List&lt;Integer&gt; integers = Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">13</span>,<span class="number">4</span>,<span class="number">15</span>,<span class="number">6</span>,<span class="number">17</span>,<span class="number">8</span>,<span class="number">19</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"列表: "</span> +integers);</span><br><span class="line">        System.out.println(<span class="string">"列表中最大的数 : "</span> + getMax(integers));</span><br><span class="line">        System.out.println(<span class="string">"列表中最小的数 : "</span> + getMin(integers));</span><br><span class="line">        System.out.println(<span class="string">"所有数之和 : "</span> + getSum(integers));</span><br><span class="line">        System.out.println(<span class="string">"平均数 : "</span> + getAverage(integers));</span><br><span class="line">        System.out.println(<span class="string">"随机数: "</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出10个随机数</span></span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">            System.out.println(random.nextInt());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"使用 Java 8: "</span>);</span><br><span class="line">        System.out.println(<span class="string">"列表: "</span> +strings);</span><br><span class="line"></span><br><span class="line">        count = strings.stream().filter(string-&gt;string.isEmpty()).count();</span><br><span class="line">        System.out.println(<span class="string">"空字符串数量为: "</span> + count);</span><br><span class="line"></span><br><span class="line">        count = strings.stream().filter(string -&gt; string.length() == <span class="number">3</span>).count();</span><br><span class="line">        System.out.println(<span class="string">"字符串长度为 3 的数量为: "</span> + count);</span><br><span class="line"></span><br><span class="line">        filtered = strings.stream().filter(string -&gt;!string.isEmpty()).collect(Collectors.toList());</span><br><span class="line">        System.out.println(<span class="string">"筛选后的列表: "</span> + filtered);</span><br><span class="line"></span><br><span class="line">        mergedString = strings.stream().filter(string -&gt;!string.isEmpty()).collect(Collectors.joining(<span class="string">", "</span>));</span><br><span class="line">        System.out.println(<span class="string">"合并字符串: "</span> + mergedString);</span><br><span class="line"></span><br><span class="line">        squaresList = numbers.stream().map( i -&gt;i*i).distinct().collect(Collectors.toList());</span><br><span class="line">        System.out.println(<span class="string">"Squares List: "</span> + squaresList);</span><br><span class="line">        System.out.println(<span class="string">"列表: "</span> +integers);</span><br><span class="line"></span><br><span class="line">        IntSummaryStatistics stats = integers.stream().mapToInt((x) -&gt;x).summaryStatistics();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"列表中最大的数 : "</span> + stats.getMax());</span><br><span class="line">        System.out.println(<span class="string">"列表中最小的数 : "</span> + stats.getMin());</span><br><span class="line">        System.out.println(<span class="string">"所有数之和 : "</span> + stats.getSum());</span><br><span class="line">        System.out.println(<span class="string">"平均数 : "</span> + stats.getAverage());</span><br><span class="line">        System.out.println(<span class="string">"随机数: "</span>);</span><br><span class="line"></span><br><span class="line">        random.ints().limit(<span class="number">10</span>).sorted().forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 并行处理</span></span><br><span class="line">        count = strings.parallelStream().filter(string -&gt; string.isEmpty()).count();</span><br><span class="line">        System.out.println(<span class="string">"空字符串的数量为: "</span> + count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getCountEmptyStringUsingJava7</span><span class="params">(List&lt;String&gt; strings)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(String string: strings)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(string.isEmpty())&#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getCountLength3UsingJava7</span><span class="params">(List&lt;String&gt; strings)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(String string: strings)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(string.length() == <span class="number">3</span>)&#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">deleteEmptyStringsUsingJava7</span><span class="params">(List&lt;String&gt; strings)</span></span>&#123;</span><br><span class="line">        List&lt;String&gt; filteredList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(String string: strings)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(!string.isEmpty())&#123;</span><br><span class="line">                filteredList.add(string);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> filteredList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getMergedStringUsingJava7</span><span class="params">(List&lt;String&gt; strings, String separator)</span></span>&#123;</span><br><span class="line">        StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(String string: strings)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(!string.isEmpty())&#123;</span><br><span class="line">                stringBuilder.append(string);</span><br><span class="line">                stringBuilder.append(separator);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        String mergedString = stringBuilder.toString();</span><br><span class="line">        <span class="keyword">return</span> mergedString.substring(<span class="number">0</span>, mergedString.length()-<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;Integer&gt; <span class="title">getSquares</span><span class="params">(List&lt;Integer&gt; numbers)</span></span>&#123;</span><br><span class="line">        List&lt;Integer&gt; squaresList = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(Integer number: numbers)&#123;</span><br><span class="line">            Integer square = <span class="keyword">new</span> Integer(number.intValue() * number.intValue());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(!squaresList.contains(square))&#123;</span><br><span class="line">                squaresList.add(square);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> squaresList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMax</span><span class="params">(List&lt;Integer&gt; numbers)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> max = numbers.get(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i &lt; numbers.size();i++)&#123;</span><br><span class="line"></span><br><span class="line">            Integer number = numbers.get(i);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(number.intValue() &gt; max)&#123;</span><br><span class="line">                max = number.intValue();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMin</span><span class="params">(List&lt;Integer&gt; numbers)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> min = numbers.get(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i &lt; numbers.size();i++)&#123;</span><br><span class="line">            Integer number = numbers.get(i);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(number.intValue() &lt; min)&#123;</span><br><span class="line">                min = number.intValue();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> min;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSum</span><span class="params">(List numbers)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = (<span class="keyword">int</span>)(numbers.get(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i &lt; numbers.size();i++)&#123;</span><br><span class="line">            sum += (<span class="keyword">int</span>)numbers.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getAverage</span><span class="params">(List&lt;Integer&gt; numbers)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getSum(numbers) / numbers.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Optional"><a href="#Optional" class="headerlink" title="Optional"></a>Optional</h3><blockquote>
<p>在Java开发中，空指针异常时最常见的异常，通常需要用 <code>if(obj != null){}</code> 类似这样处理，这样繁琐且难看<br>JDK1.8提供了一个Optional类用来处理这类繁琐的判断</p>
</blockquote>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>of</td>
<td>把指定的值封装为Optional对象，如果指定的值为null，则抛出NullPointerException</td>
</tr>
<tr>
<td>empty</td>
<td>创建一个空的Optional对象</td>
</tr>
<tr>
<td>ofNullable</td>
<td>把指定的值封装为Optional对象，如果指定的值为null，则创建一个空的Optional对象</td>
</tr>
<tr>
<td>get</td>
<td>如果创建的Optional中有值存在，则返回此值，否则抛出NoSuchElementException</td>
</tr>
<tr>
<td>orElse</td>
<td>如果创建的Optional中有值存在，则返回此值，否则返回一个默认值</td>
</tr>
<tr>
<td>orElseGet</td>
<td>如果创建的Optional中有值存在，则返回此值，否则返回一个由Supplier接口生成的值</td>
</tr>
<tr>
<td>orElseThrow</td>
<td>如果创建的Optional中有值存在，则返回此值，否则抛出一个由指定的Supplier接口生成的异常</td>
</tr>
<tr>
<td>filter</td>
<td>如果创建的Optional中的值满足filter中的条件，则返回包含该值的Optional对象，否则返回一个空的Optional对象</td>
</tr>
<tr>
<td>map</td>
<td>如果创建的Optional中的值存在，对该值执行提供的Function函数调用</td>
</tr>
<tr>
<td>flagMap</td>
<td>如果创建的Optional中的值存在，就对该值执行提供的Function函数调用，返回一个Optional类型的值，否则就返回一个空的Optional对象</td>
</tr>
<tr>
<td>isPresent</td>
<td>如果创建的Optional中的值存在，返回true，否则返回false</td>
</tr>
<tr>
<td>ifPresent</td>
<td>如果创建的Optional中的值存在，则执行该方法的调用，否则什么也不做</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String[] args )</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        User user = <span class="keyword">null</span>;</span><br><span class="line">        Optional.ofNullable(user).orElseThrow(()-&gt;<span class="keyword">new</span> Exception(<span class="string">"user不存在"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Exception <span class="keyword">in</span> thread <span class="string">"main"</span> java.lang.Exception: user不存在</span><br><span class="line">	at club.hermit.stydy.App.lambda<span class="variable">$main</span><span class="variable">$0</span>(App.java:11)</span><br><span class="line">	at java.util.Optional.orElseThrow(Optional.java:290)</span><br><span class="line">	at club.hermit.stydy.App.main(App.java:11)</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code 1</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>源码分析</category>
      </categories>
      <tags>
        <tag>函数式编程</tag>
        <tag>lambda</tag>
      </tags>
  </entry>
  <entry>
    <title>Microsoft REST API 指南</title>
    <url>/2020/08/30/Microsoft_REST_API%20Guidelines/</url>
    <content><![CDATA[<blockquote>
<p>本文翻译自 <a href="https://github.com/microsoft/api-guidelines/blob/vNext/Guidelines.md" target="_blank" rel="noopener">微软Rest Api指南</a></p>
</blockquote>
<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><blockquote>
<p>The Microsoft REST API指南作为一种设计原则，估计程序开发人员通过RESTful HTTP接口访问资源。为了在遵循Microsoft REST API的平台上为开发人员提供尽可能流程的体验，REST API应当遵循一致的设计原则，以使其变得简单和直观。</p>
<p>本文档建立了Microsoft REST API应该遵循的指导原则，以便统一一致的开发RESTful接口。</p>
</blockquote>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><blockquote>
<p>开发人员通常通过HTTP接口访问微软云平台资源，虽然每个服务通常提供特定于语言框架来包括其API，但他们的所有操作最后都归结为HTTP请求。微软必须支持广泛的客户端和服务，不能依赖于每个开发环境都有丰富的框架。因此，本指南的目标是确保Microsoft REST API能够被任何具有基本HTTP支持的客户端轻松且一致的使用。</p>
<p>为了给开发人员提供顺畅的体验，让这些API遵循统一的设计准则是很重要的，从而使其简单易用，符合人们的直觉反应。本文档建立了 Microsoft REST API开发人员应该遵循的指南。以便统一一致的开发API。</p>
<p>一致性的好处在于可以不断的积累合理的规范；一致性使得团队拥有统一的代码、模式、文档和设计策略。</p>
<p>这些指南旨在达成以下目标：</p>
<ul>
<li>为微软技术平台所有API定义了一致的实现和体验</li>
<li>尽可能的遵守行业普遍接受的 REST/HTTP 最佳实践</li>
<li>使所有开发人员可以通过REST接口轻松的访问微软服务</li>
<li>允许服务开发人员在其他服务的基础上来开发一致的REST API接口</li>
<li>允许合作伙伴用这些指南设置自己的REST接口</li>
</ul>
</blockquote>
<h3 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h3><blockquote>
<p>理解REST设计风格背后的理念，有助于开发更好的HTTP服务。如果你是REST设计风格的初学者，这儿有些非常好的学习资源：</p>
<p><a href="https://en.wikipedia.org/wiki/Representational_state_transfer" target="_blank" rel="noopener">REST维基百科</a></p>
<p><a href="https://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm" target="_blank" rel="noopener">REST论文</a></p>
<p><a href="https://tools.ietf.org/html/rfc7231" target="_blank" rel="noopener">RFC7320</a></p>
<p><a href="https://www.amazon.com/REST-Practice-Hypermedia-Systems-Architecture/dp/0596805829/" target="_blank" rel="noopener">REST实践</a></p>
</blockquote>
<h2 id="解读指南"><a href="#解读指南" class="headerlink" title="解读指南"></a>解读指南</h2><h3 id="应用指南"><a href="#应用指南" class="headerlink" title="应用指南"></a>应用指南</h3><blockquote>
<p>这些指南适用于Microsoft公开的任何REST API或任何合作伙伴的服务。私有或内部的API也应尝试这些指南，因为内部服务往往最后都会公开。一致性不仅对外部客户而且对内部服务消费者都很有价值，而且这些准则提供了对任何服务都有用的最佳实践。</p>
<p>有合理理由可以不遵循这些准则，如：实现或必须与某些外部定义的REST API互操作的REST服务必须与那些外部的API兼容，从而无法遵循这些准则；还有一些服务可能有特殊的性能要求，必须采用其他格式，比如二进制协议。</p>
</blockquote>
<h3 id="存在服务和服务版本指导"><a href="#存在服务和服务版本指导" class="headerlink" title="存在服务和服务版本指导"></a>存在服务和服务版本指导</h3><blockquote>
<p>我们不推荐仅仅为了合规而对在这些准则之前的服务进行大量修改。无论如何，如果兼容性遭到破坏，则改服务应该在下一个版本中变得兼容。当服务添加新的API时，该API应该和相同版本的其他API一致。因此，如果服务是针对1.0版本的指南编写的，那么增量添加到服务的新的API也应该遵循1.0版本的指南。然后该服务在下一次主要版本更新时，再去遵循最新版本指南。</p>
</blockquote>
<h3 id="要求的语言"><a href="#要求的语言" class="headerlink" title="要求的语言"></a>要求的语言</h3><blockquote>
<p>本文档中”MUST”(必须)、”MUST NOT”(禁止)、”REQUIRED”(需要)、”SHALL”(将要)、”SHALL NOT”(最好不要)、”SHOULD”(应该)、”SHOULD NOT”(不应该)、”RECOMMENDED”(推荐)、”MAY”(可能)、”OPTIONAL”(可选) 等关键字的解释详见<a href="https://www.ietf.org/rfc/rfc2119.txt" target="_blank" rel="noopener">RFC2119</a></p>
</blockquote>
<h3 id="许可证"><a href="#许可证" class="headerlink" title="许可证"></a>许可证</h3><blockquote>
<p>本作品根据知识共享署名4.0国际许可协议授权。如需查看本授权的副本，请访问<a href="http://creativecommons.org/licenses/by/4.0/" target="_blank" rel="noopener">http://creativecommons.org/licenses/by/4.0/</a> 或致函 PO Box 1866, Mountain View, CA 94042, USA.</p>
</blockquote>
<h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><blockquote>
<p>作为Microsoft REST API指南的一部分，服务必须满足下面定义的分类法</p>
</blockquote>
<h3 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h3><blockquote>
<p>错误，或更具体的说是服务错误，定义为客户端将无效的数据传递给服务，并且服务正确拒绝该数据。比如包括无效的凭证、不正确的参数、未知的版本ID或类似内容。这些通常是“4xx”HTTP错误码，是客户端传递不正确的参数或无效数据导致的结果。</p>
<p>错误不会影响API的整体可用性。</p>
</blockquote>
<h3 id="故障"><a href="#故障" class="headerlink" title="故障"></a>故障</h3><blockquote>
<p>故障，或更具体的说是服务故障，定义为服务未能响应有效的客户端请求而正确返回。这些通常是”5xx”HTTP错误码。</p>
<p>故障会影响API的整体可用性。</p>
<p>由于限流或配额故障而是失败的调用不能算作故障。由于服务快速失败(fast-failing)请求(通常是为了保护自己)而失败的调用被视为故障</p>
</blockquote>
<h3 id="延迟"><a href="#延迟" class="headerlink" title="延迟"></a>延迟</h3><blockquote>
<p>延迟定义为特定的API调用完成所需的时间（尽可能使用客户端调用进行测量）。此测量方法同样适用于同步和异步API。对于长时间运行的调用，延迟定义为第一次调用它所需的时间，而不是整个操作完成所需的时间。</p>
</blockquote>
<h3 id="完成时间"><a href="#完成时间" class="headerlink" title="完成时间"></a>完成时间</h3><blockquote>
<p>暴露长时间操作的服务必须跟踪这些操作的“完成时间”指标。</p>
</blockquote>
<h3 id="长期运行的API故障"><a href="#长期运行的API故障" class="headerlink" title="长期运行的API故障"></a>长期运行的API故障</h3><blockquote>
<p>对于长时间运行的API，很可能第一次请求成功，且后续每次去获取结果时API也处于正常运行（每个都返回200），但其中底层操作已经失败了的情况。长期运行故障必须作为故障汇总到总体可用性指标中。</p>
</blockquote>
<h2 id="客户端指南"><a href="#客户端指南" class="headerlink" title="客户端指南"></a>客户端指南</h2><blockquote>
<p>为确保客户端更好的接入REST服务，客户端应该遵循以下最佳实践：</p>
</blockquote>
<h3 id="忽略规则"><a href="#忽略规则" class="headerlink" title="忽略规则"></a>忽略规则</h3><blockquote>
<p>对于松散耦合的客户端调用，在调用之前不知道数据的确切定义和格式，如果服务器没有返回客户端预期的内容，客户端必须安全地忽略他。</p>
<p>在服务迭代的过程中，有些服务(接口)可能在不更改版本号的情况下向响应添加字段。此类服务必须在其文档中注明，客户端必须忽略这些未知字段。</p>
</blockquote>
<h3 id="变量排序规则"><a href="#变量排序规则" class="headerlink" title="变量排序规则"></a>变量排序规则</h3><blockquote>
<p>客户端处理响应数据时一定不能依赖服务端JSON响应数据字段的顺序。例如，当服务器返回的JSON对象中的字段顺序发生变化，客户端应当能够正确进行解析处理。</p>
<p>当服务端支持时，客户端可以请求以特定的顺序返回数据。例如，服务端可能支持使用$orderBy querystring参数来指定JSON数组中元素的顺序。</p>
<p>服务端也可以在协议中显式说明指定某些元素按指定方式进行排序。例如，服务端可以每次返回JSON对象时都把JSON对象的类型信息作为第一个字段返回，进而简化客户端解析返回数据格式的难度。客户端处理数据时可以依赖于服务端明确指定了的排序行为。</p>
</blockquote>
<h3 id="无提示的失效规则"><a href="#无提示的失效规则" class="headerlink" title="无提示的失效规则"></a>无提示的失效规则</h3><blockquote>
<p>当客户端请求带可选功能参数的服务时（例如带可选的头部信息），必须对服务端的返回格式有一定兼容性，可以忽略某些特定功能。</p>
</blockquote>
<h2 id="一致性基础"><a href="#一致性基础" class="headerlink" title="一致性基础"></a>一致性基础</h2><h3 id="URL结构"><a href="#URL结构" class="headerlink" title="URL结构"></a>URL结构</h3><blockquote>
<p>URL必须保证友好的可读性和可构造性，人类应该能够轻松读取和构造URL。这有助于用户发现并简化接口的调用，即使平台没有良好的客户大SDK支持。</p>
<p>结构良好的URL如：</p>
</blockquote>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">https://api.contoso.com/v1.0/people/jdoe@contoso.com/inbox</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>结构不好的URL如：</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">https://api.contoso.com/EWS/OData/Users('jdoe@microsoft.com')/Folders('AAMkADdiYzI1MjUzLTk4MjQtNDQ1Yy05YjJkLWNlMzMzYmIzNTY0MwAuAAAAAACzMsPHYH6HQoSwfdpDx-2bAQCXhUk6PC1dS7AERFluCgBfAAABo58UAAA=')</span><br></pre></td></tr></table></figure>

<blockquote>
<p>出现的常见模式是使用URL作为值（参数）。服务可以使用URL作为值。例如，下面的内容是可以接受的：</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">https://api.contoso.com/v1.0/items?url=https://resources.contoso.com/shoes/fancy</span><br></pre></td></tr></table></figure>

<h3 id="URL长度"><a href="#URL长度" class="headerlink" title="URL长度"></a>URL长度</h3><blockquote>
<p>HTTP1.1消息格式对请求没有长度限制，其中包括目标URL。RFC：</p>
<blockquote>
<p>HTTP没有对请求行长度设置预定义的限制。[…]如果服务器接收到的请求目标比它希望解析的任何URL都长，那么它必须使用414（URI太长）状态代码响应。</p>
</blockquote>
<p>服务如果能够生成超过2083个字符的URL，必须考虑兼容它支持的客户端。不同客户端支持的最长URL长度参见：</p>
</blockquote>
<ul>
<li><a href="http://stackoverflow.com/a/417184" target="_blank" rel="noopener">http://stackoverflow.com/a/417184</a></li>
<li><a href="https://blogs.msdn.microsoft.com/ieinternals/2014/08/13/url-length-limits/" target="_blank" rel="noopener">https://blogs.msdn.microsoft.com/ieinternals/2014/08/13/url-length-limits/</a></li>
</ul>
<blockquote>
<p>其他需要注意，一些技术栈有强制的URL限定，所以在设计服务时要记住这一定。</p>
</blockquote>
<h3 id="标准标识符"><a href="#标准标识符" class="headerlink" title="标准标识符"></a>标准标识符</h3><blockquote>
<p>除了提供友好的URL之外，能够移动或重命名的资源必须包含唯一稳定的标识符。在与服务进行交互时可能需要通过友好的名称来获取资源固定的URL，就像某些服务使用的”/my”快捷方式一样。指南不强制要求，固定标识符使用GUID。包含规范标识符的URL例子：</p>
</blockquote>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">https://api.contoso.com/v1.0/people/7011042402/inbox</span></span><br></pre></td></tr></table></figure>

<h3 id="支持方法"><a href="#支持方法" class="headerlink" title="支持方法"></a>支持方法</h3><blockquote>
<p>客户端必须尽可能使用正确的HTTP动词来执行操作，并且必须考虑是否支持此操作的幂等性。HTTP方法通常称为HTTP动词。</p>
<p>下面是Microsoft REST服务应该支持的方法列表。并不是所有资源都支持所有方法，但是使用以下方法的所有资源必须符合他们的用法。</p>
</blockquote>
<table>
<thead>
<tr>
<th>Method</th>
<th>Description</th>
<th>Is Idempotent</th>
</tr>
</thead>
<tbody><tr>
<td>GET</td>
<td>返回对象的当前值</td>
<td>true</td>
</tr>
<tr>
<td>PUT</td>
<td>在适当时替换对象或创建命名对象</td>
<td>true</td>
</tr>
<tr>
<td>DELETE</td>
<td>删除一个对象</td>
<td>true</td>
</tr>
<tr>
<td>POST</td>
<td>创建基于数据提供者的一个新对象，或者提交一个操作</td>
<td>false</td>
</tr>
<tr>
<td>HEAD</td>
<td>返回一个GET响应对象的元数据，支持GET方法的资源也可能支持HEAD方法</td>
<td>true</td>
</tr>
<tr>
<td>PATCH</td>
<td>更新对象部分应用</td>
<td>false</td>
</tr>
<tr>
<td>OPTIONS</td>
<td>获取关于请求的信息</td>
<td>true</td>
</tr>
</tbody></table>
<h4 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h4><blockquote>
<p>POST操作应该支持重定向响应标头，以便通过重定向标头返回创建好的资源和链接。</p>
<p>例如：假如一个服务允许创建并命名托管服务器</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">POST http://api.contoso.com/account1/servers</span><br></pre></td></tr></table></figure>

<blockquote>
<p>响应就会像下面这样：</p>
</blockquote>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">201 Created</span><br><span class="line"><span class="attribute">Location</span>: http://api.contoso.com/account1/servers/server321</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这儿的“server321”就是服务分配的服务器名。</p>
<p>服务还可以在响应中返回已创建项的完整元数据。</p>
</blockquote>
<h4 id="PATCH"><a href="#PATCH" class="headerlink" title="PATCH"></a>PATCH</h4><blockquote>
<p>PATCH 已被IETF标准化为用于增量更新现有对象的方法，符合Microsoft REST API准则的API应该支持PATCH。</p>
</blockquote>
<h4 id="通过PATCH创建资源-UPSERT定义"><a href="#通过PATCH创建资源-UPSERT定义" class="headerlink" title="通过PATCH创建资源 (UPSERT定义)"></a>通过PATCH创建资源 (UPSERT定义)</h4><blockquote>
<p>允许客户端在创建资源的时候只指定部分键值数据的必须支持UPSET语义，该服务必须支持以PATCH动词来创建资源。</p>
<p>鉴于PUT被定义为内容的完全替换，所以客户端使用PUT修改数据是危险的。</p>
<p>当试图更新资源时，不理解资源的某些属性的客户端，很可能在PUT上忽视这些属性，导致提交后这些属性可能在不经意间被删除。</p>
<p>所以，如果选择支持PUT来更新现有资源，则必须是完整替换（即，PUT之后，资源的属性必须匹配请求中提供的内容，包括删除没有提供的任何服务端的属性）。</p>
<p>在UPSET语义下，对不存在资源的PATCH调用，由服务器作为“创建”处理，对已存在资源的PATCH调用作为“更新”处理。</p>
<p>为确保更新请求不被视为创建，客户端可以在请求中指定预先定义的HTTP请求头。</p>
<ul>
<li>如果PATCH请求包含if-match标头，则服务不能将其视为插入；如果PATCH请求包含值为”*“的if-none-match头，则服务不能将其视为更新。</li>
</ul>
<p>如果服务不支持UPSERT，则针对不存在资源的PATCH调用必须导致HTTP”409 Conflict“错误。 </p>
</blockquote>
<h4 id="Options标头和link标签"><a href="#Options标头和link标签" class="headerlink" title="Options标头和link标签"></a>Options标头和link标签</h4><blockquote>
<p>OPTIONS允许客户端查询某个资源的元信息，并至少可以通过返回支持该资源的有效方法的Allow标头。</p>
<p>此外，建议服务返回应该包含一个指向有关资源的稳定链接（Link header）</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">Link:<span class="tag">&lt;<span class="name">&#123;help&#125;</span>&gt;</span>;rel="help"</span><br></pre></td></tr></table></figure>

<blockquote>
<p>其中{help}是指向文档资源的URL。</p>
<p>有关选项使用的实例，请参见CORS跨域调用。</p>
</blockquote>
<h3 id="标准请求头"><a href="#标准请求头" class="headerlink" title="标准请求头"></a>标准请求头</h3><blockquote>
<p>下面的请求标头表应该遵循Microsoft REST API指南服务使用。使用这些标题不是强制性的，但如果使用他们则必须始终一致的使用。</p>
<p>所有标头值都必须遵循规范中规定的标头字段的语法规则，许多HTTP标头在RFC7231中定义，但是在IANA标头注册表中可以找到完整的已批准头列表。</p>
</blockquote>
<table>
<thead>
<tr>
<th>Header</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>Authorization</td>
<td>String</td>
<td>请求的授权标头</td>
</tr>
<tr>
<td>Date</td>
<td>Date</td>
<td>请求的时间戳，基于客户端的时钟，采用RFC5322日期和时间格式，服务器不应该对客户端时钟的准确性做任何假设。此标头可以包含在请求中，但在提供时必须采用此格式。当提供此报头时，必须使用格林尼治平均时间（GMT）作为时区参考，例如：Web，24 Aug 2016 18:41:30 GMT. 请注意，GMT正好等于UTC（协调世界时）。</td>
</tr>
<tr>
<td>Accept</td>
<td>Content    type</td>
<td>响应请求的内容类型，例如：- application/xml   - text/xml   - application/json   - text/javascript 根据HTTP准则，这只是一个提示，响应可能有不同的内容类型，例如blob fetch，其中成功的响应将只是blob流作为有效负载。对于遵循OData的服务，应该遵循OData中指定的首选项循序</td>
</tr>
<tr>
<td>Accept-Encoding</td>
<td>Gzip，deflate</td>
<td>如果适用，REST端点应该支持GZIP和DEFLATE编码。对于非常大的资源，服务可能会忽略并返回未压缩的数据。</td>
</tr>
<tr>
<td>Accept-Language</td>
<td>“en”,”es”,etc</td>
<td>指定响应的首选语言，不需要服务来支持这一点，但是如果一个服务支持本地化，那么它必须通过Accept-Language头来支持本地化。</td>
</tr>
<tr>
<td>Accept-Charset</td>
<td>Charset type like “UTF-8”</td>
<td>默认值是UTF-8，但是服务应该能够处理ISO-8859-1</td>
</tr>
<tr>
<td>Content-Type</td>
<td>Content-Type</td>
<td>请求体的Mine type（PUT/POST/PATCH）</td>
</tr>
<tr>
<td>Prefer</td>
<td>return=minimal,return=representation</td>
<td>如果指定了return=minimal首选项，则服务应该返回一个空主体(empty body)以响应一次成功插入或更新。如果指定了return=representation，则服务应该在响应中返回创建或更新的资源。如果服务的场景中客户端有时会从响应中获益，但有时响应会对带宽造成太大影响，那么应该中支持这个报头。</td>
</tr>
<tr>
<td>If-Match, If-None-Match, If-Range</td>
<td>String</td>
<td>使用乐观并发控制支持资源更新的服务必须支持If-Match标头。服务也可以使用其他与ETag相关的头，只要他们遵循HTTP规范</td>
</tr>
</tbody></table>
<h3 id="标准响应头"><a href="#标准响应头" class="headerlink" title="标准响应头"></a>标准响应头</h3><blockquote>
<p>服务应该返回以下响应标头，除非在”required”列中注明。</p>
</blockquote>
<table>
<thead>
<tr>
<th>响应头</th>
<th>Required</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>Date</td>
<td>All Responses</td>
<td>根据服务器的时钟，以RFC5322日期和时间格式处理响应。这个头必须包含在响应中，此报头必须使用格林尼治平均时间（GMT）作为时区参考，例如:Wed, 24 Aug 2016 18:41:30 GMT.请注意，GMT正好等于协调世界时(UTC)。</td>
</tr>
<tr>
<td>Content-type</td>
<td>All Responses</td>
<td>内容类型</td>
</tr>
<tr>
<td>Content-Encoding</td>
<td>All Responses</td>
<td>GZIP或DEFLATE，视情况而定</td>
</tr>
<tr>
<td>Preference-Applied</td>
<td>在请求中指定时</td>
<td>是否应用了首选项请求头中指示的首选项</td>
</tr>
<tr>
<td>ETag</td>
<td>当请求的资源具有实体标记时</td>
<td>ETag响应头字段为请求的变量提供实体标记的当前值。与If-Match、If-None-Match和If-Range一起使用，实现乐观并发控制。</td>
</tr>
</tbody></table>
<h3 id="自定义请求头"><a href="#自定义请求头" class="headerlink" title="自定义请求头"></a>自定义请求头</h3><blockquote>
<p>基本的Api操作不应该支持自定义标头。</p>
<p>本文档中的一些准则规定了非标准HTTP标头的使用。此外，某些服务可能需要添加额外的功能，这些功能通过HTTP标头文件公开。以下准则有助于在使用自定义标头时保持一致性。</p>
<p>非标准HTTP标头必须具有以下两种格式之一：</p>
<ol>
<li>使用IANA（RFC3864）注册为“临时”的标头的通用格式。</li>
<li>为注册使用过特定的头文件的范围格式。</li>
</ol>
<p>这两种格式如下所述。</p>
</blockquote>
<h3 id="以查询参数方式提交自定义请求头"><a href="#以查询参数方式提交自定义请求头" class="headerlink" title="以查询参数方式提交自定义请求头"></a>以查询参数方式提交自定义请求头</h3><blockquote>
<p>有些标头对某些场景（如Ajax客户端）不兼容，特别是在不支持添加标头的跨域调用时。因此，除了常见的标头信息外，一些标头信息可以允许被作为查询参数传递给服务端，其命名与请求头中的名称保持一致：</p>
<p>并不是所有的标头都可以用作查询参数，包括大多数标准HTTP标头。</p>
<p>考虑何时接受标头作为参数的标准如下：</p>
<ol>
<li>任何自定义标头也必须作为参数接受。</li>
<li>请求的标准标头也可以作为参数接受。</li>
<li>具有安全敏感性的必需标头（例如，授权标头Authorization）可能不适合作为参数；服务所有者应该具体情况具体分析。</li>
</ol>
<p>此规则的一个例外情况是Accept头。使用具有简单名称的方案，而不是使用HTTP规范中描述的用于Accept的完整功能，这是一种常见的实践。</p>
</blockquote>
<h3 id="PII个人身份信息参数"><a href="#PII个人身份信息参数" class="headerlink" title="PII个人身份信息参数"></a>PII个人身份信息参数</h3><blockquote>
<p>与普遍的隐私政策一致，客户端不应该在URL中传输个人身份信息(PII)参数(作为路径或查询参数)，因为这些信息可能通过客户端、网络和服务器日志和其他机制无意暴露出来。</p>
<p>因此，服务应该接受PII参数作为标头传输。</p>
<p>然而在实践中，由于客户端或软件的限制，在许多情况下无法遵循上述建议。为了解决这些限制，服务也应该接受这些PII参数作为URL的一部分，与本指导原则的其余部分保持一致。</p>
<p>接受PII参数(无论是在URL中还是作为标头)的服务 应该符合其组织的隐私保护原则。通常建议包括：客户端使用标头进行加密传输，并且实现要遵循特殊的预防措施，以确保日志和其他服务数据收集得到正确的处理。</p>
</blockquote>
<h3 id="Response-formats响应格式"><a href="#Response-formats响应格式" class="headerlink" title="Response formats响应格式"></a>Response formats响应格式</h3><blockquote>
<p>一个成功的平台，往往提供可读性较好并且一致的响应结果，并允许开发人员使用公共 Http 代码处理响应。</p>
<p>基于Web的通信，特别是当涉及移动端或其他低带宽客户端时，我们推荐使用JSON作为传输格式。主要是由于其更轻量以及易于与JavaScript交互。</p>
<p>JSON属性名应该采用camelCasedE驼峰命名规范。</p>
<p>服务应该提供JSON作为默认输出格式。</p>
</blockquote>
<h4 id="Clients-specified客户端指定响应格式"><a href="#Clients-specified客户端指定响应格式" class="headerlink" title="Clients-specified客户端指定响应格式"></a><strong>Clients-specified</strong>客户端指定响应格式</h4><blockquote>
<p>在HTTP中，客户端应该使用Accept头请求响应格式。服务端可以选择性的忽略，如客户端发送多个Accept标头，服务可以选择其中一个格式进行响应。</p>
<p>默认的响应格式(没有提供Accept头)应该是application/json，并且所有服务必须支持application/json。</p>
</blockquote>
<table>
<thead>
<tr>
<th>Accept Header</th>
<th>Response Type</th>
<th>Notes</th>
</tr>
</thead>
<tbody><tr>
<td>application/json</td>
<td>必须是返回json格式</td>
<td>同样接受JSONP请求的text/JavaScript</td>
</tr>
</tbody></table>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">GET https://api.contoso.com/v1.0/products/user</span><br><span class="line"><span class="attribute">Accept</span>: application/json</span><br></pre></td></tr></table></figure>

<h4 id="错误情况下的响应格式"><a href="#错误情况下的响应格式" class="headerlink" title="错误情况下的响应格式"></a>错误情况下的响应格式</h4><blockquote>
<p>对于调用不成功的情况，开发人员应该能够用相同的代码库一致地处理错误。这允许构建简单可靠的基础架构来处理异常，将异常作为成功响应的独立处理流程来处理。下面的代码基于OData v4 JSON规范。但是，它非常通用，不需要特定的OData构造。即使api没有使用其他OData结构，也应该使用这种格式。</p>
<p>错误响应必须是单个JSON对象。该对象必须有一个名为“error”的 名称/值（name/value） 对。该值必须是JSON对象。</p>
<p>这个对象必须包含名称“code”和“message”的 键值对，并且它建议包含譬如“target”、“details”和 “innererror” 的键值对。</p>
<p>“code”键值对的值 是一个与语言无关的字符串。它的值是该服端务定义的错误代码，应该简单可读。与响应中指定的HTTP错误代码相比，此代码用作错误的更具体的指示。服务应该具有相对较少的“code”数量(别超过20个)，并且所有客户端必须能够处理所有这些错误信息。</p>
<p>大多数服务将需要更大数量的更具体的错误代码以满足所有的客户端请求。这些错误代码应该在“innererror” 键值对中公开，如下所述。为现有客户端可见的“代码”引入新值是一个破坏性的更改，需要增加版本。服务可以通过向“innererror”添加新的错误代码来避免中断服务更改。</p>
<p>“message”键值对的值 必须是错误提示消息，必须是可读且易于理解。它旨在是帮助开发人员，不适合暴露给最终用户。想要为最终用户公开合适消息的服务必须通过annotation注释或其他自定义属性来公开。服务不应该为最终用户本地化“message”，因为这样对于开发者变得非常不友好并且难以处理。</p>
<p>“target”键值对的值 是指向错误的具体的目标(例如，错误中属性的名称)。</p>
<p>“details”键值对的值 必须是JSON对象数组，其中必须包含“code”和“message”的键值对，还可能包含“target”的键值对，如上所述。“details”数组中的对象通常表示请求期间发生的不同的、相关的错误。请参见下面的例子。</p>
<p>“innererror”键值对的值 必须是一个对象。这个对象的内容是服务端定义的。想要返回比根级别代码更具体的错误的服务，必须包含“code”的键值对和嵌套的“innererror”。每个嵌套的“innererror”对象表示比其父对象更高层次的细节。在评估错误时，客户端必须遍历所有嵌套的“内部错误”，并选择他们能够理解的最深的一个。这个方案允许服务在层次结构的任何地方引入新的错误代码，而不破坏向后兼容性，只要旧的错误代码仍然出现。服务可以向不同的调用者返回不同级别的深度和细节。例如，在开发环境中，最深的“innererror”可能包含有助于调试服务的内部信息。为了防范信息公开带来的潜在安全问题，服务应注意不要无意中暴露过多的细节。错误对象还可以包括特定于代码的自定义服务器定义的键值对。带有自定义服务器定义属性的错误类型应该在服务的元数据文档中声明。请参见下面的例子。</p>
<p>错误响应返回的的任何JSON对象中都可能包含注释。</p>
<p>我们建议，对于任何可能重试的临时错误，服务应该包含一个 Retry-After HTTP头，告诉客户端在再次尝试操作之前应该等待的最小秒数。</p>
</blockquote>
<h5 id="ErrorResponse-Object"><a href="#ErrorResponse-Object" class="headerlink" title="ErrorResponse: Object"></a>ErrorResponse: Object</h5><table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Required</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>error</td>
<td>Error</td>
<td>true</td>
<td>The error object.</td>
</tr>
</tbody></table>
<h5 id="Error-Object"><a href="#Error-Object" class="headerlink" title="Error: Object"></a>Error: Object</h5><table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Required</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td>String</td>
<td>true</td>
<td>服务器定义的错误代码集之一。message</td>
</tr>
<tr>
<td>target</td>
<td>String</td>
<td></td>
<td>The target of the error.</td>
</tr>
<tr>
<td>Details</td>
<td>Error[]</td>
<td></td>
<td>An array of details about specific errors that led to this reported error.</td>
</tr>
<tr>
<td>innererror</td>
<td>innerError</td>
<td></td>
<td>An object containing more specific information than the current object about the error.</td>
</tr>
</tbody></table>
<h5 id="InnerError-Object"><a href="#InnerError-Object" class="headerlink" title="InnerError: Object"></a>InnerError: Object</h5><table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Required</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td>String</td>
<td></td>
<td>A more specific error code than was provided by the containing error.</td>
</tr>
<tr>
<td>innererror</td>
<td>innerError</td>
<td></td>
<td>An object containing more specific information than the current object about the error.</td>
</tr>
</tbody></table>
<h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><blockquote>
<p>innerError错误例子</p>
</blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"error"</span>: &#123;</span><br><span class="line">    <span class="attr">"code"</span>: <span class="string">"BadArgument"</span>,</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"Previous passwords may not be reused"</span>,</span><br><span class="line">    <span class="attr">"target"</span>: <span class="string">"password"</span>,</span><br><span class="line">    <span class="attr">"innererror"</span>: &#123;</span><br><span class="line">      <span class="attr">"code"</span>: <span class="string">"PasswordError"</span>,</span><br><span class="line">      <span class="attr">"innererror"</span>: &#123;</span><br><span class="line">        <span class="attr">"code"</span>: <span class="string">"PasswordDoesNotMeetPolicy"</span>,</span><br><span class="line">        <span class="attr">"minLength"</span>: <span class="string">"6"</span>,</span><br><span class="line">        <span class="attr">"maxLength"</span>: <span class="string">"64"</span>,</span><br><span class="line">        <span class="attr">"characterTypes"</span>: [<span class="string">"lowerCase"</span>,<span class="string">"upperCase"</span>,<span class="string">"number"</span>,<span class="string">"symbol"</span>],</span><br><span class="line">        <span class="attr">"minDistinctCharacterTypes"</span>: <span class="string">"2"</span>,</span><br><span class="line">        <span class="attr">"innererror"</span>: &#123;</span><br><span class="line">          <span class="attr">"code"</span>: <span class="string">"PasswordReuseNotAllowed"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在本例中，基本的错误代码是“BadArgument”，但是对于感兴趣的客户端，“innererror”中提供了更具体的错误代码。<br>“passwordreusenotal”代码可能是在之后的迭代中由该服务添加的，之前只返回“passwordnotmeetpolicy”。<br>这种增量型的添加方式并不会破坏老的客户端的处理过程，而又可以给开发者一些更详细的信息。</p>
<p>“PasswordDoesNotMeetPolicy”错误还包括额外的键值对，这些键值对 允许客户机确定服务器的配置、以编程方式验证用户的输入，或者在客户机自己的本地化消息传递中向用户显示服务器的约束。</p>
</blockquote>
<blockquote>
<p>详细的例子 “details”:</p>
</blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"error"</span>: &#123;</span><br><span class="line">    <span class="attr">"code"</span>: <span class="string">"BadArgument"</span>,</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"Multiple errors in ContactInfo data"</span>,</span><br><span class="line">    <span class="attr">"target"</span>: <span class="string">"ContactInfo"</span>,</span><br><span class="line">    <span class="attr">"details"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"code"</span>: <span class="string">"NullValue"</span>,</span><br><span class="line">        <span class="attr">"target"</span>: <span class="string">"PhoneNumber"</span>,</span><br><span class="line">        <span class="attr">"message"</span>: <span class="string">"Phone number must not be null"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"code"</span>: <span class="string">"NullValue"</span>,</span><br><span class="line">        <span class="attr">"target"</span>: <span class="string">"LastName"</span>,</span><br><span class="line">        <span class="attr">"message"</span>: <span class="string">"Last name must not be null"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"code"</span>: <span class="string">"MalformedValue"</span>,</span><br><span class="line">        <span class="attr">"target"</span>: <span class="string">"Address"</span>,</span><br><span class="line">        <span class="attr">"message"</span>: <span class="string">"Address is not valid"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在本例中，请求存在多处问题，每个错误都列在 “details” 字段中进行返回了。</p>
</blockquote>
<h3 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h3><blockquote>
<p>应使用标准HTTP状态码作为响应状态码; 更多信息，请参见HTTP状态代码定义。</p>
</blockquote>
<h3 id="可选择的客户端库"><a href="#可选择的客户端库" class="headerlink" title="可选择的客户端库"></a>可选择的客户端库</h3><blockquote>
<p>开发人员必须能够在各种平台和语言上进行开发，比如Windows、macOS、Linux、c#、Python和Node.js或是Ruby。</p>
<p>服务应该能够让简单的HTTP工具(如curl)进行访问，而不需要做太多的工作。</p>
<p>该服务提供给开发人员的网站应该提供相当于“获得开发者令牌(Get developer Token)的功能，以帮助开发人员测试并应提供curl支持。</p>
</blockquote>
<h2 id="CORS跨域"><a href="#CORS跨域" class="headerlink" title="CORS跨域"></a>CORS跨域</h2><blockquote>
<p>符合Microsoft REST API准则的服务必须支持CORS(跨源资源共享)。</p>
<p>服务应该支持CORS *的允许起源，并通过有效的OAuth令牌强制授权。</p>
<p>服务不应该支持带有源验证的用户凭据。</p>
<p>特殊情况可例外。</p>
</blockquote>
<h3 id="客户端指南-1"><a href="#客户端指南-1" class="headerlink" title="客户端指南"></a>客户端指南</h3><blockquote>
<p>Web开发人员通常不需要做任何特殊处理来利用CORS。</p>
<p>作为标准XMLHttpRequest调用的一部分，所有握手步骤都是不可见的。</p>
<p>许多其他平台（如.NET）已集成了对CORS的支持。</p>
</blockquote>
<h4 id="避免额外的预检查"><a href="#避免额外的预检查" class="headerlink" title="避免额外的预检查"></a>避免额外的预检查</h4><blockquote>
<p>由于CORS协议会触发向服务器添加额外往返的预检请求，因此，注重性能的应用程序可能会有意避免这些请求。CORS背后的精神是避免对旧的不支持CORS功能的浏览器能够做出的任何简单的跨域请求进行预检。所有其他请求都需要预检。</p>
<p>请求是“简单类型请求“，如果其方法是GET，HEAD或POST，并且除了Accept，Accept-Language和Content-Language之外它不包含任何请求标头，则可以免去预检。</p>
<p>对于POST请求，也允许使用Content-Type标头，但前提是其值为“application/x-www-form-urlencoded”，“multipart/form-data”或“text/plain”。</p>
<p>对于任何其他标头或值，将发生预检请求。</p>
</blockquote>
<h3 id="服务端指导"><a href="#服务端指导" class="headerlink" title="服务端指导"></a>服务端指导</h3><blockquote>
<p>服务必须至少：</p>
<ul>
<li>了解浏览器在跨域请求上发送的Origin请求标头，以及他们在检查访问权限的预检OPTIONS 请求上发送的 Access-Control-Request-Method请求标头。</li>
<li>如果请求中存在Origin标头：<ul>
<li>添加一个Access-Control-Allow-Headers响应标头，其中包含允许客户端使用的请求标头名称列表。这个列表只需要包含不在(简单请求头)[rs-simple-headers] (Accept、Accept- language、Content-Language)集合中的头。如果服务接受的报头没有限制，则服务可以简单地返回与客户机发送的访问-控制-请求-报头报头相同的值。</li>
<li>添加一个Access-Control-Allow-Methods响应头，其中包含允许调用方使用的HTTP方法列表。</li>
<li>如果请求使用 OPTIONS 方法并包含 Access-Control-Request-Method标头，则它是一个预检请求，用于在实际请求之前探测访问。否则，这是一个实际的请求。对于预检请求，除了执行以下步骤添加标头之外，服务必须不执行任何额外处理，并且必须返回 200 OK。对于非预检请求，除了请求的常规处理之外，还会添加以下标头。</li>
<li>服务向响应添加 Access-Control-Allow-Origin 标头，其中包含与Origin 请求标头相同的值。请注意，这需要服务来动态生成标头值。不需要cookie或任何其他形式的[用户凭证] cors-user-credentials的资源可以使用通配符星号（*）进行响应。请注意，通配符仅在此处可接受，而不适用于下面描述的任何其他标头。</li>
<li>如果调用者需要访问不属于[简单响应头] cors-simple-headers集合中的响应头（Cache-Control，Content-Language，Content-Type，Expires，Last-Modified，Pragma），同时添加一个Access-Control-Expose-Headers标头，其中包含客户端应有权访问的其他响应标头名称列表。</li>
<li>如果请求需要cookie，则添加一个Access-Control-Allow-Credentials头，并将其设置为“true”。</li>
<li>如果请求是预检请求(见第一个项目符号)，则服务必须满足:</li>
</ul>
</li>
</ul>
<p>添加一个Access-Control-Max-Age pref</p>
<p>响应头，其中包含此预检前响应有效的秒数(因此可以在后续实际请求之前避免)。注意，虽然习惯上使用较大的值，比如2592000(30天)，但是许多浏览器会自动设置一个更低的限制(例如，5分钟)。</p>
<p>众所周知，由于浏览器预检响应缓存很弱，因此预检响应的额外往返会损害性能。</p>
<p>注重性能端的交互式 Web客户端使用的服务端应该避免使用导致预检的请求。</p>
<ul>
<li>对于GET和HEAD调用，请避免要求不属于上述简单集的请求标头。最好是允许将它们作为查询参数提供。<ul>
<li>Authorization标头不是简单集的一部分，因此对于需要验证的资源，必须通过“access_token”查询参数发送验证令牌。请注意，不建议在URL中传递身份验证令牌，因为它可能导致令牌记录在服务器日志中，并暴露给有权访问这些日志的任何人。通过URL接受身份验证令牌的服务必须采取措施来降低安全风险，例如使用短期身份验证令牌，禁止记录身份验证令牌以及控制对服务器日志的访问。</li>
</ul>
</li>
<li>避免要求cookie。如果设置了“withCredentials”属性，XmlHttpRequest将仅在跨域请求上发送cookie; 这也会导致预检请求。<ul>
<li>需要基于cookie的身份验证的服务必须使用“动态验证码（dynamic canary）” [*]译者注：服务器生成某种验证码，客户端获取后，服务器再进行验证的操作。来保护所有接受cookie的API。</li>
</ul>
</li>
<li>对于POST调用，在适用的情况下，选择简单的内容类型(“application/x-www-form-urlencoded”、“multipart/form-data”、“text/plain”)。其他任何内容类型都会引发预检请求。<ul>
<li>服务不得以避免CORS预检请求的名义违反其他API指南。由于内容类型的原因，大多数POST请求实际上需要预检请求。</li>
<li>如果非要取消预检工作，那么服务支持的其他的替代数据传输机制必须遵循本指南。</li>
</ul>
</li>
</ul>
<p>此外，当适当的服务可以支持JSONP模式时，只需简单的GET跨域访问。</p>
<p>在JSONP中，服务采用指示格式的参数(<em>$format=json</em>)和表示回调的参数(<em>$callback=someFunc</em>)，并返回一个 text/javascript 文档，其中包含用指定名称封装在函数调用中的JSON响应。</p>
<p>更多关于JSONP的信息，请访问Wikipedia: JSONP。</p>
</blockquote>
<h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><h3 id="项的Key"><a href="#项的Key" class="headerlink" title="项的Key"></a>项的Key</h3><blockquote>
<p>服务可以支持集合中每个项的持久标识符(主键)，该标识符应用JSON表示为”id” , 这些持久标识符通常用作项目的key。</p>
<p>支持持久标识符(主键)的集合可以支持增量查询。</p>
</blockquote>
<h3 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h3><blockquote>
<p>集合使用标准数组表示法以JSON表示。</p>
</blockquote>
<h3 id="集合的URL匹配模式"><a href="#集合的URL匹配模式" class="headerlink" title="集合的URL匹配模式"></a>集合的URL匹配模式</h3><blockquote>
<p>集合在顶级时直接位于服务的根目录下，或者作用于该资源时作为另一个资源下的段。</p>
<p>例如：</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">GET https://api.contoso.com/v1.0/people</span><br></pre></td></tr></table></figure>

<blockquote>
<p>服务必须尽可能支持“/” 匹配。</p>
<p>例如：</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">GET https://&#123;serviceRoot&#125;/&#123;collection&#125;/&#123;id&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Where:</p>
<ul>
<li>{serviceRoot} – 站点URL (site URL) + 服务的根路径的组合</li>
<li>{collection} – 集合的名称，未缩写，复数</li>
<li>{id} – 唯一id属性的值. 当使用 “/“ 匹配必须属于 string/number/guid value 不带引号，转义正确以适应URL。</li>
</ul>
</blockquote>
<h4 id="嵌套的集合和属性"><a href="#嵌套的集合和属性" class="headerlink" title="嵌套的集合和属性"></a>嵌套的集合和属性</h4><blockquote>
<p>集合项可以包含其他集合。</p>
<p>例如，用户集合可能包含多个地址的用户资源:</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">GET https://api.contoso.com/v1.0/people/123/addresses</span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"value"</span>: [</span><br><span class="line">    &#123; <span class="attr">"street"</span>: <span class="string">"1st Avenue"</span>, <span class="attr">"city"</span>: <span class="string">"Seattle"</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">"street"</span>: <span class="string">"124th Ave NE"</span>, <span class="attr">"city"</span>: <span class="string">"Redmond"</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="大集合"><a href="#大集合" class="headerlink" title="大集合"></a>大集合</h3><blockquote>
<p>随着数据的增长，集合也在增长。所以计划采用分页对所有服务都很重要。</p>
<p>因此，当数据包含多页时，序列化有效负载(payload)必须适当地包含下一页的不透明URL。</p>
<p>有关详细信息，请参阅分页指南。</p>
<p>客户端必须能够恰当的处理请求返回的任何给定的分页或非分页集合数据。</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"value"</span>:[</span><br><span class="line">    &#123; <span class="attr">"id"</span>: <span class="string">"Item 1"</span>,<span class="attr">"price"</span>: <span class="number">99.95</span>,<span class="attr">"sizes"</span>: <span class="literal">null</span>&#125;,</span><br><span class="line">    &#123; … &#125;,</span><br><span class="line">    &#123; … &#125;,</span><br><span class="line">    &#123; <span class="attr">"id"</span>: <span class="string">"Item 99"</span>,<span class="attr">"price"</span>: <span class="number">59.99</span>,<span class="attr">"sizes"</span>: <span class="literal">null</span>&#125;</span><br><span class="line">  ],</span><br><span class="line">  "@nextLink": "&#123;opaqueUrl&#125;"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="修改集合"><a href="#修改集合" class="headerlink" title="修改集合"></a>修改集合</h3><blockquote>
<p>POST请求不是幂等的。</p>
<p>这意味着发送到具有完全相同的有效负载(payload)的集合资源的两次POST请求可能导致在该集合中创建多个项。</p>
<p>例如，对于具有服务器端生成的id的项的插入操作，通常就是这种情况。</p>
<p>例如，以下请求:</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">POST https://api.contoso.com/v1.0/people</span><br></pre></td></tr></table></figure>

<blockquote>
<p>会导致响应，指示新集合项的位置：</p>
</blockquote>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">201 Created</span><br><span class="line"><span class="attribute">Location</span>: https://api.contoso.com/v1.0/people/123</span><br></pre></td></tr></table></figure>

<blockquote>
<p>一旦再次执行，可能会导致创建另一个资源：</p>
</blockquote>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">201 Created</span><br><span class="line"><span class="attribute">Location</span>: https://api.contoso.com/v1.0/people/124</span><br></pre></td></tr></table></figure>

<blockquote>
<p>而PUT请求则需要使用相应的键来指示集合项:</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">PUT https://api.contoso.com/v1.0/people/123</span><br></pre></td></tr></table></figure>

<h3 id="集合排序"><a href="#集合排序" class="headerlink" title="集合排序"></a>集合排序</h3><blockquote>
<p>可以基于属性值对集合查询的结果进行排序。</p>
<p>该属性由_$orderBy_查询参数的值确定。</p>
<p><em>$orderBy</em> 参数的值包含用于对项目进行排序表达式列表，用逗号分隔的。</p>
<p>这种表达式的特殊情况是属性路径终止于基本属性。</p>
<p>表达式可以包含升序的后缀“asc”或降序的后缀“desc”，它们与属性名之间用一个或多个空格分隔。</p>
<p>如果没有指定“asc”或“desc”，则服务必须按照指定的属性以升序排序。</p>
<p>空值(NULL)必须排序为“小于”非空值。</p>
<p>必须根据第一个表达式的结果值对项进行排序，然后根据第二个表达式的结果值对第一个表达式具有相同值的项进行排序，以此类推。</p>
<p>排序顺序是属性类型的固有顺序。</p>
<p>例如：</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">GET https://api.contoso.com/v1.0/people?$orderBy=name</span><br></pre></td></tr></table></figure>

<blockquote>
<p>将返回按name进行升序排序的所有人员。</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">GET https://api.contoso.com/v1.0/people?$orderBy=name desc</span><br></pre></td></tr></table></figure>

<blockquote>
<p>将返回按name进行降序排序的所有人。</p>
<p>可以通过逗号分隔的属性名称列表以及可选方向限定符来指定子排序。</p>
<p>例如：</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">GET https://api.contoso.com/v1.0/people?$orderBy=name desc,hireDate</span><br></pre></td></tr></table></figure>

<blockquote>
<p>将返回按姓名降序排列的所有人员，并按雇佣日期降序排列的次要排序。</p>
<p>排序必须与筛选相结合，如下:</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">GET https://api.contoso.com/v1.0/people?$filter=name eq 'david'&amp;$orderBy=hireDate</span><br></pre></td></tr></table></figure>

<blockquote>
<p>将返回所有名称为David的人，按雇佣日期按升序排列。</p>
</blockquote>
<h4 id="排序表达式的解释"><a href="#排序表达式的解释" class="headerlink" title="排序表达式的解释"></a>排序表达式的解释</h4><blockquote>
<p>跨页面的排序参数必须一致，因为客户端和服务器端分页都依赖该排序该参数进行排序。</p>
<p>如果服务不支持按_$orderBy_表达式中命名的属性排序，则服务必须按照“响应不支持的请求”部分中定义的错误消息进行响应。</p>
</blockquote>
<h3 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h3><blockquote>
<p>$filter_querystring 参数允许客户端通过URL过滤集合。</p>
<p>使用_$filter_指定的表达式将为集合中的每个资源求值，只有表达式求值为true的项才包含在响应中。</p>
<p>表达式计算为false或null的资源，或由于权限而不可用的引用属性，将从响应中省略。</p>
<p>例如:返回所有产品的价格低于10.00美元</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">GET https://api.contoso.com/v1.0/products?$filter=price lt 10.00</span><br></pre></td></tr></table></figure>

<blockquote>
<p>$filter_选项的值是 一个布尔表达式 表示 price less than 10.00。</p>
</blockquote>
<h4 id="过滤运算符"><a href="#过滤运算符" class="headerlink" title="过滤运算符"></a>过滤运算符</h4><blockquote>
<p>支持_$filter_的服务应该支持以下最小操作集。</p>
</blockquote>
<table>
<thead>
<tr>
<th>Operator</th>
<th>Description</th>
<th>Example</th>
</tr>
</thead>
<tbody><tr>
<td>Comparison Operators</td>
<td></td>
<td></td>
</tr>
<tr>
<td>eq</td>
<td>Equal</td>
<td>city eq ‘Redmond’</td>
</tr>
<tr>
<td>ne</td>
<td>Not equal</td>
<td>city ne ‘London’</td>
</tr>
<tr>
<td>gt</td>
<td>Greater than</td>
<td>price gt 20</td>
</tr>
<tr>
<td>ge</td>
<td>Greater than or equal</td>
<td>price ge 10</td>
</tr>
<tr>
<td>lt</td>
<td>Less than</td>
<td>price lt 20</td>
</tr>
<tr>
<td>le</td>
<td>Less than or equal</td>
<td>price le 100</td>
</tr>
<tr>
<td>Logical Operators</td>
<td></td>
<td></td>
</tr>
<tr>
<td>and</td>
<td>Logical and</td>
<td>price le 200 and price gt 3.5</td>
</tr>
<tr>
<td>or</td>
<td>Logical or</td>
<td>price le 3.5 or price gt 200</td>
</tr>
<tr>
<td>not</td>
<td>Logical negation</td>
<td>not price le 3.5</td>
</tr>
<tr>
<td>Grouping Operators</td>
<td></td>
<td></td>
</tr>
<tr>
<td>( )</td>
<td>Precedence grouping</td>
<td>(priority eq 1 or city eq ‘Redmond’) and price gt 100</td>
</tr>
</tbody></table>
<h4 id="运算符实例"><a href="#运算符实例" class="headerlink" title="运算符实例"></a>运算符实例</h4><blockquote>
<p>下面的示例说明了每个逻辑操作符的用法和语义。</p>
<p>示例:所有名称等于“Milk”的产品</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">GET https://api.contoso.com/v1.0/products?$filter=name eq 'Milk'</span><br></pre></td></tr></table></figure>

<blockquote>
<p>示例:所有名称不等于“Milk”的产品</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">GET https://api.contoso.com/v1.0/products?$filter=name ne 'Milk'</span><br></pre></td></tr></table></figure>

<blockquote>
<p>示例:所有标有“Milk”的产品价格都低于2.55:</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">GET https://api.contoso.com/v1.0/products?$filter=name eq 'Milk' and price lt 2.55</span><br></pre></td></tr></table></figure>

<blockquote>
<p>示例:所有标有“Milk”字样或价格低于2.55美元的产品:</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">GET https://api.contoso.com/v1.0/products?$filter=name eq 'Milk' or price lt 2.55</span><br></pre></td></tr></table></figure>

<blockquote>
<p>示例:所有名称为“牛奶”或“鸡蛋”且价格低于2.55的产品:</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">GET https://api.contoso.com/v1.0/products?$filter=(name eq 'Milk' or name eq 'Eggs') and price lt 2.55</span><br></pre></td></tr></table></figure>

<h4 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h4><blockquote>
<p>在计算_$filter_表达式时，服务使用以下操作符优先级。</p>
<p>操作符按类别按优先级从高到低排列。</p>
<p>同一类别的运算符具有同等优先级:</p>
</blockquote>
<table>
<thead>
<tr>
<th>Group</th>
<th>Operator</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>Grouping</td>
<td>( )</td>
<td>Precedence grouping</td>
</tr>
<tr>
<td>Unary</td>
<td>not</td>
<td>Logical Negation</td>
</tr>
<tr>
<td>Relational</td>
<td>gt</td>
<td>Greater Than</td>
</tr>
<tr>
<td></td>
<td>ge</td>
<td>Greater than or Equal</td>
</tr>
<tr>
<td></td>
<td>lt</td>
<td>Less Than</td>
</tr>
<tr>
<td></td>
<td>le</td>
<td>Less than or Equal</td>
</tr>
<tr>
<td>Equality</td>
<td>eq</td>
<td>Equal</td>
</tr>
<tr>
<td></td>
<td>ne</td>
<td>Not Equal</td>
</tr>
<tr>
<td>Conditional AND</td>
<td>and</td>
<td>Logical And</td>
</tr>
<tr>
<td>Conditional OR</td>
<td>or</td>
<td>Logical Or</td>
</tr>
</tbody></table>
<h3 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h3><blockquote>
<p>返回集合的RESTful API可能返回部分集。</p>
<p>这些服务的消费者清楚将获得部分结果集，并能正确地翻页以检索整个结果集。</p>
<p>RESTful API可能支持两种形式的分页。</p>
<p>服务器驱动的分页：通过在多个响应有效载荷上强制分页请求来减轻拒绝服务攻击。</p>
<p>客户端驱动的分页：允许客户机只请求它在给定时间可以使用的资源数量。</p>
<p>跨页面的排序和筛选参数必须一致，因为客户端和服务器端分页都完全兼容于筛选和排序。</p>
</blockquote>
<h4 id="服务端驱动分页"><a href="#服务端驱动分页" class="headerlink" title="服务端驱动分页"></a>服务端驱动分页</h4><blockquote>
<p>分页响应必须通过在响应中包含延续分页标记来告诉客户端这是部分结果。</p>
<p>没有延续分页标记意味着没有下一页了。</p>
<p>客户端必须将延续URL视为不透明的，这意味着在迭代一组部分结果时，查询选项可能不会更改。</p>
<p>例如:</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">GET http://api.contoso.com/v1.0/people HTTP/1.1</span><br><span class="line">Accept: application/json</span><br><span class="line"></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  ...,</span><br><span class="line">  "value": [...],</span><br><span class="line">  "@nextLink": "&#123;opaqueUrl&#125;"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="客户端驱动分页"><a href="#客户端驱动分页" class="headerlink" title="客户端驱动分页"></a>客户端驱动分页</h4><blockquote>
<p>客户端可以使用<em>$top_和</em>$skip_查询参数来指定返回的结果数量和跳过的集合数量。</p>
<p>服务器应遵守客户端指定的参数; 但是，客户端必须做好准备处理包含不同页面大小的响应或包含延续分页标记的响应。</p>
<p>当客户端同时提供<em>$top_和</em>$skip_时，服务器应该首先应用<em>$skip_，然后对集合应用</em>$top_。</p>
<p>注意:如果服务器不能执行<em>$top_和/或</em>$skip_，服务器必须返回一个错误给客户端，告知它，而不是忽略该查询参数。 这将避免客户端对返回的数据做出假设的风险。</p>
<p>实例:</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">GET http://api.contoso.com/v1.0/people?$top=5&amp;$skip=2 HTTP/1.1</span><br><span class="line">Accept: application/json</span><br><span class="line"></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  ...,</span><br><span class="line">  "value": [...]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="其他注意事项"><a href="#其他注意事项" class="headerlink" title="其他注意事项"></a>其他注意事项</h4><blockquote>
<p><strong>固定的顺序先决条件:</strong>两种分页形式都依赖于具有固定顺序的项的集合。</p>
<p>服务器必须使用额外的排序(通常是按键排序)来补充任何指定的顺序标准，以确保项目始终保持一致的顺序。</p>
<p><strong>缺失/重复结果：</strong>即使服务器强制执行一致的排序顺序，结果也可能会因创建或删除其他资源而导致丢失或重复。</p>
<p>客户端必须准备好处理这些差异。</p>
<p>服务器应该总是编码最后读取记录的记录ID，帮助客户端管理重复/丢失的结果。</p>
<p><strong>结合客户端和服务驱动的分页：</strong>请注意，客户端驱动的分页不排除服务器驱动的分页。</p>
<p>如果客户端请求的页面大小大于服务器支持的默认页面大小，则预期响应将是客户端指定的结果数，否则按服务端分页设置的指定分页。</p>
<p><strong>页面大小：</strong>客户端可以通过指定_$maxpagesize_首选项来请求具有特定页面大小的服务端驱动的分页。</p>
<p>如果指定的页面大小小于服务端的默认页面大小，服务器应该遵循此首选项。</p>
<p><strong>分页嵌入式集合：</strong>客户端驱动的分页和服务端驱动的分页都可以应用于嵌入式集合。</p>
<p>如果服务端对嵌入式集合进行分页，则必须包含其他适当的延续分页标记。</p>
<p><strong>记录集计数：</strong>想要知道所有页面中的完整记录数的开发人员可以包含查询参数_$ count=true_，以告知服务端包含响应中的记录数。</p>
</blockquote>
<h3 id="复合集合操作"><a href="#复合集合操作" class="headerlink" title="复合集合操作"></a>复合集合操作</h3><blockquote>
<p>筛选、排序和分页操作都可以针对给定的集合执行。</p>
<p>当这些操作一起执行时，评估顺序必须是:</p>
<ol>
<li><strong>筛选</strong>。这包括作为AND操作执行的所有范围表达式。</li>
<li><strong>排序</strong>。可能已过滤的列表根据排序条件进行排序。</li>
<li><strong>分页</strong>。经过筛选和排序的列表上显示了实现分页视图。这适用于服务器驱动的分页和客户端驱动的分页。</li>
</ol>
</blockquote>
<h2 id="增量查询"><a href="#增量查询" class="headerlink" title="增量查询"></a>增量查询</h2><blockquote>
<p>服务可以选择支持Delta查询。</p>
</blockquote>
<h3 id="增量链接"><a href="#增量链接" class="headerlink" title="增量链接"></a>增量链接</h3><blockquote>
<p>增量(Delta)链接是不透明的、由服务生成的链接，客户端使用这些链接查询对结果的后续更改。</p>
<p>在概念层面上，delta链接基于一个定义查询，该查询描述正在跟踪更改的一组结果集。</p>
<p>delta链接编码并跟踪这些更改的实体集合，以及跟踪更改的起点。</p>
<p>如果查询包含筛选器，则响应必须只包含对匹配指定条件的实体的更改。</p>
<p>Delta查询的主要原则是:</p>
<ul>
<li>集合中的每个项目必须具有持久标识符（永久不变的主键）。该标识符应该表示为“id”。此标识符由服务定义，客户端可以使用该字符串跨调用跟踪对象。</li>
<li>delta 必须包含每个与指定条件新匹配的实体的条目，并且必须为每个不再符合条件的实体包含“@removed”条目。</li>
<li>重新调用查询并将其与原始结果集进行比较; 必须将当前集合中惟一的每个条目作为”add”操作返回，并且必须将原始集合中惟一的每个条目作为“remove”操作返回。</li>
<li>以前与标准不匹配但现在匹配的每个实体必须作为”add”返回; 相反，先前与查询匹配但不再必须返回的每个实体必须作为“@removed”条目返回。</li>
<li>已更改的实体必须使用其标准表示形式包含在集合中。</li>
<li>服务可以向“@remove”节点添加额外的元数据，例如删除的原因或“removed at”时间戳。我们建议团队与Microsoft REST API指导原则工作组协调，以帮助维护一致性。</li>
</ul>
<p>Delta链接不能编码任何客户端 top 或 skip 值。</p>
</blockquote>
<h3 id="实体表示"><a href="#实体表示" class="headerlink" title="实体表示"></a>实体表示</h3><blockquote>
<p>添加和更新的实体使用其标准表示在实体集中表示。</p>
<p>从集合的角度来看，添加或更新的实体之间没有区别。</p>
<p>删除的实体仅使用其“id”和“@removed”节点表示。</p>
<p>“@removed”节点的存在必须表示从集合中删除条目。</p>
</blockquote>
<h3 id="获得增量链接"><a href="#获得增量链接" class="headerlink" title="获得增量链接"></a>获得增量链接</h3><blockquote>
<p>通过查询集合或实体并附加 $delta 查询字符串参数来获得 Delta 链接。</p>
<p>例如：</p>
</blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET https://api.contoso.com/v1.0/people?$delta</span><br><span class="line">HTTP/1.1</span><br><span class="line">Accept: application/json</span><br><span class="line"></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"value"</span>:[</span><br><span class="line">    &#123; <span class="attr">"id"</span>: <span class="string">"1"</span>, <span class="attr">"name"</span>: <span class="string">"Matt"</span>&#125;,</span><br><span class="line">    &#123; <span class="attr">"id"</span>: <span class="string">"2"</span>, <span class="attr">"name"</span>: <span class="string">"Mark"</span>&#125;,</span><br><span class="line">    &#123; <span class="attr">"id"</span>: <span class="string">"3"</span>, <span class="attr">"name"</span>: <span class="string">"John"</span>&#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"@deltaLink"</span>: <span class="string">"&#123;opaqueUrl&#125;"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意:如果集合分页，deltaLink将只出现在最后一页，但必须反映对所有页面返回的数据的任何更改。</p>
</blockquote>
<h3 id="增量链接响应内容"><a href="#增量链接响应内容" class="headerlink" title="增量链接响应内容"></a>增量链接响应内容</h3><blockquote>
<p>添加/更新的条目必须以常规JSON对象的形式出现，并带有常规项目属性。</p>
<p>在常规表示中返回添加/修改的项，允许客户端使用基于“id”字段的标准合并概念将它们合并到现有的“缓存”中。</p>
<p>从定义的集合中删除的条目必须包含在响应中。</p>
<p>从集合中删除的项必须仅使用它们的“id”和“@remove”节点表示。</p>
</blockquote>
<h3 id="使用增量链接"><a href="#使用增量链接" class="headerlink" title="使用增量链接"></a>使用增量链接</h3><blockquote>
<p>客户端通过调用delta链接上的GET方法请求更改。</p>
<p>客户端必须按原样使用delta URL——换句话说，客户端不能以任何方式修改URL(例如，解析URL并添加额外的查询字符串参数)。</p>
<p>在这个例子中:</p>
</blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET https://&#123;opaqueUrl&#125; HTTP/1.1</span><br><span class="line">Accept: application/json</span><br><span class="line"></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"value"</span>:[</span><br><span class="line">    &#123; <span class="attr">"id"</span>: <span class="string">"1"</span>, <span class="attr">"name"</span>: <span class="string">"Mat"</span>&#125;,</span><br><span class="line">    &#123; <span class="attr">"id"</span>: <span class="string">"2"</span>, <span class="attr">"name"</span>: <span class="string">"Marc"</span>&#125;,</span><br><span class="line">    &#123; <span class="attr">"id"</span>: <span class="string">"3"</span>, <span class="attr">"@removed"</span>: &#123;&#125; &#125;,</span><br><span class="line">    &#123; <span class="attr">"id"</span>: <span class="string">"4"</span>, <span class="attr">"name"</span>: <span class="string">"Luc"</span>&#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"@deltaLink"</span>: <span class="string">"&#123;opaqueUrl&#125;"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>针对delta链接的请求的结果可以跨多个页面，但是必须由服务跨所有页面进行排序，以便在应用到包含delta链接的响应时确保得到确定的结果。</p>
<p>如果没有发生任何更改，则响应是一个空集合，其中包含一个delta链接，用于根据请求进行后续更改。</p>
<p>这个delta链接可能与delta链接相同，从而导致更改的空集合。</p>
<p>如果delta链接不再有效，则服务必须使用_410 Gone_响应。响应应该包含一个Location头，客户端可以使用它来检索新的基线结果集。</p>
</blockquote>
<h2 id="JSON标准化"><a href="#JSON标准化" class="headerlink" title="JSON标准化"></a>JSON标准化</h2><h3 id="基本类型的JSON格式标准化"><a href="#基本类型的JSON格式标准化" class="headerlink" title="基本类型的JSON格式标准化"></a>基本类型的JSON格式标准化</h3><blockquote>
<p>基本类型必须按照[RFC8259]的规则序列化为JSON。</p>
<p>对于64位(bit)的重要说明：JavaScript会自动截断大于Number.MAX_SAFE_INTEGER（2^53-1）或小于Number.MIN_SAFE_INTEGER (-2^53+1)的整数。如果希望服务返回安全值范围之外的整数，则要着重考虑将值作为字符串返回，以最大程度的提高互操作性并避免数据丢失。</p>
</blockquote>
<h3 id="日期和时间指南"><a href="#日期和时间指南" class="headerlink" title="日期和时间指南"></a>日期和时间指南</h3><h4 id="创建日期"><a href="#创建日期" class="headerlink" title="创建日期"></a>创建日期</h4><blockquote>
<p>服务必须使用DateLiteral格式生成日期，并且应该使用Iso8601Literal格式，除非有其他不得已的原因。使用StructuredDateLiteral格式的服务不得T类型生成日期，除非同时要求附加精度并且明确不支持ECMAScript客户端。（非规范性声明：在确定要对哪个特定的DateKind标准化时，优先级的顺序为E，C，U，W，O，X，I，T。改命令会针对ECMAScript、.NET、C++程序员做优化）</p>
</blockquote>
<h4 id="使用日期"><a href="#使用日期" class="headerlink" title="使用日期"></a>使用日期</h4><blockquote>
<p>服务必须接受其客户端使用相同的DateLiteral格式（包括DateKind）产生的日期，并且应接受使用任何DateLiteral格式的日期。</p>
</blockquote>
<h4 id="兼容日期"><a href="#兼容日期" class="headerlink" title="兼容日期"></a>兼容日期</h4><blockquote>
<p>服务必须针对相同类型的所有资源使用相同的DateLiteral格式（如果适用，也包括DateKind），并且应针对整个服务中的所有资源使用相同的DateLiteral格式（如果适用，也包括DateKind）。</p>
<p>服务所产生的对DateLiteral格式的任何更改（如果适用，也包括DateKind）以及服务接受的DateLiteral格式的减少（如果使用，也包括DateKind）都必须为重大更改。服务接受的DateLiteral格式的任何扩展均不视为重大更改。</p>
</blockquote>
<h3 id="日期和时间的JSON序列化"><a href="#日期和时间的JSON序列化" class="headerlink" title="日期和时间的JSON序列化"></a>日期和时间的JSON序列化</h3><blockquote>
<p>正反序列化日期是JSON的一大难题，尽管ECMAScript支持大多数内置类型的文字，但它并未定义日期的文字格式。Web已经合并了ISO8601日期格式的ECMAScript子集，但在某些情况下，此格式是不可取的。对于这些情况，本文档定义了JSON序列化格式，可用于明确表示不同格式的日期。其他序列化格式（例如XML）也可以从该格式派生。</p>
</blockquote>
<h4 id="DateLiteral-格式"><a href="#DateLiteral-格式" class="headerlink" title="DateLiteral 格式"></a>DateLiteral 格式</h4><blockquote>
<p>JSON表示的日期使用以下语法进行序列化。非正式地，DateValue是ISO8601格式的字符串或JSON对象，其中包含两个名为kind和value的属性，他们共同定义了一个时间点。以下不是上下文无关的域大；特别是，DateValue的解释取决于DateKind的值，但这可以最大程度地减少描述该格式所需的生产数量。</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">DateLiteral:</span><br><span class="line">  Iso8601Literal</span><br><span class="line">  StructuredDateLiteral</span><br><span class="line"></span><br><span class="line">Iso8601Literal:</span><br><span class="line">  A string literal as defined in http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.1.15. Note that the full grammar for ISO 8601 (such as "basic format" without separators) is not supported.</span><br><span class="line">  All dates default to UTC unless specified otherwise.</span><br><span class="line"></span><br><span class="line">StructuredDateLiteral:</span><br><span class="line">  &#123; DateKindProperty , DateValueProperty &#125;</span><br><span class="line">  &#123; DateValueProperty , DateKindProperty &#125;</span><br><span class="line"></span><br><span class="line">DateKindProperty</span><br><span class="line">  "kind" : DateKind</span><br><span class="line"></span><br><span class="line">DateKind:</span><br><span class="line">  "C"            ; see below</span><br><span class="line">  "E"            ; see below</span><br><span class="line">  "I"            ; see below</span><br><span class="line">  "O"            ; see below</span><br><span class="line">  "T"            ; see below</span><br><span class="line">  "U"            ; see below</span><br><span class="line">  "W"            ; see below</span><br><span class="line">  "X"            ; see below</span><br><span class="line"></span><br><span class="line">DateValueProperty:</span><br><span class="line">  "value" : DateValue</span><br><span class="line"></span><br><span class="line">DateValue:</span><br><span class="line">  UnsignedInteger        ; not defined here</span><br><span class="line">  SignedInteger        ; not defined here</span><br><span class="line">  RealNumber        ; not defined here</span><br><span class="line">  Iso8601Literal        ; as above</span><br></pre></td></tr></table></figure>



<h4 id="日期格式的注释"><a href="#日期格式的注释" class="headerlink" title="日期格式的注释"></a>日期格式的注释</h4><blockquote>
<p>使用ISO8601的Literal生成的DateLiteral相对简单，这是一个对象的示例，该对象具有一个名为creationDate的属性，该属性设置为2015年2月13日下午1:15。世界标准时间：</p>
</blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123; <span class="attr">"creationDate"</span> : <span class="string">"2015-02-13T13:15Z"</span> &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>StructuredDateLiteral由一个DateKind和一个伴随的DateValue组成，其有效值取决于DateKind，下面描述了有效的组合及其含义：</p>
</blockquote>
<table>
<thead>
<tr>
<th>DateKind</th>
<th>DateValue</th>
<th>Colloquial Name &amp; Interpretation</th>
<th>More Info</th>
</tr>
</thead>
<tbody><tr>
<td>C</td>
<td>UnsignedInteger</td>
<td>“CLR”; number of milliseconds since midnight January 1, 0001; negative values are not allowed. <em>See note below.</em></td>
<td><a href="https://msdn.microsoft.com/en-us/library/System.DateTime(v=vs.110).aspx" target="_blank" rel="noopener">MSDN</a></td>
</tr>
<tr>
<td>E</td>
<td>SignedInteger</td>
<td>“ECMAScript”; number of milliseconds since midnight, January 1, 1970.</td>
<td><a href="http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.1.1" target="_blank" rel="noopener">ECMA International</a></td>
</tr>
<tr>
<td>I</td>
<td>Iso8601Literal</td>
<td>“ISO 8601”; a string limited to the ECMAScript subset.</td>
<td></td>
</tr>
<tr>
<td>O</td>
<td>RealNumber</td>
<td>“OLE Date”; integral part is the number of days since midnight, December 31, 1899, and fractional part is the time within the day (0.5 = midday).</td>
<td><a href="https://docs.microsoft.com/en-us/windows/desktop/api/oleauto/nf-oleauto-varianttimetosystemtime" target="_blank" rel="noopener">MSDN</a></td>
</tr>
<tr>
<td>T</td>
<td>SignedInteger</td>
<td>“Ticks”; number of ticks (100-nanosecond intervals) since midnight January 1, 1601. <em>See note below.</em></td>
<td><a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms724290(v=vs.85).aspx" target="_blank" rel="noopener">MSDN</a></td>
</tr>
<tr>
<td>U</td>
<td>SignedInteger</td>
<td>“UNIX”; number of seconds since midnight, January 1, 1970.</td>
<td><a href="https://msdn.microsoft.com/en-us/library/1f4c8f33.aspx" target="_blank" rel="noopener">MSDN</a></td>
</tr>
<tr>
<td>W</td>
<td>SignedInteger</td>
<td>“Windows”; number of milliseconds since midnight January 1, 1601. <em>See note below.</em></td>
<td><a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms724290(v=vs.85).aspx" target="_blank" rel="noopener">MSDN</a></td>
</tr>
<tr>
<td>X</td>
<td>RealNumber</td>
<td>“Excel”; as for <code>O</code> but the year 1900 is incorrectly treated as a leap year, and day 0 is “January 0 (zero).”</td>
<td><a href="http://support.microsoft.com/kb/214326?wa=wsignin1.0" target="_blank" rel="noopener">Microsoft Support</a></td>
</tr>
</tbody></table>
<blockquote>
<p>对于C和W类型的重要说明：本地CLR和Windows时间用100纳米傲地“刻度”值来表示。为了与精度有限的ECMAScript客户端精选互操作，当（反）序列化为DateLiteral时，这些值必须在毫秒之间转换。一毫秒等于1000滴答声。</p>
<p>对于T类型的重要说明：这种类型保留了Windows本机时间格式的全部保真度（并且可以轻松地与本机CLR格式进行转换），但与ECMAScript客户端不兼容。因此，它的使用应仅限于既需要更好的精度又不需要与ECMAScript客户端进行互操作的场景。</p>
<p>这是一个对象的示例，该对象具有一个名为creationDate的属性，该属性设置为2015年2月13日下午1:15 UTC，使用几下格式：</p>
</blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123; <span class="attr">"creationDate"</span> : &#123; <span class="attr">"kind"</span> : <span class="string">"O"</span>, <span class="attr">"value"</span> : <span class="number">42048.55</span> &#125; &#125;,</span><br><span class="line">  &#123; <span class="attr">"creationDate"</span> : &#123; <span class="attr">"kind"</span> : <span class="string">"E"</span>, <span class="attr">"value"</span> : <span class="number">1423862100000</span> &#125; &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>将值与种类分来的好处之一是，一旦客户知道特定服务使用的种类，便可以解释该值而无需任何其他解析。在值通常为数字的情况下，这使得开发人员更容易编写代码：</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">// We know this service always gives out ECMAScript-format dates</span><br><span class="line">var date = new Date(serverResponse.someObject.creationDate.value);</span><br></pre></td></tr></table></figure>

<h3 id="持续时间"><a href="#持续时间" class="headerlink" title="持续时间"></a>持续时间</h3><blockquote>
<p>持续时间需要按照IISO8601进行序列化。持续时间以格式P[n]Y[n]M[n]DT[n]H[n]M[n]S表示”，从标准：</p>
<ul>
<li>P是放置在持续时间表示开始处的持续时间指示符（也称为”周期“）</li>
<li>Y是跟随年份值的年份指示符</li>
<li>M是跟随月份数的月份指示符</li>
<li>D是跟随天数值的天数指示符</li>
<li>T是在表示的时间成分之前的时间指示符</li>
<li>H是跟随小时数的值的小时指示符</li>
<li>M是分钟数值后面的分钟指示符</li>
<li>S是跟随描述的第二个指示符</li>
</ul>
<p>例如，”P3Y6M4DT12H30M5S“表示持续时间为”三年，六个月，四天，十二小时，三十分钟五秒“</p>
</blockquote>
<h3 id="间隔"><a href="#间隔" class="headerlink" title="间隔"></a>间隔</h3><blockquote>
<p>间隔定义为ISO8601的一部分。</p>
<ul>
<li>开始和结束，例如”2007-03-01T13:00:00Z/2008-05-11T15:30:00Z“</li>
<li>开始时间和持续时间，例如”2007-03-01T13:00:00Z/P1Y2M10DT2H30M“</li>
<li>持续时间和结束时间，例如”P1Y2M10DT2H30M/2008-05-11T15:30:00Z“</li>
<li>仅持续时间，例如”P1Y2M10DT2H30M“，以及其他上下文信息</li>
</ul>
</blockquote>
<h3 id="重复间隔"><a href="#重复间隔" class="headerlink" title="重复间隔"></a>重复间隔</h3><blockquote>
<p>重复间隔是ISO8601的一部分：</p>
<blockquote>
<p>Formed by adding “R[n]/“ to the beginning of an interval expression, where R is used as the letter itself and [n] is replaced by the number of repetitions. Leaving out the value for [n] means an unbounded number of repetitions.</p>
</blockquote>
<p>例如，要从”2008-03-01 T 13:00:00 Z“开始重复五次”P1Y2M10DT2H30M“间隔，使用”R5/2008-03-01T13:00:00Z/P1Y2M10DT2H30M“</p>
</blockquote>
<h2 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h2><blockquote>
<p>所有符合Microsoft REST API标准的API都必须支持显式版本控制。客户端可以依靠服务保持稳定是至关重要的，服务可以添加功能并进行更改也至关重要。</p>
</blockquote>
<h3 id="版本格式"><a href="#版本格式" class="headerlink" title="版本格式"></a>版本格式</h3><blockquote>
<p>使用Major.Minor版本控制方案对服务进行版本控制。服务可以选择”仅主要“版本方案，在这种情况下暗含”.0”,并且本节中的所有其他规则均使用。支持两种用于指定REST API请求版本的选项：</p>
<p>嵌入在请求URL路径中，位于服务根目录的末尾：</p>
</blockquote>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">https://api.contoso.com/v1.0/products/users</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>作为URL的查询字符串参数：</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">https://api.contoso.com/products/users?api-version=1.0</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在两个选择之间进行选择的规则如下：</p>
<ol>
<li>共同位于DNS端点后面的服务必须使用相同的版本控制机制</li>
<li>在这种情况下，跨端点的一致用户体验至关重要。Microsoft REST API准则工作组建议在未与组织领导团队进行明确对话的情况下，不要创建新的顶级DNS终结点。</li>
<li>保证其REST API的URL路径稳定的服务，即使通过API的未来版本，也可以采用查询字符串参数机制。这意味着在API交付后，API中描述的关系的命名和结构就无法发展，即使是在具有重大更改的版本之间也是如此。</li>
<li>无法确保未来版本中URL路径稳定性的服务必须将版本嵌入URL路径中。</li>
</ol>
<p>某些基础服务，如Microsoft的Azure Active Directory可能暴露于多个终结点之后。这样的服务必须支持每个端点的版本控制机制，即使这意味着支持多种版本控制机制。</p>
</blockquote>
<h4 id="组版本控制"><a href="#组版本控制" class="headerlink" title="组版本控制"></a>组版本控制</h4><blockquote>
<p>组版本控制是一种可选功能，可以使用查询字符串参数机制在服务上提供。组版本允许在通用版本名称下对API端点进行逻辑分组。这使开发人员可以查找单个版本号，并在多个端点之间使用它。组版本号是众所周知的，服务应该拒绝任何无法识别的值。</p>
<p>在内部，服务将采用组版本并将其映射到适当的Major.Minor版本。</p>
<p>组本版格式定义为YYYY-MM-DD，例如2012年12月7日为2012-12-07.此日期版本格式仅适用组版本，不应该作为Major.Minor版本的替代。</p>
<p>组版本示例：</p>
</blockquote>
<table>
<thead>
<tr>
<th>Group</th>
<th>Major.Minor</th>
</tr>
</thead>
<tbody><tr>
<td>2012-12-01</td>
<td>1.0</td>
</tr>
<tr>
<td></td>
<td>1.1</td>
</tr>
<tr>
<td></td>
<td>1.2</td>
</tr>
<tr>
<td>2013-03-21</td>
<td>1.0</td>
</tr>
<tr>
<td></td>
<td>2.0</td>
</tr>
<tr>
<td></td>
<td>3.0</td>
</tr>
<tr>
<td></td>
<td>3.1</td>
</tr>
<tr>
<td></td>
<td>3.2</td>
</tr>
<tr>
<td></td>
<td>3.3</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>Version Format</th>
<th>Example</th>
<th>Interpretation</th>
</tr>
</thead>
<tbody><tr>
<td>{groupVersion}</td>
<td>2013-03-21, 2012-12-01</td>
<td>3.3, 1.2</td>
</tr>
<tr>
<td>{majorVersion}</td>
<td>3</td>
<td>3.0</td>
</tr>
<tr>
<td>{majorVersion}.{minorVersion}</td>
<td>1.2</td>
<td>1.2</td>
</tr>
</tbody></table>
<blockquote>
<p>客户端可以具体说明组版本或者Major.Minor版本：</p>
<p>例如：</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">GET http://api.contoso.com/acct1/c1/blob2?api-version=1.0</span><br></pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line">PUT http://api.contoso.com/acct1/c1/b2?api-version=2011-12-07</span><br></pre></td></tr></table></figure>

<h3 id="版本时间"><a href="#版本时间" class="headerlink" title="版本时间"></a>版本时间</h3><blockquote>
<p> 服务必须响应任何重大的API更改而增加其版本号。有关构成突变的内容的详细讨论，请参见以下部分。如果需要，服务也可以增加其版本号以进行不间断的更改。</p>
<p>使用新的主要版本号表示将来不再支持现有客户端。引入新的主要版本时，服务必须为现有客户提供清晰的升级路径，并制定与其业务组策略一致的弃用计划。服务应将新的次要版本号用于所有其他更改。</p>
<p>版本化服务的在线文档必须指出每个先前API版本的当前支持状态，并提供最新版本的路径。</p>
</blockquote>
<h3 id="重大变化的定义"><a href="#重大变化的定义" class="headerlink" title="重大变化的定义"></a>重大变化的定义</h3><blockquote>
<p>对于API约定的更改被视作重大更改，影响API向后兼容性的更改是一项重大更改。</p>
<p>团队可以根据他们的业务需求定义向后的兼容性。例如，Azure将响应中的新JSON字段定义为不向后兼容。Office365具有向后兼容性的较宽松的定义，并允许将JSON字段添加到响应中。</p>
<p>重大更改更清晰的示例：</p>
<ol>
<li>删除或重命名API或者参数</li>
<li>现有API的行为的更改</li>
<li>错误代码或故障约定的变更</li>
<li>任何违反最小意外原则的东西</li>
</ol>
<p>服务务必明确定义其重大更改的定义，尤其是在向JSON响应中添加新字段以及使用默认字段添加新API参数方面。与其他服务一起位于DNS端点后面的服务在定义合同可扩展性时必须保持一致。</p>
<p>本节中描述的OData V4规范适用更改应被视为所有服务必须考虑的重大更改的最低要求的一部分。</p>
</blockquote>
<h2 id="长时间运行的操作"><a href="#长时间运行的操作" class="headerlink" title="长时间运行的操作"></a>长时间运行的操作</h2><blockquote>
<p>长时间运行的操作（有时称为异步操作）对不同的人以为着不同的意思，本节针对不同类型的长时间运行设置了指南，并介绍了这些类型的操作的线路协议和最佳实践。</p>
<ol>
<li>一个或多个客户端必须能够同时监视和操作同一资源。</li>
<li>系统状态应始终可发现和可测试。即使操作跟踪资源不再处于活动状态，客户端也应该能够确定系统状态。查询长时间运行状态的操作本身应该利用网络原理。即具有统一接口语义的定义明确的资源。客户端可以在某些资源上发出GET来确定长时间运行的状态。</li>
<li>长期运行的操作应该为希望”解雇“的客户以及希望积极监控结果并根据结果采取行动的客户服务。</li>
<li>取消并不明确意味着回滚。在按API定义的情况下，这可能意味这回滚、补偿、完成或部分完成等。在取消操作之后，客户不应该将服务返回到允许继续服务的一致状态的责任。</li>
</ol>
</blockquote>
<h3 id="基于资源的长时间运行（RELO）"><a href="#基于资源的长时间运行（RELO）" class="headerlink" title="基于资源的长时间运行（RELO）"></a>基于资源的长时间运行（RELO）</h3><blockquote>
<p>基于资源的建模是将操作的状态编码在资源中，并且所使用的有限协议是标准同步协议。在此模型中，状态转移定义明确，目标状态定义类似。</p>
<p>对于长时间运行的操作，这是首选模型，应尽可能使用它。避免了LRO Wire Protocol的复杂性和机制i，对于我们的用户和工具链而言，事情就变得更加简单。</p>
<p>一个示例可能是计算机重新引导，该操作本身同步完成，但是虚拟机资源上的GET操作将具有”状态：正在重新引导”，“状态：正在运行”，可以随时查询。</p>
<p>该模型可以集成推送通知。</p>
<p>尽管大多数操作可能是POST语义，但除POST语义外，服务可以通过路由支持的PUT语义以简化其API。例如：想要创建一个名为“db1”的数据库的用户可以调用：</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">PUT https://api.contoso.com/v1.0/databases/db1</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在这种情况下，数据库正在处理PUT操作。</p>
<p>服务也可以使用下面定义的混合</p>
</blockquote>
<h3 id="分步运行长时运行"><a href="#分步运行长时运行" class="headerlink" title="分步运行长时运行"></a>分步运行长时运行</h3><blockquote>
<p>分步操作是一种需要很长时间（通常是不可预测的）的时间来完成的操作，并且不提供在资源中建模的状态转换。本节概述了服务应该使用的方法来公开这些长时间运行的操作。</p>
<p>服务可以公开逐步操作。</p>
<blockquote>
<p>Stepwise Long Running Operations are sometimes called “Async” operations. This causes confusion, as it mixes elements of platforms (“Async / await”, “promises”, “futures”) with elements of API operation. This document uses the term “Stepwise Long Running Operation” or often just “Stepwise Operation” to avoid confusion over the word “Async”.</p>
</blockquote>
<p>服务必须对分步请求执行尽可能多的同步验证。服务必须以同步方式确定返回错误的优先级，目标是使用长时间运行的操作有线协议仅处理”有效“操作。</p>
<p>对于定义为分步长时间运行操作的API，即使该操作可以立即完成，服务也必须经过分步长期运行操作流程。换句话说，API必须采用并坚持LRO模式，并且不得根据情况更改模式。</p>
</blockquote>
<h4 id="PUT"><a href="#PUT" class="headerlink" title="PUT"></a>PUT</h4><blockquote>
<p>服务可以启用用于实体创建的PUT情况。</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">PUT https://api.contoso.com/v1.0/databases/db1</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在这种情况下，数据库正在处理PUT操作。</p>
</blockquote>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">202</span> Accepted</span><br><span class="line"><span class="attribute">Operation-Location</span>: https://api.contoso.com/v1.0/operations/123</span><br></pre></td></tr></table></figure>

<blockquote>
<p>对于需要返回此处创建201的服务，请使用下面描述的混合流程。</p>
<p>202已接受不返回任何正文，201Created案例应该返回目标资源的主体。</p>
</blockquote>
<h4 id="POST-1"><a href="#POST-1" class="headerlink" title="POST"></a>POST</h4><blockquote>
<p>服务可以启用用于实体创建的POST请求。</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">POST https://api.contoso.com/v1.0/databases/</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  "fileName": "someFile.db",</span><br><span class="line">  "color": "red"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">202</span> Accepted</span><br><span class="line"><span class="attribute">Operation-Location</span>: https://api.contoso.com/v1.0/operations/123</span><br></pre></td></tr></table></figure>

<h4 id="POST-混合模式"><a href="#POST-混合模式" class="headerlink" title="POST, 混合模式"></a>POST, 混合模式</h4><blockquote>
<p>服务可以对创建资源的集合的POST请求进行同步响应，即使在生成响应时资源没有完全创建。为了使用这种模式，响应必须包含不完整资源的表示和不完整资源的指示。</p>
<p>例如：</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">https://api.contoso.com/v1.0/databases/</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: api.contoso.com</span><br><span class="line"><span class="attribute">Content-Type</span>: application/json</span><br><span class="line"><span class="attribute">Accept</span>: application/json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  "fileName": "someFile.db",</span><br><span class="line">  "color": "red"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>服务响应说数据库已经创建，但是通过包含Operation-Location标头指示请求未完成。在这种情况下，响应有负载中的status属性还指示该操作尚未完全完成。</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">201</span> Created</span><br><span class="line"><span class="attribute">Location</span>: https://api.contoso.com/v1.0/databases/db1</span><br><span class="line"><span class="attribute">Operation-Location</span>: https://api.contoso.com/v1.0/operations/123</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  "databaseName": "db1",</span><br><span class="line">  "color": "red",</span><br><span class="line">  "Status": "Provisioning",</span><br><span class="line">  [ … other fields for "database" …]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="运作资源"><a href="#运作资源" class="headerlink" title="运作资源"></a>运作资源</h4><blockquote>
<p>服务可以在租户级别提供’/operations’资源。</p>
<p>提供”/operations”资源的服务必须提供GET语义。GET必须枚举遵循标准分页、排序和过滤语义的操作集。此操作的默认排序顺序必须为：</p>
</blockquote>
<table>
<thead>
<tr>
<th>Primary Sort</th>
<th>Secondary Sort</th>
</tr>
</thead>
<tbody><tr>
<td>Not Started Operations</td>
<td>Operation Creation Time</td>
</tr>
<tr>
<td>Running Operations</td>
<td>Operation Creation Time</td>
</tr>
<tr>
<td>Completed Operations</td>
<td>Operation Creation Time</td>
</tr>
</tbody></table>
<blockquote>
<p>请注意：“完成的操作”是目标状态（参见下文），实际上可以是几种不同的状态中的任何一种，例如“成功”、“已取消”、“失败”等。</p>
</blockquote>
<h4 id="运作资源-1"><a href="#运作资源-1" class="headerlink" title="运作资源"></a>运作资源</h4><blockquote>
<p>操作是用户可寻址资源，它跟踪逐步进行的逐步操作。操作必须支持GET语义，针对某个操作的GET操作务必返回：</p>
<ol>
<li>操作资源，其状态以及与特定API相关的任何扩展状态。</li>
<li>200 OK作为响应代码。</li>
</ol>
<p>服务可以通过在操作上暴露DELETE来支持取消操作。如果支持，则删除操作必须是等幂的。</p>
<blockquote>
<p>Note: From an API design perspective, cancellation does not explicitly mean rollback. On a per-API defined case it may mean rollback, or compensation, or completion, or partial completion, etc. Following a cancelled operation, It SHOULD NOT be a client’s responsibility to return the service to a consistent state which allows continued service.</p>
</blockquote>
<p>不支持取消操作的服务必须在发生DELETE时返回 405 Method Not Allowed.</p>
<p>操作必须支持以下状态：</p>
<ol>
<li>NotStarted</li>
<li>Running</li>
<li>Succeeded. Terminal State</li>
<li>Failed. Terminal State</li>
</ol>
<p>服务可以添加其他状态，例如“已取消”或“部分完成”。支持取消的服务必须充分描述其取消，以便可以准确地确定系统状态，并且可以运行任何补偿操作。</p>
<p>支持其他状态的服务应考虑一下规范名称列表，并尽可能避免创建新的名称：正在取消、已取消、正在中止、已中止、终止、正在删除、已删除。</p>
<p>一个操作必须包含以下信息，并在GET响应中提供以下信息：</p>
<ol>
<li>创建操作的时间戳。</li>
<li>输入当前状态的时间戳。</li>
<li>操作状态（未启动/正在运行/已完成）。</li>
</ol>
<p>服务可以在操作中添加其他特定于API的字段。返回的操作状态JSON如下：</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "createdDateTime": "2015-06-19T12-01-03.45Z",</span><br><span class="line">  "lastActionDateTime": "2015-06-19T12-01-03.45Z",</span><br><span class="line">  "status": "notstarted | running | succeeded | failed"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="完成百分比"><a href="#完成百分比" class="headerlink" title="完成百分比"></a>完成百分比</h5><blockquote>
<p>有时，服务将无法完全准确地知道操作何时完成，这使得使用Retry-After标头有问题。在这种情况下，服务可以在oprationStatus JSON中包含完成百分比字段。</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "createdDateTime": "2015-06-19T12-01-03.45Z",</span><br><span class="line">  "percentComplete": "50",</span><br><span class="line">  "status": "running"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在此示例中，服务器已向客户端指示长时间运行的操作已完成50%</p>
</blockquote>
<h5 id="目标资源位置"><a href="#目标资源位置" class="headerlink" title="目标资源位置"></a>目标资源位置</h5><blockquote>
<p>对于产生或操纵资源的操作，服务必须在操作完成后的状态中包含目标资源位置。</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "createdDateTime": "2015-06-19T12-01-03.45Z",</span><br><span class="line">  "lastActionDateTime": "2015-06-19T12-06-03.0024Z",</span><br><span class="line">  "status": "succeeded",</span><br><span class="line">  "resourceLocation": "https://api.contoso.com/v1.0/databases/db1"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="操作终止"><a href="#操作终止" class="headerlink" title="操作终止"></a>操作终止</h4><blockquote>
<p>服务可以选择支持逻辑删除操作，服务可以在服务定义的一段时间后选择删除逻辑删除。</p>
</blockquote>
<h4 id="典型流程：轮询"><a href="#典型流程：轮询" class="headerlink" title="典型流程：轮询"></a>典型流程：轮询</h4><blockquote>
<ul>
<li>客户端通过使用POST调用动作来调用逐步操作</li>
<li>服务器必须通过响应202接受的状态码来指示请求已开始。响应应该包含位置标头，该标头包含一个URL，客户端应该等待Retry-After标头中指定的秒数后，客户端应该轮询结果。</li>
<li>客户端轮询该位置，直到收到带有终端操作状态的200响应</li>
</ul>
<p>轮询的示例：</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">https://api.contoso.com/v1.0/databases</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Accept</span>: application/json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  "fromFile": "myFile.db",</span><br><span class="line">  "color": "red"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>服务器响应指示请求已创建</p>
</blockquote>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">202</span> Accepted</span><br><span class="line"><span class="attribute">Operation-Location</span>: https://api.contoso.com/v1.0/operations/123</span><br></pre></td></tr></table></figure>

<blockquote>
<p>客户端等待一段时间，然后调用另一个请求以尝试获取操作状态</p>
</blockquote>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">GET https://api.contoso.com/v1.0/operations/123</span><br><span class="line"><span class="attribute">Accept</span>: application/json</span><br></pre></td></tr></table></figure>

<blockquote>
<p>服务器响应结果仍未准备好，可以选择提供建议以等待30秒</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Retry-After</span>: 30</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  "createdDateTime": "2015-06-19T12-01-03.4Z",</span><br><span class="line">  "status": "running"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>客户端等待建议的30秒，然后调用另一个请求以获取操作结果</p>
</blockquote>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">GET https://api.contoso.com/v1.0/operations/123</span><br><span class="line"><span class="attribute">Accept</span>: application/json</span><br></pre></td></tr></table></figure>

<blockquote>
<p>服务端以包含资源位置的“status:succeeded”操作进行响应</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Content-Type</span>: application/json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  "createdDateTime": "2015-06-19T12-01-03.45Z",</span><br><span class="line">  "lastActionDateTime": "2015-06-19T12-06-03.0024Z",</span><br><span class="line">  "status": "succeeded",</span><br><span class="line">  "resourceLocation": "https://api.contoso.com/v1.0/databases/db1"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="典型流程：推送通知"><a href="#典型流程：推送通知" class="headerlink" title="典型流程：推送通知"></a>典型流程：推送通知</h4><blockquote>
<ol>
<li>客户端通过使用POST调用操作来调用长时间运行的操作。客户端已经在父资源上设置了推送通知</li>
<li>该服务通过响应202接受的状态码来指示请求已经开始。客户端忽略所有其他内容</li>
<li>完成整体操作后，服务将通过订阅在父资源上推送通知</li>
<li>客户端通过资源URL获取操作结果</li>
</ol>
<p>推送通知到现有订阅的示例：</p>
<p>客户端调用备份操作，客户端已经为db1设置了推送通知订阅。</p>
</blockquote>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">https://api.contoso.com/v1.0/databases/db1?backup</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Accept</span>: application/json</span><br></pre></td></tr></table></figure>

<blockquote>
<p>服务器响应指示该请求已被接受</p>
</blockquote>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">202</span> Accepted</span><br><span class="line"><span class="attribute">Operation-Location</span>: https://api.contoso.com/v1.0/operations/123</span><br></pre></td></tr></table></figure>

<blockquote>
<p>调用方将忽略返回中的所有标头。</p>
<p>操作完成后，目标URL会收到推送通知。</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Content-Type</span>: application/json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  "value": [</span><br><span class="line">    &#123;</span><br><span class="line">      "subscriptionId": "1234-5678-1111-2222",</span><br><span class="line">      "context": "subscription context that was specified at setup",</span><br><span class="line">      "resourceUrl": "https://api.contoso.com/v1.0/databases/db1",</span><br><span class="line">      "userId" : "contoso.com/user@contoso.com",</span><br><span class="line">      "tenantId" : "contoso.com"</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="重试机制"><a href="#重试机制" class="headerlink" title="重试机制"></a>重试机制</h4><blockquote>
<p>在上面的示例中，”Retry-After“标头指示客户端尝试从位置标头标识的URL获取结果之前应等待的秒数。</p>
<p>HTTP规范允许Retry-After标头替代性地指定HTTP日期，因此客户端也应准备好处理此日期。</p>
</blockquote>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">202</span> Accepted</span><br><span class="line"><span class="attribute">Operation-Location</span>: http://api.contoso.com/v1.0/operations/123</span><br><span class="line"><span class="attribute">Retry-After</span>: 60</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：HTTP日期的使用与本文档中使用的ISO8601日期格式不一致，但由[RFC 7231]中的HTTP标准明确定义。服务应该首选整数秒格式而不是HTTP日期格式。</p>
</blockquote>
<h3 id="操作结果保留策略"><a href="#操作结果保留策略" class="headerlink" title="操作结果保留策略"></a>操作结果保留策略</h3><blockquote>
<p>在某些情况下，长时间运行的结果不是可以解决的资源。例如，如果您调用一个长时间运行的Action，该Action返回一个boolean（而不是资源），在这些情况下，Location标头指向可以检索布尔结果的位置。</p>
<p>这就有人提出了问题了”操作结果应该保留多长时间？“</p>
<p>建议最短保留时间为24小时。</p>
<p>在从系统中清除之前，应该将操作过度到”逻辑删除“一段额外的时间。</p>
</blockquote>
<h2 id="节流、配额、限制"><a href="#节流、配额、限制" class="headerlink" title="节流、配额、限制"></a>节流、配额、限制</h2><h3 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h3><blockquote>
<p>服务应尽可能具有响应性，以免阻止呼叫者。根据经验，在第99个百分位数中，任何预期花费超过0.5秒的API调用都应考虑对这些调用使用长时间运行模式。显然，面对来自呼叫者的无限负载，服务无法保证这些响应时间，因此，服务应设计和记录客户的呼叫请求限制，并在超出这些限制时以适当的可操作错误和错误消息进行响应。服务通常在超载时以错误快速响应，而不是简单地缓慢响应。最后，胡多服务将具有通话配额，可能是每小时或每天进行多次操作，服务还必须提供立即可操作的错误。配额和限制应限制在一个客户单位范围内：订阅、组合、应用程序、计划或没有任何其他表示的IP地址范围等等视服务目标而定，以便正确分担负载和一个单位不干扰他人</p>
</blockquote>
<h3 id="返回值（429-vs-503）"><a href="#返回值（429-vs-503）" class="headerlink" title="返回值（429 vs 503）"></a>返回值（429 vs 503）</h3><blockquote>
<p>HTTP为了这些情况指定了两个返回码：”429 太多请求“ 和 ”503 服务不可用“。如果客户调用太多次请求，服务可以使用429，并且可以童工更改其通话方式来解决这种情况。如果一般的负载或个别调用者无法控制的问题导致服务变慢，则服务应该以503响应。在所有情况下，服务还应该提供建议调用者等待多长时间才能再次尝试的信息。客户端应该尊重这些标头，并实施其他瞬态故障处理技术。但是，可能有一些客户端仅在故障时立即重试，从而可能增加服务的负载。为了解决这个问题，服务应该设计成使得返回429或者503尽可能方便，方式是输入特殊的快速路径代码，或者理想情况下，取决于提供此功能的通用前门或负载平衡器</p>
</blockquote>
<h3 id="重试机制和-RateLimit-头"><a href="#重试机制和-RateLimit-头" class="headerlink" title="重试机制和 RateLimit 头"></a>重试机制和 RateLimit 头</h3><blockquote>
<p>Retry-After标头是响应受到限制的客户端的标准方法，在限制和配额（但不是整个系统负载）的情况下，使用标头描述超出限制也很常见，但是可选的。但是，为此，Microsoft和整个行业中的服务使用各种不同的标头，我们建议使用三个标头来描述限制，限制之下的剩余调用数量以及限制将重重置的时间。但是，其他标头可能适用于特定类型的限制。在所有情况下，这些都必须记录在案</p>
</blockquote>
<h3 id="服务端指南"><a href="#服务端指南" class="headerlink" title="服务端指南"></a>服务端指南</h3><blockquote>
<p>服务应根据SLA或业务目标选择合适的时间窗口。对于”配额“，在“Retry-After”时间和时间窗口可能会很长（小时、天、周、甚至数月），服务使用429指示特定的调用者调用了太多次，使用503指示该服务正在减少负载，但这不是调用者的问题</p>
</blockquote>
<h4 id="响应性"><a href="#响应性" class="headerlink" title="响应性"></a>响应性</h4><blockquote>
<ol>
<li>服务在任何情况下都必须快速响应，即使在负载下也是如此</li>
<li>在第99个百分位中响应超过1秒的调用应使用长时间运行模式</li>
<li>在第99个百分位响应中时间超过0.5秒的呼叫应强烈考虑LRO模式</li>
<li>服务不应该引入阻塞调用者或不可采取行动的睡眠、暂停等</li>
</ol>
</blockquote>
<h4 id="速率配置和限额"><a href="#速率配置和限额" class="headerlink" title="速率配置和限额"></a>速率配置和限额</h4><blockquote>
<p>当客户端调用太多次时：</p>
<ol>
<li>服务必须返回429</li>
<li>服务必须返回描述细节的标准错误响应，以便程序员可以进行适当的修改</li>
<li>服务务必返回Retry-After标头，该标头指示客户端在重试之前应等待多长时间</li>
<li>服务可以返回RateLimit标头，该标头记录了已超过的限制和配额</li>
<li>服务可以返回RateLimit-Limit：运行客户端在一个时间窗口内进行调用次数</li>
<li>服务可以返回RateLimit-Remaining：时间窗口中剩余的调用次数</li>
<li>服务可以返回RateLimit-Reset：窗口重置的时间，以UTC纪元秒为单位</li>
<li>服务可以返回其他特定于服务的RateLimit标头，以获取更多详细信息或特定的限制或配额</li>
</ol>
</blockquote>
<h4 id="服务负载"><a href="#服务负载" class="headerlink" title="服务负载"></a>服务负载</h4><blockquote>
<p>当服务通常超负且负载减少时：</p>
<ol>
<li>服务必须返回503</li>
<li>服务务必返回描述细节的标准错误响应，以便程序员可以进行适当的更改</li>
<li>服务务必返回Retry-After标头，该标头指示客户端在重试之前应等待的时间</li>
<li>在503的情况下，服务不应返回RateLimit标头</li>
</ol>
</blockquote>
<h4 id="响应实例"><a href="#响应实例" class="headerlink" title="响应实例"></a>响应实例</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">429</span> Too Many Requests</span><br><span class="line"><span class="attribute">Content-Type</span>: application/json</span><br><span class="line"><span class="attribute">Retry-After</span>: 5</span><br><span class="line"><span class="attribute">RateLimit-Limit</span>: 1000</span><br><span class="line"><span class="attribute">RateLimit-Remaining</span>: 0</span><br><span class="line"><span class="attribute">RateLimit-Reset</span>: 1538152773</span><br><span class="line">&#123;</span><br><span class="line">  "error": &#123;</span><br><span class="line">    "code": "requestLimitExceeded",</span><br><span class="line">    "message": "The caller has made too many requests in the time period.",</span><br><span class="line">    "details": &#123;</span><br><span class="line">      "code": "RateLimit",</span><br><span class="line">       "limit": "1000",</span><br><span class="line">       "remaining": "0",</span><br><span class="line">       "reset": "1538152773",</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="调用者指南"><a href="#调用者指南" class="headerlink" title="调用者指南"></a>调用者指南</h3><blockquote>
<p>调用者包括API的所有用户：工具、门户网站、其他服务，不仅仅是指用户客户端</p>
<ol>
<li>在重试请求之前，调用者必须等待响应中指定的最短时间</li>
<li>调用者可以在收到带有Retry-After标头的响应后，假设该请求是可重试的，而无需对该请求进行任何更改</li>
<li>客户端应使用共享的SDK和常见的瞬态故障库来实现适当的行为</li>
</ol>
<p>详见：<a href="https://docs.microsoft.com/en-us/azure/architecture/best-practices/transient-faults" target="_blank" rel="noopener">https://docs.microsoft.com/en-us/azure/architecture/best-practices/transient-faults</a></p>
</blockquote>
<h3 id="处理忽略了重试机制的Header头的调用者"><a href="#处理忽略了重试机制的Header头的调用者" class="headerlink" title="处理忽略了重试机制的Header头的调用者"></a>处理忽略了重试机制的Header头的调用者</h3><blockquote>
<p>理想情况下，429和503的成本非常低，以致于即使立即重试的客户也可以得到处理。在这种情况下，服务团队应尽可能与客户端联系。如果是已知的合作伙伴，则应提交错误或事件，在极端情况下，可能有必要使用DOS样式保护，例如阻止调用者</p>
</blockquote>
<h2 id="通过webhooks推送通知"><a href="#通过webhooks推送通知" class="headerlink" title="通过webhooks推送通知"></a>通过webhooks推送通知</h2><h3 id="范围"><a href="#范围" class="headerlink" title="范围"></a>范围</h3><blockquote>
<p>服务可以通过webhooks实现推送通知。本节介绍以下关键方案：</p>
<blockquote>
<p>Push notification via HTTP Callbacks, often called Web Hooks, to publicly-addressable servers.</p>
</blockquote>
<p>选择该方法的原因是它简单性，广泛的适用性以及服务订户进入的门槛低。它旨在作为一组最低要求，并作为其他功能的起点。</p>
</blockquote>
<h3 id="原则-1"><a href="#原则-1" class="headerlink" title="原则"></a>原则</h3><blockquote>
<p>支持webhooks挂钩的服务的核心原则是：</p>
<ol>
<li>服务必须至少实现poke/pull模型。在poke/pull模型中，将通知发送给客户端，然后客户端发送请求以获取当前状态或自上次通知以来的更改记录。这种方法避免了消息排序，遗漏消息和变更集的复杂性。服务可以添加更多数据以提供丰富的通知</li>
<li>服务必须实现用于配置回调URL的质询/响应协议</li>
<li>服务应有一个建议的过期期限，并应根据情况灵活调整服务</li>
<li>服务应该允许正在发出成功通知的订阅永久存在，并且应该容忍合理的终端时间</li>
<li>Firehose订阅必须仅通过HTTPS交付。服务应该要求其他订阅类型为HTTPS。有关更多详细信息，请参见“安全性”部分</li>
</ol>
</blockquote>
<h3 id="订阅类型"><a href="#订阅类型" class="headerlink" title="订阅类型"></a>订阅类型</h3><blockquote>
<p>订阅有两种类型，服务可以实现，或者两者都不实现。支持订阅类型为：</p>
<ol>
<li>Firehose订阅 - 通常在应用程序注册门户中为订阅应该程序手动创建订阅。任何用户已同意接收应用程序的活动通知将发送到该单个订阅</li>
<li>每个资源的订阅-订阅应用程序使用代码在运行时以编程方式为某些特定于用户的实体创建订阅</li>
</ol>
<p>同时支持两种订阅类型的服务应为两种类型提供差异化的开发人员体验：</p>
<ol>
<li>Firehose - 服务必须不要开发人员创建代码，除非直接验证并响应通知。服务必须提供用户订阅管理的管理UI。服务不应假设最终用户知道订阅，而只能假设订阅应用程序的功能</li>
<li>用户 - 服务必须为开发人员提供一个API，以供开发人员创建和管理订阅（作为其应用程序的一部分）以及验证和响应通知。服务可能希望最终用户意识到订阅，并且必须允许最终用户撤销直接响应用户操作而创建的订阅</li>
</ol>
</blockquote>
<h3 id="调用顺序"><a href="#调用顺序" class="headerlink" title="调用顺序"></a>调用顺序</h3><blockquote>
<p>订阅firehose的调用顺序必须遵循下图，它显示了手动注册应用程序和订阅，然后显示了最终用户使用服务的API一直。在流程的这一部分，必须存储两件事：</p>
<ol>
<li>服务必须存储最终用户同意从该特定应用程序接收通知的行为（通常是后台使用OAUTH范围）</li>
<li>订阅应用程序必须存储最终用户的令牌，以便在收到更改通知后回调详细信息</li>
</ol>
<p>序列的最后一部分是通知流本身</p>
<p>非规范实施指南：服务中的资源发生更改，并且该服务需要运行以下逻辑：</p>
<ol>
<li>确定有权访问资源的用户组，从而可以期望应用程序代表他们接收有关资源的通知</li>
<li>查看其中哪些用户已同意接收通知以及来自哪些应用程序</li>
<li>查看哪些应用已注册firehose订阅</li>
<li>加入1、2、3以产生必须发送到应用程序的具体通知集</li>
</ol>
<p>应该注意的是，用户同意的行为和建立firehose订阅的行为可以以任何顺序到达，服务应发送通知，并以两种顺序处理设置</p>
</blockquote>
<p><img src="https://camo.githubusercontent.com/b2f75e771f13a40f441f4ab918f84259c03d8ede/68747470733a2f2f7777772e77656273657175656e63656469616772616d732e636f6d2f6367692d62696e2f63647261773f6c7a3d626d39305a534276646d56794945526c646d56736233426c63697767515856306232316864476c76626977675158427749464e6c636e5a6c636a6f67436941674943416751573441454155414a776b6762476c725a53424e62335a705a55316861325679414341475632467564484d6764473867615735305a5764795958526c494864706447676763484a70625746796553427a5a584a3261574e6c4144634752484a7663474a766541706c626d5167626d39305a516f416751774c5169425162334a3059577773494552434149454a42564a6c5a326c7a6448494167526b4852454967546d393061575a70597743424c41567a414345476458526f4143734655774267426a6f675647686c414630654149465f436b4e736157567564414174426d56755a4342316332567963796367596e4a7664334e6c6369427663694270626e4e30595778735a5751675958427743674342495177416769516741494641425143424953384167516f4749446f6754574675645746734149467a45516f4b4367434441676f384c53302d4149497143694136494578765a326c7549476c7564473841676a384a41494931454342565743414b41436f4b4c5434674b77434357424d364149514742553568625755675a58526a4c6743444651344147784a446232356d61584a74414945424345466a5932567a637942556232746c62676f4b41494d33457941745069417441494e6b4351426e426b6c454149454d43774342565155416851494d41495233436d4e7663476c6c63774172434143434948414168484d4d41494d4b44774344414267364948646c596d6876623273676367434365673441676e55534149565144546f41685859485a584941677767474149635442674245435656535443776755324e7663475541687a49475355514b54674347505177416868774e4941434442683441486845416778455062674342616777416778774e41494d61446941416778304d6257463549474e7663486b414c5245416856747141495a484230463164476876636d6c36414959374277434758516374506941724149457544564a6c6358566c63335167595143464f515a306279424551694277636d39305a574e305a5751676157356d62334941696951474367434442517374506941744149637443564a6c5a476c795a574e30414459484147774e494756755a4842766157353041496f57426d45414477317941485947414945514441434a564163415377746c5a41415948674349434167414d4163416341344168476f474145304641494564466d4a6859327367644738416846384e6158526f49474e765a47554167686f61615143426167634167546f484144304a4149492d42334d4150677341676c4548414573464149497a4467434258773041676e3847644739725a57357a414363534149305f42584a705a3268304947396d4149747044554e685932686c4948526f5958516764476870637942566332567949456c454948427962335a705a47566b41494e4e437743495a676f416767634a41494e3744334e776232357a4149305f427743454367597349484a6c5a6e4a6c63326773494746755a43424a524143424841634167514d5041495941445143424441634167555547596e6b416a466b4649456c454149516b47335231636d34416846344d4948527649474d416a523846414977526167434a5677314762473933414959714351434d61516741676d6f4b614746755a3255416a3359464149465842575268644745674c534230655842705932467349485a70595143514467567959574e306157356e414a41504267434a51517432615745416a6e7348436743504e676f67414968444541434b5a7730416b464d4641496b424477434444415541676b59574b77424e437743485741706a4149457942514348526730416857554859574e6f414951654441434566775668626d5167496e4e70626d4e6c49674346455159416b53514f414952334367434e66776341684851464149705145414342556773416846416341494938425746755a4342755a58634159525141684655544f6942566347526864475567633352686448554167536b47414946444251417845776f4b436726733d6d736367656e" alt="firehose1"></p>
<blockquote>
<p>对于每个用户的订阅，应用程序注册可以手动或自动进行。每个用户订阅的呼叫流程必须遵循下图。它显示了最终用户使用服务的API之一，并且同样，必须存储相同的两件事：</p>
<ol>
<li>服务必须存储最终用户同意从该特定应用程序接收通知的行为（通常是后台使用OAUTH范围）</li>
<li>订阅应用程序必须存储最终用户的令牌，以便在收到更改通知后回调详细信息</li>
</ol>
<p>在这种情况下，使用来自订阅应用程序的最终用户令牌以编程方式设置订阅。应用必须务必已注册订阅的ID与用户令牌一起存储。</p>
<p>非规范性实施指南：在序列的最后部分，当服务中的数据项发生更改并且服务需要运行以下逻辑时：</p>
<ol>
<li>查找通过资源与己更改数据相对应的订阅集</li>
<li>对于使用app+user令牌创建的订阅，请使用订阅创建者的订阅ID和用户ID向每个订阅的应用发送通知</li>
</ol>
<p>对于使用仅应用令牌创建的订阅，请检查已更改数据的所有者具有已更改数据可见性的任何用户均已同意向应用程序发送通知，如果是，则按每个用户ID向每个应用程序发送一组通知带有订阅ID的订阅</p>
</blockquote>
<p><img src="https://camo.githubusercontent.com/b9f6961da5bc139a7169515a83f56ab4a8f9ede5/68747470733a2f2f7777772e77656273657175656e63656469616772616d732e636f6d2f6367692d62696e2f63647261773f6c7a3d626d39305a534276646d56794945526c646d56736233426c63697767515856306232316864476c76626977675158427749464e6c636e5a6c636a6f67436941674943416751573441454155414a776b6762476c725a53424e62335a705a55316861325679414341475632467564484d6764473867615735305a5764795958526c494864706447676763484a70625746796553427a5a584a3261574e6c4144634752484a7663474a766541706c626d5167626d39305a516f416751774c5169425162334a3059577773494552434149454a42564a6c5a326c7a6448494167526b4852454967546d393061575a70597743424c41567a414345476458526f4143734655774267426a6f675647686c414630654149465f436b4e736157567564414174426d56755a4342316332567963796367596e4a7664334e6c6369427663694270626e4e30595778735a5751675958427743674342495177416769516741494641425143424953384167516f4749446f416757775243677068624851416779554941494548426942794142514d494341416778734c50433074506743445477733649454e76626d5a705a3356795a516f6749414344614173674c5434674b77434357424d4165675a4f5957316c49475630597934416841674641494d61445141664567426442584a744149515f4255466a5932567a637942556232746c41494554426743444f7849674c5434674c5143424667784263484167535551416848774959334a6c644143424778417450674346466773674f69424662574a6c5a41416b46475673633255675457467564574673414949454a41434562516b674f69424d6232647062694270626e527641495542435143424b52465657414347474155414c516f416768386d4149495a4b77434243416341676a6f4e41494973484143474c776b41676a38494149455344674345434159416831454c41496446436d4e7663476c6c63774175434756755a41434565476f4168575148515856306147397961586f4168563848414956364279302d494373416732414e556d56786457567a6443426841495256426e527649455243494842796233526c5933526c5a434270626d5a766367434a5151594b414951614379302d49433041686b6f4a556d566b61584a6c593351414e676341624130675a57356b63473970626e514169544d475951415044584941646759416752414d414968784277424c4332566b414267654149526a43414177423045416351785657416f415351674167527757596d466a617942306277434664417741696c77465932396b5a5143434752707041494670427743424f51634150516b41676a30486377412d437743435541634153775541676a494f414946654451434366675a306232746c626e4d414a7849416a467346636d6c6e61485167623259416977554e5132466a61475567644768686443423061476c7a4946567a5a5849675355516763484a76646d6c6b5a5751416730774c41495536427743434241774167336f5063334276626e4d416a4673484149514a42697767636d566d636d567a614377675957356b49456c454149456342774342417738416944454e4149454d4277434252515a696551434c645155675355514168434d62644856796267434558517767644738675977434d4f77554b4367434c4c326f416a58554d41497754447743504e516f74506973416a6877514f67434f5251646c6367434d56775941673359495a574a6f62323972494656535443776755324e76634755416b414547535551416a776f4f41493572445341416932554b41494e464251434c5977304148424541677a554f4f6942754149453244414267434143444342316f5a5143426151354a52414344597755416168494167684234526d78766477434a4d776b416a45304941495630436d6868626d646c414a4963425143455951566b595852684943306764486c7761574e6862434232615745416b6a5146636d466a64476c755a7743534e5159416a56384c646d6c68414a456842776f416b56774b4941434e666841416841734e414a4a35425143435751384168685946414956514669734154517341696d454b597743424d675541696b384e414968764232466a614143484b41774169416b465957356b49434a7a6157356a5a53494169427347414a4e4b4467434941516f4168423063414946534377434857687741676a77465957356b4947356c647742684641434858784d36494656775a4746305a53427a64474630645143424b51594167554d464144455443676f4b26733d6d736367656e" alt="subscription"></p>
<h3 id="验证订阅"><a href="#验证订阅" class="headerlink" title="验证订阅"></a>验证订阅</h3><blockquote>
<p>当订阅以编程方式更改或响应通过管理UI门户的更改时，需要保护订阅服务免受恶意或意外调用的干扰，因为这些服务可能会导致大量通知流量。</p>
<p>对于所有订阅，无论是firehose还是按用户，服务都必须在发送任何其他通知之前，通过门户网站UI或者API请求发送验证请求，作为创建或修改的一部分。</p>
<p>验证请求必须采用以下格式，作为对订阅的notification的HTTP/HTTPS post</p>
</blockquote>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">POST https://&#123;notificationUrl&#125;?validationToken=&#123;randomString&#125;</span><br><span class="line"><span class="attribute">ClientState</span>: clientOriginatedOpaqueToken (if provided by client on subscription-creation)</span><br><span class="line"><span class="attribute">Content-Length</span>: 0</span><br></pre></td></tr></table></figure>

<blockquote>
<p>对于要建立的订阅，应用程序必须对该请求作出200 OK的响应，并且validation Token值为唯一的实体主体。请注意，如果notificationUrl包含查询参数，则validationToken参数必须附加一个&amp;</p>
<p>如果任何质询请求在发送请求后的5秒内未收到规定的响应，则该服务服务返回错误，不得创建订阅，也不得将其他请求或通知发送到notificationUrl</p>
<p>服务可以对URL所有权执行其他验证。</p>
</blockquote>
<h3 id="接收通知"><a href="#接收通知" class="headerlink" title="接收通知"></a>接收通知</h3><blockquote>
<p>服务应该发送通知以通知服务数据更改，这些更改不包括更改本身的详细信息，但应包含足够的信息，供订阅应用程序适当地响应以下过程：</p>
<ol>
<li>应用程序必须标识正确的缓存OAuth令牌以用于回调应用程序可以查找任何先前的data令牌以获取相关的更改范围</li>
<li>应用程序必须确定要调用的URL，以对服务的新状态执行相关查询，该查询可以是增量查询</li>
</ol>
<p>提供通知的服务将被中继给最终用户，可以选择向通知包添加更多的细节，以减少其服务上的传入呼叫负载。子类服务必须明确，不能保证一定会发送通知，并且通知可能有损或乱序。</p>
<p>通知可以汇总并分批发送。应用程序必须准备好在单个推送通知中接收多个事件。</p>
<p>服务必须发送所有webhooks数据通知作为POST请求</p>
<p>服务必须允许30秒的通知超时时间。如果发生超时或应用程序以5xx响应进行响应，则服务应该使用指数退避重试通知，所有其他响应将被忽略。</p>
<p>该服务不得遵循301/302重定向请求。</p>
</blockquote>
<h4 id="通知有效负载"><a href="#通知有效负载" class="headerlink" title="通知有效负载"></a>通知有效负载</h4><blockquote>
<p>通知有效负载的基本格式是事件列表，每个事件包含订阅的ID（已更改），该订阅的参考资源已更改，更改的类型，应消耗的资源以标识更改的确切消息信息以及足够的标识信息以供查看嗲用该资源所需的 令牌。</p>
<p>对于firehose订阅，具体实例如下：</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "value": [</span><br><span class="line">    &#123;</span><br><span class="line">      "subscriptionId": "32b8cbd6174ab18b",</span><br><span class="line">      "resource": "https://api.contoso.com/v1.0/users/user@contoso.com/files?$delta",</span><br><span class="line">      "userId" : "&lt;User GUID&gt;",</span><br><span class="line">      "tenantId" : "&lt;Tenant Id&gt;"</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>对于per-user subscription，如下：</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "value": [</span><br><span class="line">    &#123;</span><br><span class="line">      "subscriptionId": "32b8cbd6174ab183",</span><br><span class="line">      "clientState": "clientOriginatedOpaqueToken",</span><br><span class="line">      "expirationDateTime": "2016-02-04T11:23Z",</span><br><span class="line">      "resource": "https://api.contoso.com/v1.0/users/user@contoso.com/files/$delta",</span><br><span class="line">      "userId" : "&lt;User GUID&gt;",</span><br><span class="line">      "tenantId" : "&lt;Tenant Id&gt;"</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      "subscriptionId": "97b391179fa22",</span><br><span class="line">      "clientState ": "clientOriginatedOpaqueToken",</span><br><span class="line">      "expirationDateTime": "2016-02-04T11:23Z",</span><br><span class="line">      "resource": "https://api.contoso.com/v1.0/users/user@contoso.com/files/$delta",</span><br><span class="line">      "userId" : "&lt;User GUID&gt;",</span><br><span class="line">      "tenantId" : "&lt;Tenant Id&gt;"</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>以下是JSON有效负载的详细说明。</p>
<p>通知项包含一个顶层对象，该对象包含一系列事件，每个事件都标识了遇有发送此通知而导致的订阅。</p>
</blockquote>
<table>
<thead>
<tr>
<th>Field</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>value</td>
<td>Array of events that have been raised within the subscription’s scope since the last notification.</td>
</tr>
</tbody></table>
<blockquote>
<p>事件数组的每一项都包含以下属性：</p>
</blockquote>
<table>
<thead>
<tr>
<th>Field</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>subscriptionId</td>
<td>The id of the subscription due to which this notification has been sent. Services MUST provide the <em>subscriptionId</em> field.</td>
</tr>
<tr>
<td>clientState</td>
<td>Services MUST provide the <em>clientState</em> field if it was provided at subscription creation time.</td>
</tr>
<tr>
<td>expirationDateTime</td>
<td>Services MUST provide the <em>expirationDateTime</em> field if the subscription has one.</td>
</tr>
<tr>
<td>resource</td>
<td>Services MUST provide the resource field. This URL MUST be considered opaque by the subscribing application. In the case of a richer notification it MAY be subsumed by message content that implicitly contains the resource URL to avoid duplication. If a service is providing this data as part of a more detailed data packet, then it need not be duplicated.</td>
</tr>
<tr>
<td>userId</td>
<td>Services MUST provide this field for user-scoped resources. In the case of user-scoped resources, the unique identifier for the user should be used. In the case of resources shared between a specific set of users, multiple notifications must be sent, passing the unique identifier of each user. For tenant-scoped resources, the user id of the subscription should be used.</td>
</tr>
<tr>
<td>tenantId</td>
<td>Services that wish to support cross-tenant requests SHOULD provide this field. Services that provide notifications on tenant-scoped data MUST send this field.</td>
</tr>
</tbody></table>
<h3 id="订阅管理"><a href="#订阅管理" class="headerlink" title="订阅管理"></a>订阅管理</h3><blockquote>
<p>对于每个用户的订阅，必须提供一个API以创建和管理订阅。API必须至少支持此处描述的操作。</p>
</blockquote>
<h4 id="创建订阅"><a href="#创建订阅" class="headerlink" title="创建订阅"></a>创建订阅</h4><blockquote>
<p>客户端通过对订阅资源的发出POST请求来创建订阅。订阅名称空间是通过POST操作由客户端定义的</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;api.contoso.com&#x2F;apiVersion&#x2F;$subscriptions</span><br></pre></td></tr></table></figure>

<blockquote>
<p>POST 请求包含一个要创建的订阅对象，对订阅对象具有以下属性：</p>
</blockquote>
<table>
<thead>
<tr>
<th align="left">Property Name</th>
<th align="left">Required</th>
<th align="left">Notes</th>
</tr>
</thead>
<tbody><tr>
<td align="left">resource</td>
<td align="left">Yes</td>
<td align="left">Resource path to watch.</td>
</tr>
<tr>
<td align="left">notificationUrl</td>
<td align="left">Yes</td>
<td align="left">The target web hook URL.</td>
</tr>
<tr>
<td align="left">clientState</td>
<td align="left">No</td>
<td align="left">Opaque string passed back to the client on all notifications. Callers may choose to use this to provide tagging mechanisms.</td>
</tr>
</tbody></table>
<blockquote>
<p>如果成功创建了订阅，则服务必须使用状态码201 CREATED包含至少以下属性的主体进行响应：</p>
</blockquote>
<table>
<thead>
<tr>
<th align="left">Property Name</th>
<th align="left">Required</th>
<th align="left">Notes</th>
</tr>
</thead>
<tbody><tr>
<td align="left">id</td>
<td align="left">Yes</td>
<td align="left">Unique ID of the new subscription that can be used later to update/delete the subscription.</td>
</tr>
<tr>
<td align="left">expirationDateTime</td>
<td align="left">No</td>
<td align="left">Uses existing Microsoft REST API Guidelines defined time formats.</td>
</tr>
</tbody></table>
<blockquote>
<p>订阅的创建应该是幂等的，范围限定于auth令牌的属性的组合提供了唯一性约束。</p>
<p>以下是使用用户+应用程序主体来订阅文件通知的实例请求：</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">POST https://api.contoso.com/files/v1.0/$subscriptions HTTP 1.1</span><br><span class="line"><span class="attribute">Authorization</span>: Bearer &#123;UserPrincipalBearerToken&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  "resource": "http://api.service.com/v1.0/files/file1.txt",</span><br><span class="line">  "notificationUrl": "https://contoso.com/myCallbacks",</span><br><span class="line">  "clientState": "clientOriginatedOpaqueToken"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>服务应该以最小的响应格式响应这样的消息：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;id&quot;: &quot;32b8cbd6174ab18b&quot;,</span><br><span class="line">  &quot;expirationDateTime&quot;: &quot;2016-02-04T11:23Z&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>以下是使用仅应用程序主体的实例，其中应用程序正在监视其授权的所有文件：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST https:&#x2F;&#x2F;api.contoso.com&#x2F;files&#x2F;v1.0&#x2F;$subscriptions HTTP 1.1</span><br><span class="line">Authorization: Bearer &#123;ApplicationPrincipalBearerToken&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;resource&quot;: &quot;All.Files&quot;,</span><br><span class="line">  &quot;notificationUrl&quot;: &quot;https:&#x2F;&#x2F;contoso.com&#x2F;myCallbacks&quot;,</span><br><span class="line">  &quot;clientState&quot;: &quot;clientOriginatedOpaqueToken&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>服务应该以最小的响应格式响应这样的消息：</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "id": "8cbd6174abb391179",</span><br><span class="line">  "expirationDateTime": "2016-02-04T11:23Z"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="更新订阅"><a href="#更新订阅" class="headerlink" title="更新订阅"></a>更新订阅</h4><blockquote>
<p>服务可以支持修改订阅。为了更新现有订阅的属性，客户端使用PATCH请求来提供ID和需要更改的属性。忽略的属性将保留其值。要删除属性，请为其分配JSON null值。</p>
<p>与创建一样，订阅是单独管理的。</p>
<p>以下请求更改现有订阅的通知URL：</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">PATCH https://api.contoso.com/files/v1.0/$subscriptions/&#123;id&#125; HTTP 1.1</span><br><span class="line"><span class="attribute">Authorization</span>: Bearer &#123;UserPrincipalBearerToken&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  "notificationUrl": "https://contoso.com/myNewCallback"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果PATCH请求包含一个新的notificationUrl，则服务器必须如上所述对其进行验证。如果新的URL验证失败，则该服务务必使PATCH请求失败，并使订阅保持其先前的状态。</p>
<p>服务必须返回一个空的主体和204 No Connect表示补丁成功。</p>
<p>如果补丁失败i，服务必须返回错误体和状态码。</p>
<p>该操作必须成功完成或失败。</p>
</blockquote>
<h4 id="删除订阅"><a href="#删除订阅" class="headerlink" title="删除订阅"></a>删除订阅</h4><blockquote>
<p>服务必须支持删除订阅，可以通过对订阅资源发出DELETE请求来删除现有订阅：</p>
</blockquote>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">DELETE https://api.contoso.com/files/v1.0/$subscriptions/&#123;id&#125; HTTP 1.1</span><br><span class="line"><span class="attribute">Authorization</span>: Bearer &#123;UserPrincipalBearerToken&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>与更新一样，服务必须返回204 No Connect才能成功删除，或者返回错误体和状态码以指示失败。</p>
</blockquote>
<h4 id="枚举订阅"><a href="#枚举订阅" class="headerlink" title="枚举订阅"></a>枚举订阅</h4><blockquote>
<p>为了获取活动订阅的列表，客户端使用用户+应用程序或仅应用程序承载令牌对订阅资源发出GET请求：</p>
</blockquote>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">GET https://api.contoso.com/files/v1.0/$subscriptions HTTP 1.1</span><br><span class="line"><span class="attribute">Authorization</span>: Bearer &#123;UserPrincipalBearerToken&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>服务必须使用用户+应用程序主体承载令牌返回以下格式：</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "value": [</span><br><span class="line">    &#123;</span><br><span class="line">      "id": "32b8cbd6174ab18b",</span><br><span class="line">      "resource": " http://api.contoso.com/v1.0/files/file1.txt",</span><br><span class="line">      "notificationUrl": "https://contoso.com/myCallbacks",</span><br><span class="line">      "clientState": "clientOriginatedOpaqueToken",</span><br><span class="line">      "expirationDateTime": "2016-02-04T11:23Z"</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>可以使用仅应用程序主体承载令牌返回的实例：</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "value": [</span><br><span class="line">    &#123;</span><br><span class="line">      "id": "6174ab18bfa22",</span><br><span class="line">      "resource": "All.Files ",</span><br><span class="line">      "notificationUrl": "https://contoso.com/myCallbacks",</span><br><span class="line">      "clientState": "clientOriginatedOpaqueToken",</span><br><span class="line">      "expirationDateTime": "2016-02-04T11:23Z"</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h3><blockquote>
<p>所有服务URL必须为HTTPS（也就是说，所有入站呼叫必须为HTTPS）。处理WebHooks的服务必须接收HTTPS。</p>
<p>我们建议允许客户端定义的Webhook回调URL的服务不应通过HTTP传输数据。这是因为信息可能会通过客户端、网络、服务器日志和其他机制无意间公开。</p>
<p>但是，在某些情况下，由于客户端端点或软件限制，无法遵循上述规则。因此，服务可以允许webhooks URL为HTTP。</p>
<p>此外，允许客户端定义的HTTP Web Hooks回调URL的服务应符合工程领导指定的隐私策略。这通常包括建议客户端选择SSL连接并遵守特殊的预防措施，以确保正确处理日志和其他服务数据收集。</p>
<p>例如，服务可能不希望要求开发人员生成证书，服务可能仅在测试账户上启用此功能。</p>
</blockquote>
<h2 id="不支持的请求"><a href="#不支持的请求" class="headerlink" title="不支持的请求"></a>不支持的请求</h2><blockquote>
<p>RESTful API 客户端可以请求当前不支持的功能。RESTful API必须响应与本节一致的有效但不受支持的请求</p>
</blockquote>
<h3 id="基本指南"><a href="#基本指南" class="headerlink" title="基本指南"></a>基本指南</h3><blockquote>
<p>RESTful API通常会选择限制客户端可以执行的功能。例如，审核系统允许创建记录，但不能修改和删除记录。同样，某些API会公开集合，但需要或以其他方式限制过滤和排序标准，或者可能不支持客户端驱动的分页。</p>
</blockquote>
<h3 id="功能允许列表"><a href="#功能允许列表" class="headerlink" title="功能允许列表"></a>功能允许列表</h3><blockquote>
<p>如果服务不支持一下任何API功能，则如果调用者请求该功能，则必须提供错误响应，功能包括：</p>
<ul>
<li>集合的关键地址，例如：<a href="https://api.contoso.com/v1.0/people/user1@contoso.com" target="_blank" rel="noopener">https://api.contoso.com/v1.0/people/user1@contoso.com</a></li>
<li>按属性值过滤集合，例如：<a href="https://api.contoso.com/v1.0/people?$filter=name" target="_blank" rel="noopener">https://api.contoso.com/v1.0/people?$filter=name</a> eq ‘david’</li>
<li>按范围过滤集合，例如：<a href="http://api.contoso.com/v1.0/people?$filter=hireDate" target="_blank" rel="noopener">http://api.contoso.com/v1.0/people?$filter=hireDate</a> ge 2014-01-01 and hireDate le 2014-12-31</li>
<li>通过$top和$skip进行客户端驱动的分页，例如：<a href="https://api.contoso.com/v1.0/people?$orderBy=name" target="_blank" rel="noopener">https://api.contoso.com/v1.0/people?$orderBy=name</a> desc</li>
<li>提供$delta令牌，例如：<a href="https://api.contoso.com/v1.0/people?$delta" target="_blank" rel="noopener">https://api.contoso.com/v1.0/people?$delta</a></li>
</ul>
</blockquote>
<h4 id="错误返回值"><a href="#错误返回值" class="headerlink" title="错误返回值"></a>错误返回值</h4><blockquote>
<p>如果呼叫者请求在功能运行列表中找到不支持的功能，则服务必须提供错误响应。错误响应必须是4xx系列的HTTP状态码，表示无法满足该请求。除非更具体的错误状态适合给定的请求，否则服务应返回”400 Bad Request”和符合Microsoft REST API指南中提供的错误响应只能的错误有效负载。服务应该在响应消息中包含足够的详细信息，以供开发人员确定不支持请求的哪一部分。</p>
</blockquote>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">https://api.contoso.com/v1.0/people?$orderBy=name</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Accept</span>: application/json</span><br></pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">400</span> Bad Request</span><br><span class="line"><span class="attribute">Content-Type</span>: application/json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  "error": &#123;</span><br><span class="line">    "code": "ErrorUnsupportedOrderBy",</span><br><span class="line">    "message": "Ordering by name is not supported."</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="命名指南"><a href="#命名指南" class="headerlink" title="命名指南"></a>命名指南</h2><h3 id="途径"><a href="#途径" class="headerlink" title="途径"></a>途径</h3><blockquote>
<p>命名策略应有助于开发人员发现功能，而不必参考文档。使用通用模式和标准约定可以极大地帮助开发人员正确猜测通用属性名称和含义。服务应该使用冗长的命名模式，并且不应该使用除首字母缩略词外的缩写，首字母缩略词是由API表示的域（例如URL）中的主要表达方式。</p>
</blockquote>
<h3 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h3><blockquote>
<ul>
<li>首字母缩写应该遵循大小写约定，就好像它们是常规单词一样（例如URL）。</li>
<li>所有标识符，包括名称空间、entityType、entitySets、属性、操作、函数和枚举值，均应使用lowerCamelCase</li>
<li>HTTP标头是例外，应该使用大写连字符术语的标准HTTP约定</li>
</ul>
</blockquote>
<h3 id="需避免的命名"><a href="#需避免的命名" class="headerlink" title="需避免的命名"></a>需避免的命名</h3><blockquote>
<p>某些名称在API域中是如此超载，以致于它们失去所有含义或与使用REST API（如OAUTH）时无法避免的域中的其他常见用法冲突。服务不应该使用一下名称：</p>
<ul>
<li>Context</li>
<li>Scope</li>
<li>Resource</li>
</ul>
</blockquote>
<h3 id="规范的复合词"><a href="#规范的复合词" class="headerlink" title="规范的复合词"></a>规范的复合词</h3><blockquote>
<ul>
<li>服务应该避免使用诸如“a”，”the”，”of”之类的术语，除非需要传达含义。<ul>
<li>例如，不应该使用诸如aUser、theAccount、countOfBooks之类的名称，而应首选user、account、bookCount</li>
</ul>
</li>
<li>如果不这样做，服务应该在属性名称中添加类型，这回导致数据表示方式的歧义，或者导致服务不使用通用属性名称</li>
<li>将类型添加到属性名称时，服务务必在末尾添加类型，例如：createdDateTime</li>
</ul>
</blockquote>
<h3 id="标识属性"><a href="#标识属性" class="headerlink" title="标识属性"></a>标识属性</h3><blockquote>
<ul>
<li>服务必须使用字符串类型作为身份属性</li>
<li>对于OData属性，该服务务必使用OData @id属性来表示资源的规范标识符</li>
<li>服务可以使用简单的“id”属性来表示资源的本地或遗留主键值。</li>
<li>服务应该使用后缀为“id”的关系名称来表示另一个资源的外键，例如：subscriptionId<ul>
<li>这个属性的内容应该是被引用资源的规范ID</li>
</ul>
</li>
</ul>
</blockquote>
<h4 id="日期和时间属性"><a href="#日期和时间属性" class="headerlink" title="日期和时间属性"></a>日期和时间属性</h4><blockquote>
<ul>
<li>对于同时需要日期和时间的属性，服务必须使用后缀“DateTime”</li>
<li>对于仅需要日期信息而不指定时间的属性，服务必须使用后缀“Date”，例如birthDate</li>
<li>对于仅需要时间信息但未指定日期的属性，服务必须使用后缀“Time”，例如appointmentStartTime</li>
</ul>
</blockquote>
<h4 id="名称属性"><a href="#名称属性" class="headerlink" title="名称属性"></a>名称属性</h4><blockquote>
<ul>
<li>对于通常显示给用户的资源的整体名称，服务必须使用属性名称“displayName”</li>
<li>服务可以使用其他常见的命名属性，例如：givenName,surname,signInName</li>
</ul>
</blockquote>
<h4 id="集合和计数"><a href="#集合和计数" class="headerlink" title="集合和计数"></a>集合和计数</h4><blockquote>
<ul>
<li>服务必须使用正确的英文将集合命名为复数名词或者复数名词短语</li>
<li>对于可能带有复数形式但不常见的口头名词，服务可以使用简化的英语<ul>
<li>例如，可以使用used代替schemata</li>
</ul>
</li>
<li>服务必须使用后缀为”Count“的名词或名词短语来命名资源计数</li>
</ul>
</blockquote>
<h4 id="通用属性命名"><a href="#通用属性命名" class="headerlink" title="通用属性命名"></a>通用属性命名</h4><blockquote>
<p>如果服务具有属性，其数据与下面的名称匹配，则服务必须使用此表中的名称。随着服务添加将更常用的术语，该表将增长。添加此类术语的服务所有者应该在本文档中提出其他建议</p>
</blockquote>
<table>
<thead>
<tr>
<th>通用属性名</th>
</tr>
</thead>
<tbody><tr>
<td>attendees</td>
</tr>
<tr>
<td>body</td>
</tr>
<tr>
<td>createdDateTime</td>
</tr>
<tr>
<td>childCount</td>
</tr>
<tr>
<td>children</td>
</tr>
<tr>
<td>contentUrl</td>
</tr>
<tr>
<td>country</td>
</tr>
<tr>
<td>createdBy</td>
</tr>
<tr>
<td>displayName</td>
</tr>
<tr>
<td>errorUrl</td>
</tr>
<tr>
<td>eTag</td>
</tr>
<tr>
<td>event</td>
</tr>
<tr>
<td>expirationDateTime</td>
</tr>
<tr>
<td>givenName</td>
</tr>
<tr>
<td>jobTitle</td>
</tr>
<tr>
<td>kind</td>
</tr>
<tr>
<td>id</td>
</tr>
<tr>
<td>lastModifiedDateTime</td>
</tr>
<tr>
<td>location</td>
</tr>
<tr>
<td>memberOf</td>
</tr>
<tr>
<td>message</td>
</tr>
<tr>
<td>name</td>
</tr>
<tr>
<td>owner</td>
</tr>
<tr>
<td>people</td>
</tr>
<tr>
<td>person</td>
</tr>
<tr>
<td>postalCode</td>
</tr>
<tr>
<td>photo</td>
</tr>
<tr>
<td>preferredLanguage</td>
</tr>
<tr>
<td>properties</td>
</tr>
<tr>
<td>signInName</td>
</tr>
<tr>
<td>surname</td>
</tr>
<tr>
<td>tags</td>
</tr>
<tr>
<td>userPrincipalName</td>
</tr>
<tr>
<td>webUrl</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>架构</category>
      </categories>
      <tags>
        <tag>rest api</tag>
      </tags>
  </entry>
  <entry>
    <title>List集合</title>
    <url>/2020/08/17/List%E9%9B%86%E5%90%88/</url>
    <content><![CDATA[<h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1597164674/List_t99r85.png" alt="list"></p>
<h2 id="List家族支柱"><a href="#List家族支柱" class="headerlink" title="List家族支柱"></a>List家族支柱</h2><blockquote>
<p>List家族有三大支柱：Iterable 、 AbstractCollection 、 AbstractList</p>
</blockquote>
<blockquote>
<p>这三大支柱的继承实现关系分别是：</p>
<ul>
<li><strong>Collection接口 继承 Iterable接口</strong></li>
<li><strong>AbstractCollection抽象类 实现 Collection接口</strong></li>
<li><strong>AbstractList抽象类 继承 AbstractCollection抽象类</strong></li>
<li><strong>AbstractList抽象类 衍生万物。。。</strong></li>
</ul>
</blockquote>
<h3 id="Iterable"><a href="#Iterable" class="headerlink" title="Iterable"></a>Iterable</h3><blockquote>
<p>实现 Iterable接口 可以让一个对象具有「for-each loop」的属性。</p>
</blockquote>
<blockquote>
<p>该接口是在JDK1.5被创造出来的。该接口指定了三条规范：</p>
<ul>
<li><code>Iterator&lt;T&gt; iterator()</code> 返回一个T类型元素的迭代器</li>
<li><code>void forEach()</code> 对迭代器中的每个元素执行特定处理，直到处理完所有元素或抛出异常</li>
<li><code>Spliterator&lt;T&gt; spliterator</code> 返回一个并行遍历元素的迭代器</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">forEach</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> T&gt; action)</span> </span>&#123;</span><br><span class="line">    Objects.requireNonNull(action);</span><br><span class="line">    <span class="keyword">for</span> (T t : <span class="keyword">this</span>) &#123;</span><br><span class="line">        action.accept(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">default</span> Spliterator&lt;T&gt; <span class="title">spliterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Spliterators.spliteratorUnknownSize(iterator(), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>forEach() 和 spliterator() 是在JDK1.8中引入的，他们两个都是default修饰符修饰的，支持lambda表达式</p>
</blockquote>
<h3 id="AbstractCollection"><a href="#AbstractCollection" class="headerlink" title="AbstractCollection"></a>AbstractCollection</h3><p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1597682764/AbstractCollection_kcs4i3.png" alt="AbstractCollection"></p>
<blockquote>
<p>该抽象类提供了Collection接口的基本实现，以尽量减少实现Collection接口所需的工作量。</p>
<p>如果要实现一个不可修改的集合，程序员只需扩展这个抽象类，并且实现该抽象类的iterator()方法和size()方法。</p>
<p>如果要实现一个可修改的集合，程序要必须另外覆盖这个抽象类的add()方法，并且iterator()方法返回的迭代器必须另外实现remove()方法</p>
</blockquote>
<h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The maximum size of array to allocate.</span></span><br><span class="line"><span class="comment"> * Some VMs reserve some header words in an array.</span></span><br><span class="line"><span class="comment"> * Attempts to allocate larger arrays may result in</span></span><br><span class="line"><span class="comment"> * OutOfMemoryError: Requested array size exceeds VM limit</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_ARRAY_SIZE = Integer.MAX_VALUE - <span class="number">8</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>定义可分配给数组的最大长度，在toArray的动态增加数组长度时用到</p>
</blockquote>
<h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><h5 id="抽象方法"><a href="#抽象方法" class="headerlink" title="抽象方法"></a>抽象方法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这两个方法是需要继承该类的类实现，在该类中，很多方法中都调用了这两个方法</p>
</blockquote>
<h5 id="破坏性方法"><a href="#破坏性方法" class="headerlink" title="破坏性方法"></a>破坏性方法</h5><blockquote>
<p>在该类中，add()方法是作为「具有破坏性」的方法出现的，如果继承该类的子类不覆盖此方法，则子类也是个不可修改的集合，如果想让子类集合可修改，则必须重写add()方法</p>
</blockquote>
<blockquote>
<p>如果要实现一个不可修改的集合，则add()方法不需要覆盖</p>
</blockquote>
<h5 id="依赖抽象方法的方法"><a href="#依赖抽象方法的方法" class="headerlink" title="依赖抽象方法的方法"></a>依赖抽象方法的方法</h5><blockquote>
<p>AbstractCollection类中的其他方法，具体实现或者依赖iterator()、或者依赖size()、或者依赖add()，如contains()和addAll()</p>
</blockquote>
<blockquote>
<p>在AbstractCollection类中，有一批抽象方法（或需要自己重写的方法）：</p>
<ul>
<li><code>abstract Iterator&lt;E&gt; iterator();</code></li>
<li><code>abstract int size();</code></li>
<li><code>boolean add(E e)；</code></li>
</ul>
<p>这些方法需要在子类中具体实现，而在本类的其他方法的实现中，大量调用了这三个方法。</p>
</blockquote>
<blockquote>
<p><strong>个人认为，这才是面向接口编程的精髓：接口制定了一系列规范，并利用这些规范实现了一系列所有子类通用的方法</strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> size() == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>isEmpty()方法通过size()==0的方式判断集合是否为空，具体子类集合的长度size()按各自集合的有不同的计算方法，但不管具体的size()怎么实现，size()==0成立则该集合一定为空</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    Iterator&lt;E&gt; it = iterator();</span><br><span class="line">    <span class="keyword">if</span> (o==<span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext())</span><br><span class="line">            <span class="keyword">if</span> (it.next()==<span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext())</span><br><span class="line">            <span class="keyword">if</span> (o.equals(it.next()))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果该集合包含指定元素，则返回true</p>
</blockquote>
<blockquote>
<p>该元素首先通过调用在子类中实现的iterator()方法，返回一个子类集合的迭代器，然后通过迭代器挨个遍历元素，检查该集合中是否包含指定元素</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object[] toArray() &#123;</span><br><span class="line">    <span class="comment">// Estimate size of array; be prepared to see more or fewer elements</span></span><br><span class="line">    Object[] r = <span class="keyword">new</span> Object[size()];</span><br><span class="line">    Iterator&lt;E&gt; it = iterator();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; r.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (! it.hasNext()) <span class="comment">// fewer elements than expected</span></span><br><span class="line">            <span class="keyword">return</span> Arrays.copyOf(r, i);</span><br><span class="line">        r[i] = it.next();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> it.hasNext() ? finishToArray(r, it) : r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>该方法返回一个包含该集合所有元素的Object类型的数组。</p>
</blockquote>
<blockquote>
<p>toArray()方法先通过子类中具体实现的size()方法，创建一个和该集合元素数量一样大的Object数组，再返回该元素的迭代器。</p>
<p>通过迭代器，挨个将集合中的元素放入数组中。当集合中元素遍历完后，通过Arrays类的<code>Arrays.copyOf(r, i)</code>方法，将该Object数组复制到一个新数组并返回新数组的引用。（此处为什么要调用<code>Arrays.copyOf()</code>重新复制新数组呢？因为如果在遍历过程中集合元素减少了，则数组容量就会变大，而<code>Arrays.copyOf()</code>复制新数组时会保证数组容量不会有多余的）</p>
<p>但是，如果当在遍历元素的时候，集合长度增加了，也就是在执行过<code>Object[] r = new Object[size()];</code>这个后，执行<code>r[i] = it.next();</code>的时候，集合增加了，则Object数组不能完全放入集合元素了，则需要调用<code>finishToArray(r, it)</code>做数组的动态扩容。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> &lt;T&gt; T[] finishToArray(T[] r, Iterator&lt;?&gt; it) &#123;</span><br><span class="line">    <span class="keyword">int</span> i = r.length;</span><br><span class="line">    <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">        <span class="keyword">int</span> cap = r.length;</span><br><span class="line">        <span class="keyword">if</span> (i == cap) &#123;</span><br><span class="line">            <span class="keyword">int</span> newCap = cap + (cap &gt;&gt; <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// overflow-conscious code</span></span><br><span class="line">            <span class="keyword">if</span> (newCap - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">                newCap = hugeCapacity(cap + <span class="number">1</span>);</span><br><span class="line">            r = Arrays.copyOf(r, newCap);</span><br><span class="line">        &#125;</span><br><span class="line">        r[i++] = (T)it.next();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// trim if overallocated</span></span><br><span class="line">    <span class="keyword">return</span> (i == r.length) ? r : Arrays.copyOf(r, i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_ARRAY_SIZE = Integer.MAX_VALUE - <span class="number">8</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hugeCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError</span><br><span class="line">            (<span class="string">"Required array size too large"</span>);</span><br><span class="line">    <span class="keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</span><br><span class="line">        Integer.MAX_VALUE :</span><br><span class="line">        MAX_ARRAY_SIZE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在finishToArray()方法中，通过<code>int newCap = cap + (cap &gt;&gt; 1) + 1;</code>给数组扩容，这里的<code>&gt;&gt;1</code>右移一位表示除以2，最后的长度是 <code>newCap = cap + cap/2 +1;</code> 如果newCap超过最大长度，则赋值为最大长度，然后再次通过<code>Arrays.copyOf(r, newCap);</code>复制得到新数组，这样保证了新数组不会有空余的空间。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; T[] toArray(T[] a) &#123;</span><br><span class="line">    <span class="comment">// Estimate size of array; be prepared to see more or fewer elements</span></span><br><span class="line">    <span class="keyword">int</span> size = size();</span><br><span class="line">    T[] r = a.length &gt;= size ? a :</span><br><span class="line">              (T[])java.lang.reflect.Array</span><br><span class="line">              .newInstance(a.getClass().getComponentType(), size);</span><br><span class="line">    Iterator&lt;E&gt; it = iterator();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; r.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (! it.hasNext()) &#123; <span class="comment">// fewer elements than expected</span></span><br><span class="line">            <span class="keyword">if</span> (a == r) &#123;</span><br><span class="line">                r[i] = <span class="keyword">null</span>; <span class="comment">// null-terminate</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a.length &lt; i) &#123;</span><br><span class="line">                <span class="keyword">return</span> Arrays.copyOf(r, i);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.arraycopy(r, <span class="number">0</span>, a, <span class="number">0</span>, i);</span><br><span class="line">                <span class="keyword">if</span> (a.length &gt; i) &#123;</span><br><span class="line">                    a[i] = <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> a;</span><br><span class="line">        &#125;</span><br><span class="line">        r[i] = (T)it.next();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// more elements than expected</span></span><br><span class="line">    <span class="keyword">return</span> it.hasNext() ? finishToArray(r, it) : r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>该方法返回一个指定类型的数组。如果指定类型的数组合适，则返回该指定类型的数组，如果不适合则返回一个新数组</p>
</blockquote>
<blockquote>
<p>先判断是定类型的数组长度和集合长度的大小，若指定数组长度大，则使用指定数组，否则通过Arrays的反射新实例化一个和集合长度相等的新数组。</p>
<p>在for循环中，用<code>==</code>判断两个数组的引用是否相等，也即<code>a</code>和<code>r</code>是否是同一个数组对象，如果是直接将传过来的<code>a</code>返回回去；如果新数组和参数传递过来的<code>a</code>不是同一个对象，则通过<code>Arrays.copyOf(r, i)</code>返回新数组；或者在多线程或某种情况下，集合元素变少了，通过<code>System.arraycopy(r, 0, a, 0, i);</code>拷贝返回新数组。 </p>
<p>这个地方<code>System.arraycopy(r, 0, a, 0, i);</code>和<code>Arrays.copyOf(r, i);</code>又有什么区别呢？</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T[] copyOf(T[] original, <span class="keyword">int</span> newLength) &#123;</span><br><span class="line">    <span class="keyword">return</span> (T[]) copyOf(original, newLength, original.getClass());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T,U&gt; T[] copyOf(U[] original, <span class="keyword">int</span> newLength, Class&lt;? extends T[]&gt; newType) &#123;</span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    T[] copy = ((Object)newType == (Object)Object[]<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">        ? (T[]) new Object[newLength]</span><br><span class="line">        : (T[]) Array.newInstance(newType.getComponentType(), newLength);</span><br><span class="line">    System.arraycopy(original, <span class="number">0</span>, copy, <span class="number">0</span>,</span><br><span class="line">                     Math.min(original.length, newLength));</span><br><span class="line">    <span class="keyword">return</span> copy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>可以看到，<code>Arrays.copyOf(r, i);</code>的底层其实也是调用了<code>System.arraycopy(r, 0, a, 0, i);</code>的，前者相当于后者的阉割版，更适合于数组的扩容。</p>
</blockquote>
<h3 id="AbstractList"><a href="#AbstractList" class="headerlink" title="AbstractList"></a>AbstractList</h3><p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1598437808/AbstractList_j5xkkw.png" alt="AbstractList"></p>
<blockquote>
<p>AbstractList类提供了List接口的骨干实现，以最大限度地减少实现「随机访问」数据存储（如数组）支持的该接口所需的工作。对于连续的访问数据（如链表），应优先使用 <strong>AbstractSequentialList</strong> 类</p>
</blockquote>
<blockquote>
<p>要实现一个不可修改的List，编程人员只需扩展此类，并提供get()方法和size()方法的实现</p>
</blockquote>
<blockquote>
<p>要实现一个可修改的List，编程人员只需另外重写set()方法，如果List可变大小，则需要另外重写add()方法和rmove()方法</p>
</blockquote>
<h4 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h4><blockquote>
<p>Itr 和 ListItr 是 AbstractList 的内部类，以以下方式定义在AbstractList的内部。这两个类实现了额外的列表迭代器</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractCollection</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ListItr</span> <span class="keyword">extends</span> <span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">ListIterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>那为什么Itr和ListItr要声明成内部类呢？</p>
<ul>
<li>对外部隐藏这两个类，且外部类也不需要用到这两个类</li>
<li>方便这两个类访问外部类(即AbstractList)的私有方法和私有属性</li>
</ul>
</blockquote>
<h5 id="Itr"><a href="#Itr" class="headerlink" title="Itr"></a>Itr</h5><h6 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> cursor = <span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>调用next()方法时返回的元素索引值</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> lastRet = -<span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>最近一次调用next()方法或previous()方法时返回的元素索引。如果调用remove()方法删除元素，则该值会重置为-1</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> expectedModCount = modCount;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>modCount 是迭代器认为的该List集合应该支持的值，如果该值和迭代器期望的不一致，则表示迭代器已经检测到并发程序修改了该集合的值</p>
</blockquote>
<h6 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> cursor != size();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  checkForComodification();</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">int</span> i = cursor;</span><br><span class="line">    E next = get(i);</span><br><span class="line">    lastRet = i;</span><br><span class="line">    cursor = i + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> next;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException e) &#123;</span><br><span class="line">    checkForComodification();</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">checkForComodification</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">transient</span> <span class="keyword">int</span> modCount = <span class="number">0</span>; <span class="comment">// 在AbstractList中定义，表示该List集合被修改的次数，该值是在SubList中被修改的</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>checkForComodification()方法用来检测并发程序是否修改该集合，其中<code>modCount</code>是<code>AbstractList</code>类的属性</p>
</blockquote>
<blockquote>
<p>get()方法和size()方法都是抽象方法，需要在子类中具体实现！</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (lastRet &lt; <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">  checkForComodification();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    AbstractList.<span class="keyword">this</span>.remove(lastRet);</span><br><span class="line">    <span class="keyword">if</span> (lastRet &lt; cursor)</span><br><span class="line">      cursor--;</span><br><span class="line">    lastRet = -<span class="number">1</span>;</span><br><span class="line">    expectedModCount = modCount;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>按照此处<code>lastRet &lt; 0</code>的判断，难道不能连续执行两次remove()方法？</p>
</blockquote>
<h5 id="ListItr"><a href="#ListItr" class="headerlink" title="ListItr"></a>ListItr</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ListItr</span> <span class="keyword">extends</span> <span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">ListIterator</span>&lt;<span class="title">E</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>该类继承了上面说的<code>Itr</code>类，实现了<code>ListIterator</code>接口，而<code>ListIterator</code>接口完全是一个规范了操作List的一系列add()、set()、next()、hasNext()、previous()方法，没有任何的方法实现。ListItr类实现了接口ListIterator中的所有方法。当然，像remove()、next()、hasNext()这些方法，用的是继承自Itr类的</p>
</blockquote>
<h6 id="属性-2"><a href="#属性-2" class="headerlink" title="属性"></a>属性</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">transient</span> <span class="keyword">int</span> modCount = <span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>该变量是用来保存 <strong>集合结构被修改次数</strong> 的字段</p>
</blockquote>
<h4 id="AbstractList方法"><a href="#AbstractList方法" class="headerlink" title="AbstractList方法"></a>AbstractList方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="title">AbstractList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>AbstractList唯一的构造方法，由子类的构造方法调用</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">  ListIterator&lt;E&gt; it = listIterator();</span><br><span class="line">  <span class="keyword">if</span> (o==<span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">while</span> (it.hasNext())</span><br><span class="line">      <span class="keyword">if</span> (it.next()==<span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> it.previousIndex();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (it.hasNext())</span><br><span class="line">      <span class="keyword">if</span> (o.equals(it.next()))</span><br><span class="line">        <span class="keyword">return</span> it.previousIndex();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> ListIterator&lt;E&gt; <span class="title">listIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> listIterator(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> ListIterator&lt;E&gt; <span class="title">listIterator</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">  rangeCheckForAdd(index);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> ListItr(index);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>indexOf()方法返回该集合第一次出现的指定元素的索引，如果此集合不包含该元素，则返回-1</p>
<p>该方法先实例化一个子类是ListItr的List迭代器，然后通过这个迭代器挨个遍历该集合</p>
</blockquote>
<h3 id="SubList"><a href="#SubList" class="headerlink" title="SubList"></a>SubList</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt; </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>SubList</code>和<code>RandomAccessSubList</code>类虽然在AbstractList.java文件中，但这两个类是继承了AbstractList的子类，在该子类中，具体实现了AbstractList类中的抽象方法</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">  rangeCheck(index);</span><br><span class="line">  checkForComodification();</span><br><span class="line">  <span class="keyword">return</span> l.set(index+offset, element);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">  rangeCheck(index);</span><br><span class="line">  checkForComodification();</span><br><span class="line">  <span class="keyword">return</span> l.get(index+offset);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  checkForComodification();</span><br><span class="line">  <span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">  rangeCheckForAdd(index);</span><br><span class="line">  checkForComodification();</span><br><span class="line">  l.add(index+offset, element);</span><br><span class="line">  <span class="keyword">this</span>.modCount = l.modCount;</span><br><span class="line">  size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="RandomAccessSubList"><a href="#RandomAccessSubList" class="headerlink" title="RandomAccessSubList"></a>RandomAccessSubList</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomAccessSubList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">SubList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">RandomAccess</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>该类继承了<code>SubList</code>类，实现了<code>RandomAccess</code>接口。该类只提供了一个构造方法和返回List集合的方法。</p>
</blockquote>
<blockquote>
<p><code>RandomAccess</code>是个标记接口，表名实现了该接口的子类支持快速随机访问</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomAccessSubList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">SubList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">RandomAccess</span> </span>&#123;</span><br><span class="line">    RandomAccessSubList(AbstractList&lt;E&gt; list, <span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex) &#123;</span><br><span class="line">        <span class="keyword">super</span>(list, fromIndex, toIndex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;E&gt; <span class="title">subList</span><span class="params">(<span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RandomAccessSubList&lt;&gt;(<span class="keyword">this</span>, fromIndex, toIndex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="AbstractSequentialList"><a href="#AbstractSequentialList" class="headerlink" title="AbstractSequentialList"></a>AbstractSequentialList</h3><p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1598799332/AbstractSequentialList_vx7jby.png" alt="AbstractSequentialList"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractSequentialList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt; </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>该类继承了AbstractList类，提供了List接口的骨干实现，以最大限度的减少实现「顺序访问」（如链表）数据存储支持的该接口所需的工作。</p>
</blockquote>
<blockquote>
<p>要实现一个列表，程序员只需扩展此类，并提供listIterator和size方法的实现即可</p>
</blockquote>
<blockquote>
<p>要实现一个不可修改的列表，程序员只需实现列表迭代器的hasNext、next、hasPrevious、previous、index方法即可</p>
</blockquote>
<h2 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h2><blockquote>
<p>ArrayList是list接口的大小可变数组的实现，类继承关系如下：</p>
</blockquote>
<p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1597248203/ArrayList_pnuojs.png" alt="ArrayList"></p>
<blockquote>
<p>如上，ArrayList实现的接口有：</p>
<ul>
<li>Cloneable：它实现了Cloneable且实现了Object的clone方法，所以可是实现克隆（标记接口）</li>
<li>Serializable：所以它可以序列化（标记接口）</li>
<li>List：所以list定义的所有方法都适用于它</li>
<li>RandomAccess：表明它可以快速随机访问（标记接口）</li>
</ul>
<p>继承了以下类：</p>
<ul>
<li>AbstractList：这个类提供了一个最简单的实现list接口的框架，这个框架支持随机访问数据。所以ArrayList继承这个类的话，也大大简便了对随机访问数据的操作</li>
</ul>
</blockquote>
<h3 id="属性-3"><a href="#属性-3" class="headerlink" title="属性"></a>属性</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>默认初始化容器的容量</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>对于空ArrayList实例共享的空数组实例</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>默认大小的空ArrayList实例 用到的 共享空数组实例。</p>
</blockquote>
<blockquote>
<p>与<code>EMPTY_ELEMENTDATA</code>变量不同的是，该变量是用来在向ArrayList容器中添加元素时，标识添充多少容量的</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">transient</span> Object[] elementData;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>ArrayList元素存储到数组缓冲区中，ArrayList的容量是此数组缓冲区的长度。</p>
</blockquote>
<blockquote>
<p>当一个空的ArrayList添加第一个元素时，它的容量就会自动被填充成<code>DEFAULT_CAPACITY</code>的大小</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> size;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>容器中元素的数量</p>
</blockquote>
<h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><blockquote>
<p>ArrayList提供了三个构造方法：空参数构造方法、指定容量构造方法、指定集合构造方法</p>
</blockquote>
<h4 id="空参数构造方法"><a href="#空参数构造方法" class="headerlink" title="空参数构造方法"></a>空参数构造方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>该构造方法构造了一个容量为10的空列表。</p>
<p>初始化时容量为空，当添加第一个元素时，会将容量设置为10</p>
</blockquote>
<h4 id="指定容量的构造方法"><a href="#指定容量的构造方法" class="headerlink" title="指定容量的构造方法"></a>指定容量的构造方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (initialCapacity &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.elementData = <span class="keyword">new</span> Object[initialCapacity];</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (initialCapacity == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Capacity: "</span>+</span><br><span class="line">                                       initialCapacity);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>构造一个指定容量的空列表，如果指定容量为0，则默认初始化为10</p>
</blockquote>
<h4 id="指定集合的构造方法"><a href="#指定集合的构造方法" class="headerlink" title="指定集合的构造方法"></a>指定集合的构造方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">  elementData = c.toArray();</span><br><span class="line">  <span class="keyword">if</span> ((size = elementData.length) != <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// c.toArray might (incorrectly) not return Object[] (see 6260652)</span></span><br><span class="line">    <span class="keyword">if</span> (elementData.getClass() != Object[]<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">      <span class="title">elementData</span> </span>= Arrays.copyOf(elementData, size, Object[]<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// replace with empty array.</span></span><br><span class="line">    <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>构造一个包含指定元素的集合列表，如果指定指定的元素集合为空，则替换为默认的空数组。那不为空的情况是啥样的呢？</p>
<p>为什么要先<code>elementData = c.toArray();</code> 然后在做一次拷贝呢 <code>Arrays.copyOf(elementData, size, Object[].class);</code> 这句注释<code>c.toArray might (incorrectly) not return Object[] (see 6260652)</code>又是什么意思呢？</p>
</blockquote>
<blockquote>
<p>这块主要有三点注意的：</p>
<ul>
<li><code>Collection&lt;? extends E&gt; c</code> 这个形参表示c是一个集合，这个集合内的元素都是E或E的子类</li>
<li><code>&lt;? extends E&gt;</code> 是泛型中的上限通配符，用来限制元素类型的上限</li>
<li><code>6260652</code> 是<a href="https://bugs.java.com/bugdatabase/view_bug.do?bug_id=6260652" target="_blank" rel="noopener">JDK的bug编号</a></li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String[] args )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ArrayList list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    list.add(<span class="string">"ss"</span>);</span><br><span class="line">    list.add(<span class="number">12</span>);</span><br><span class="line">    System.out.println(list.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>上面这段代码是可以运行的！既然ArrayList的底层是数组实现的，那为什么可以往ArrayList中添加不同类型的元素呢？</p>
</blockquote>
<blockquote>
<p>这就设计到ArrayList的转型了，在上面的构造函数中，<code>elementData = c.toArray();</code>这样虽然可以通过强制类型转换将E（或E的子类）类型的数组向上转型成Objectp[]类型，但不能再向这个elementData中添加Object类型的元素了。<strong>这也就是加入有一个Object数组，但并不代表可以将Object对象存进去，具体能存进去什么类型的元素还取决于这个数组的实际类型。</strong> 所以在这个构造函数中，通过<code>elementData.getClass() != Object[].class</code>判断该elementData变量的实际类型是否是Object数组，如果不是，则通过<code>Arrays.copyOf(elementData, size, Object[].class)</code>将拷贝到Object数组中，返回这个Object数组，这样就保证ArrayList中的元素是Object类型的了</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T,U&gt; T[] copyOf(U[] original, <span class="keyword">int</span> newLength, Class&lt;? extends T[]&gt; newType) &#123;</span><br><span class="line">  <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">  T[] copy = ((Object)newType == (Object)Object[]<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">    ? (T[]) new Object[newLength]</span><br><span class="line">    : (T[]) Array.newInstance(newType.getComponentType(), newLength);</span><br><span class="line">  System.arraycopy(original, <span class="number">0</span>, copy, <span class="number">0</span>,</span><br><span class="line">                   Math.min(original.length, newLength));</span><br><span class="line">  <span class="keyword">return</span> copy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="序列化实现"><a href="#序列化实现" class="headerlink" title="序列化实现"></a>序列化实现</h3><blockquote>
<p>ArrayList 是实现了<code>java.io.Serializable</code>接口以达到序列化的目地，所以重写了readObject()方法和writeObject()方法</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> java.io.IOException</span>&#123;</span><br><span class="line">    <span class="comment">// Write out element count, and any hidden stuff</span></span><br><span class="line">    <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line">    s.defaultWriteObject();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Write out size as capacity for behavioural compatibility with clone()</span></span><br><span class="line">    s.writeInt(size);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Write out all elements in the proper order.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</span><br><span class="line">        s.writeObject(elementData[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (modCount != expectedModCount) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">    elementData = EMPTY_ELEMENTDATA;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read in size, and any hidden stuff</span></span><br><span class="line">    s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read in capacity</span></span><br><span class="line">    s.readInt(); <span class="comment">// ignored</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (size &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// be like clone(), allocate array based upon size not capacity</span></span><br><span class="line">        <span class="keyword">int</span> capacity = calculateCapacity(elementData, size);</span><br><span class="line">        SharedSecrets.getJavaOISAccess().checkArray(s, Object[]<span class="class">.<span class="keyword">class</span>, <span class="title">capacity</span>)</span>;</span><br><span class="line">        ensureCapacityInternal(size);</span><br><span class="line"></span><br><span class="line">        Object[] a = elementData;</span><br><span class="line">        <span class="comment">// Read in all elements in the proper order.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</span><br><span class="line">            a[i] = s.readObject();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h3><blockquote>
<p>ArrayList重载了两个add()方法实现添加元素的操作，其中涉及到ArrayList的动态扩容</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">    elementData[size++] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">    rangeCheckForAdd(index);</span><br><span class="line"></span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">    System.arraycopy(elementData, index, elementData, index + <span class="number">1</span>,</span><br><span class="line">                     size - index);</span><br><span class="line">    elementData[index] = element;</span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>其中，两个方法都是先调用ensureCapacityInternal()方法确保该ArrayList的容量足够</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    modCount++;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">        grow(minCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">    <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hugeCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError();</span><br><span class="line">    <span class="keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</span><br><span class="line">        Integer.MAX_VALUE :</span><br><span class="line">        MAX_ARRAY_SIZE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>当 <code>minCapacity &gt; elementData.length</code> 即添加元素后的ArrayList的最小所需容量比当前ArrayList的容量大时，执行grow()方法扩容</p>
<p>在add()的动态扩容中，和toArray()是的扩容一样，也是<code>oldCapacity + (oldCapacity &gt;&gt; 1);</code>在原来的基础上扩容一般，即原来的容量是10，则扩容后的容量是10 + 10/2 = 15</p>
</blockquote>
<h3 id="修改元素"><a href="#修改元素" class="headerlink" title="修改元素"></a>修改元素</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">    rangeCheck(index);</span><br><span class="line"></span><br><span class="line">    E oldValue = elementData(index);</span><br><span class="line">    elementData[index] = element;</span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>替换指定位置的元素，返回替换前的指定位置的值</p>
</blockquote>
<h3 id="移除元素"><a href="#移除元素" class="headerlink" title="移除元素"></a>移除元素</h3><blockquote>
<p>移除元素有两个重载方法，第一个是按照元素索引移除，第二个是按照元素值移除</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    rangeCheck(index);</span><br><span class="line"></span><br><span class="line">    modCount++;</span><br><span class="line">    E oldValue = elementData(index);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">        System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                         numMoved);</span><br><span class="line">    elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>该方法中，主要是通过<code>System.arraycopy(elementData, index+1, elementData, index, numMoved);</code>这段代码实现移除元素操作的，是将 elementData数组中的index+1到index+1+numMoved-1之间的元素复制到 elementData数组的index到index+numMoved-1的位置上</p>
<p>假如ArrayList中有三个元素：a、b、c、d，则执行<code>remove(2)</code>时，先将3号(2+1)位置到3(2+1+1-1)号位置上的d，复制到该list的2(index=2)号到2(2+1-1)号位置上，也就是这个list变成了a、b、d、d，然后执行<code>elementData[--size] = null;</code>将3号位置上的值重置为null，并通知GC回收该位置</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">            <span class="keyword">if</span> (elementData[index] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                fastRemove(index);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">            <span class="keyword">if</span> (o.equals(elementData[index])) &#123;</span><br><span class="line">                fastRemove(index);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>通过Object删除值和上面的通过索引删除类似，只不过通过元素删除时，先遍历list，找到该Object所在的位置，然后再执行替换并重置为null的操作</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fastRemove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">        System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                         numMoved);</span><br><span class="line">    elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="遍历List"><a href="#遍历List" class="headerlink" title="遍历List"></a>遍历List</h3><blockquote>
<p><strong>ArrayList的在JDK1.8时就支持lambda表达式通过forEach遍历list了，但暂时没有看lambda的源码，留后补充</strong></p>
<p>ArrayListSpliterator</p>
</blockquote>
<h3 id="克隆"><a href="#克隆" class="headerlink" title="克隆"></a>克隆</h3><blockquote>
<p><code>ArrayList</code>被 <code>Cloneable</code> 接口标记，所以只要重写了clone()方法，就可以实现元素的拷贝</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ArrayList&lt;?&gt; v = (ArrayList&lt;?&gt;) <span class="keyword">super</span>.clone();</span><br><span class="line">        v.elementData = Arrays.copyOf(elementData, size);</span><br><span class="line">        v.modCount = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">        <span class="comment">// this shouldn't happen, since we are Cloneable</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>此处没有对具体元素的做clone处理，所以只是浅克隆</p>
</blockquote>
<h2 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h2><blockquote>
<p>LinkedList是List接口的链表的实现，类继承关系如下：</p>
</blockquote>
<p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1598799346/LinkedList_gwrgd3.png" alt="LinkedList"></p>
<blockquote>
<p>如上LinkedList类实现了如下接口：</p>
<ul>
<li>Serializable：所以它可以序列化（标记接口）</li>
<li>Cloneable：它实现了Cloneable且实现了Object的clone方法，所以可是实现克隆（标记接口）</li>
<li>Deque: 该接口制定了双向链表的规范</li>
</ul>
<p>继承了以下类：</p>
<ul>
<li>AbstractSequentialList: 该类提供了「顺序访问」数据结构的简单实现</li>
</ul>
</blockquote>
<h3 id="属性-4"><a href="#属性-4" class="headerlink" title="属性"></a>属性</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>LinkedList的长度，即节点个数</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">transient</span> Node&lt;E&gt; first;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>不可变，指第一个节点</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">transient</span> Node&lt;E&gt; last;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>不可变，指最后一个节点</p>
</blockquote>
<h3 id="内部类-1"><a href="#内部类-1" class="headerlink" title="内部类"></a>内部类</h3><h4 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    E item;</span><br><span class="line">    Node&lt;E&gt; next;</span><br><span class="line">    Node&lt;E&gt; prev;</span><br><span class="line"></span><br><span class="line">    Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="line">        <span class="keyword">this</span>.item = element;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">        <span class="keyword">this</span>.prev = prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>该类定义了双向链表的数据结构，item是该节点的元素，next是下一个节点的地址，prev是上个节点的地址</p>
</blockquote>
<h4 id="ListItr-1"><a href="#ListItr-1" class="headerlink" title="ListItr"></a>ListItr</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ListItr</span> <span class="keyword">implements</span> <span class="title">ListIterator</span>&lt;<span class="title">E</span>&gt;</span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>该类实现了ListIterator接口，实现了LinkedList的迭代器，属性主要有：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Node&lt;E&gt; lastReturned; <span class="comment">// 最近一次返回的节点</span></span><br><span class="line"><span class="keyword">private</span> Node&lt;E&gt; next; <span class="comment">// 下一个节点</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> nextIndex; <span class="comment">// 下一节点的索引</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> expectedModCount = modCount; <span class="comment">// 更改数</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>该迭代器中实现了ListIterator中定义的add()、set()、remove()、next()等方法</p>
</blockquote>
<h4 id="DescendingIterator"><a href="#DescendingIterator" class="headerlink" title="DescendingIterator"></a>DescendingIterator</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">DescendingIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ListItr itr = <span class="keyword">new</span> ListItr(size());</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> itr.hasPrevious();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> itr.previous();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        itr.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="获取节点"><a href="#获取节点" class="headerlink" title="获取节点"></a>获取节点</h3><blockquote>
<p>该node()方法，根据索引值获取链表中的节点值</p>
<p>以为链表不能和数组一样通过下表获取值，所以在获取值时，先根据index和链表长度，判断index的值在链表的前半部分还是后半部分，然后再通过循环链表的方式获取指定索引的节点值</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Node&lt;E&gt; <span class="title">node</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// assert isElementIndex(index);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (index &lt; (size &gt;&gt; <span class="number">1</span>)) &#123;</span><br><span class="line">        Node&lt;E&gt; x = first;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++)</span><br><span class="line">            x = x.next;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Node&lt;E&gt; x = last;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = size - <span class="number">1</span>; i &gt; index; i--)</span><br><span class="line">            x = x.prev;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h3><blockquote>
<p>LinkedList有两个构造方法：空参构造方法、指定集合的构造方法</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在指定集合的构造方法中，其实第一步也是调用空参构造方法实例化一个空的LinkedList，然后再调用addAll()方法将指定集合逐个添加到LinkedList中</p>
</blockquote>
<blockquote>
<p>而在addAll()的过程中，也分两种情况：1. 该LinkedList为空，2. 其他线程已经向该LinkedList中添加了元素</p>
</blockquote>
<blockquote>
<p>该LinkedList为空时：</p>
<ul>
<li>将参数c集合通过<code>toArray</code>转成数组，声明两个临时Node变量pred和succ，pred为当前的游标值</li>
<li><code>pred=last</code>将游标Node置为最后一个元素，遍历上步c集合转换后的数组，将遍历的第一个元素置为first：<code>first = newNode;</code></li>
<li>循环遍历数组，移动游标Node。完成遍历后将last设置为最后一个游标Node</li>
</ul>
</blockquote>
<blockquote>
<p>其他线程已经向该LinkedList中添加了元素时：</p>
<ul>
<li>将succ置为索引指定的Node：<code>succ = node(index);</code> 将游标Node置为succ的下一个元素：<code>pred = succ.prev;</code></li>
<li>循环向游标Node中添加next值</li>
<li>将游标Node的下一个指定为succ，将succ的上一个指定为游标Node：<code>pred.next = succ;succ.prev = pred;</code></li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>();</span><br><span class="line">    addAll(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> addAll(size, c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(<span class="keyword">int</span> index, Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">    checkPositionIndex(index);</span><br><span class="line"></span><br><span class="line">    Object[] a = c.toArray();</span><br><span class="line">    <span class="keyword">int</span> numNew = a.length;</span><br><span class="line">    <span class="keyword">if</span> (numNew == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    Node&lt;E&gt; pred, succ;</span><br><span class="line">    <span class="keyword">if</span> (index == size) &#123;</span><br><span class="line">        succ = <span class="keyword">null</span>;</span><br><span class="line">        pred = last;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        succ = node(index);</span><br><span class="line">        pred = succ.prev;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Object o : a) &#123;</span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>) E e = (E) o;</span><br><span class="line">        Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(pred, e, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">if</span> (pred == <span class="keyword">null</span>)</span><br><span class="line">            first = newNode;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            pred.next = newNode;</span><br><span class="line">        pred = newNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (succ == <span class="keyword">null</span>) &#123;</span><br><span class="line">        last = pred;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        pred.next = succ;</span><br><span class="line">        succ.prev = pred;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    size += numNew;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="克隆-1"><a href="#克隆-1" class="headerlink" title="克隆"></a>克隆</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LinkedList&lt;E&gt; clone = superClone();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Put clone into "virgin" state</span></span><br><span class="line">    clone.first = clone.last = <span class="keyword">null</span>;</span><br><span class="line">    clone.size = <span class="number">0</span>;</span><br><span class="line">    clone.modCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Initialize clone with our elements</span></span><br><span class="line">    <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.next)</span><br><span class="line">        clone.add(x.item);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> clone;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> LinkedList&lt;E&gt; <span class="title">superClone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (LinkedList&lt;E&gt;) <span class="keyword">super</span>.clone();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>此处并未对Node节点的item做clone处理，所以依旧是浅克隆</p>
</blockquote>
<h3 id="获取对象索引"><a href="#获取对象索引" class="headerlink" title="获取对象索引"></a>获取对象索引</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.next) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x.item == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">return</span> index;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.next) &#123;</span><br><span class="line">            <span class="keyword">if</span> (o.equals(x.item))</span><br><span class="line">                <span class="keyword">return</span> index;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>该方法是通过Object获取链表中该Object的索引值的，在该方法中，为什么null和非null情况不能放到一起呢？</p>
</blockquote>
<blockquote>
<p>先来明确<code>==</code>和<code>equals()</code>的区别：</p>
<ol>
<li>对于<code>==</code>,</li>
</ol>
<ul>
<li>如果作用与基本数据类型的变量，则直接比较其存储的值是否相等</li>
<li>如果作用于引用类型的变量，则比较的是所指向的对象的地址</li>
</ul>
<ol start="2">
<li>对于<code>equals()</code></li>
</ol>
<ul>
<li>不能作用于基本数据类型的变量</li>
<li>如果没有对<code>equals()</code>方法重写，则比较的是引用类型的变量所指向的对象的地址。对于String、Date等类对<code>equals()</code>方法进行了重写，所以比较的是对象的内容。</li>
</ul>
</blockquote>
<blockquote>
<p>在此处将null和非null分开主要是因为如果<code>null.equals()</code>的话会报<code>NullPointerException</code>的异常，所以要分开。<strong>正因为有这种情况，所以在coding时，在使用<code>equals()</code>时需要做判断，如<code>if(str!=null &amp;&amp; str.equals(&quot;XXX&quot;)){}</code></strong></p>
</blockquote>
<h3 id="序列化实现-1"><a href="#序列化实现-1" class="headerlink" title="序列化实现"></a>序列化实现</h3><blockquote>
<p>LinkedList实现了<code>java.io.Serializable</code>接口，所以重写了writeObject()方法和readObject()方法，以达到序列化的目的</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> java.io.IOException </span>&#123;</span><br><span class="line">    <span class="comment">// Write out any hidden serialization magic</span></span><br><span class="line">    s.defaultWriteObject();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Write out size</span></span><br><span class="line">    s.writeInt(size);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Write out all elements in the proper order.</span></span><br><span class="line">    <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.next)</span><br><span class="line">        s.writeObject(x.item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">    <span class="comment">// Read in any hidden serialization magic</span></span><br><span class="line">    s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read in size</span></span><br><span class="line">    <span class="keyword">int</span> size = s.readInt();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read in all elements in the proper order.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">        linkLast((E)s.readObject());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>源码分析</category>
      </categories>
      <tags>
        <tag>List</tag>
        <tag>ArrayList</tag>
        <tag>LinkedList</tag>
        <tag>AbstractCollection</tag>
        <tag>AbstractList</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP重定向</title>
    <url>/2020/08/14/%E9%87%8D%E5%AE%9A%E5%90%91/</url>
    <content><![CDATA[<h2 id="WHAT"><a href="#WHAT" class="headerlink" title="WHAT"></a>WHAT</h2><h3 id="重定向和转发"><a href="#重定向和转发" class="headerlink" title="重定向和转发"></a>重定向和转发</h3><h4 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h4><blockquote>
<p>重定向 是一种当实际资源，如单个页面、域名等被迁移到新的位置的时候，保持原有地址可用的技术。HTTP协议提供了一种特殊形式的响应，HTTP重定向来处理这种情况。</p>
</blockquote>
<blockquote>
<p>HTTP重定向是由浏览器进行跳转的，浏览器根据收到的Http Code和Location具体决定挑战到哪个新位置，它本质上是发送了两个http请求，并且重定向后浏览器的地址栏会变成Location中的值。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@startuml</span><br><span class="line">浏览器 -&gt; 服务器: GET &#x2F;api HTTP&#x2F;1.1</span><br><span class="line">服务器 --&gt; 浏览器: HTTP&#x2F;1.1 301 Moved Permanently\n Location: &#x2F;api_new</span><br><span class="line">浏览器 --&gt; 服务器: GET &#x2F;api_new HTTP&#x2F;1.1</span><br><span class="line">服务器 -&gt; 浏览器: HTTP&#x2F;1.1 200 OK</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure>

<h4 id="转发"><a href="#转发" class="headerlink" title="转发"></a>转发</h4><blockquote>
<p>转发是由服务器完成的，在转发时，浏览器的地址栏是不会发生变化的，并且转发是对浏览器透明的，也就是浏览器并不知道本次请求发生了转发。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@startuml</span><br><span class="line">浏览器 -&gt; 网关服务器: GET &#x2F;api HTTP&#x2F;1.1</span><br><span class="line">网关服务器 --&gt; 上游服务器: GET &#x2F;api2 HTTP&#x2F;1.1</span><br><span class="line">上游服务器 --&gt; 网关服务器: HTTP&#x2F;1.1 200 OK</span><br><span class="line">网关服务器 -&gt; 浏览器: HTTP&#x2F;1.1 200 OK</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure>

<h3 id="Http重定向分类"><a href="#Http重定向分类" class="headerlink" title="Http重定向分类"></a>Http重定向分类</h3><h4 id="永久重定向"><a href="#永久重定向" class="headerlink" title="永久重定向"></a>永久重定向</h4><blockquote>
<p>永久重定向的操作是 <strong>永久性</strong> 的。它表示原有的URL不应再被使用，应该优先选用新的URL。</p>
</blockquote>
<blockquote>
<p>谷歌搜索引擎在遇到301时，会直接收录新的URL。</p>
</blockquote>
<table>
<thead>
<tr>
<th>HTTP状态码</th>
<th>处理</th>
<th>应用场景</th>
</tr>
</thead>
<tbody><tr>
<td>301 Moved Permanent</td>
<td>GET方法不会发生改变，其他方法有可能会变为GET方法</td>
<td>请求的 URL 已被移除时使用；默认情况下，永久重定向是会被浏览器缓存的</td>
</tr>
<tr>
<td><strong>308 Permanent Redirect</strong></td>
<td>方法和消息体都不会发生变化</td>
<td>用于非GET方法，被浏览器默认缓存</td>
</tr>
</tbody></table>
<h4 id="临时重定向"><a href="#临时重定向" class="headerlink" title="临时重定向"></a>临时重定向</h4><blockquote>
<p>可以简单的理解为被访问的资源原本确实存在，但已经被 <strong>临时</strong> 改变了位置。</p>
</blockquote>
<blockquote>
<p>这种情况下，谷歌搜索引擎不会记录新的、临时的URL。</p>
</blockquote>
<table>
<thead>
<tr>
<th>HTTP状态码</th>
<th>处理</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>302 Found</td>
<td>GET方法不会发生变更，其他方法有可能变更为GET方法</td>
<td>由于不可预见的原因该页面暂时不可用。在这种情况下，搜索引擎不会更新它们的链接</td>
</tr>
<tr>
<td>303 See Other</td>
<td>GET方法不会发生变更，其他方法会变更为GET方法</td>
<td>用户PUT或POST请求完成之后进行页面跳转来防止由于页面刷新导致的操作重复触发</td>
</tr>
<tr>
<td><strong>307 Temporary Redirect</strong></td>
<td>方法和消息体都不发生变化</td>
<td>由于不可预见的原因该页面暂时不可用。在这种情况下，搜索引擎不会更新它们的链接。当站点支持非GET方法的链接或操作的时候，该状态码优于302状态码。<strong>307与302相比，307不允许修改请求方法</strong></td>
</tr>
</tbody></table>
<h4 id="特殊重定向"><a href="#特殊重定向" class="headerlink" title="特殊重定向"></a>特殊重定向</h4><blockquote>
<p>特殊重定向的状态码包括304和300，304表示资源未被修改，会使页面跳转到本地就的缓存版本中；而300表示多项选择，是一种手动重定向：以web页面形式呈现在浏览器中的消息主体包含了一个可能的重定向链接的列表，用户可以从中选择。</p>
</blockquote>
<table>
<thead>
<tr>
<th>HTTP状态码</th>
<th>应用场景</th>
</tr>
</thead>
<tbody><tr>
<td>300 Multiple Choice</td>
<td>不常用。所有的选项在消息主体的HTML页面中列出，可在Link头部加入机器可读的rel=alternate</td>
</tr>
<tr>
<td>304 Not Modified</td>
<td>发送用于重新验证的条件请求。表示缓存的响应仍然是最新的并且可以使用</td>
</tr>
</tbody></table>
<h2 id="HOW"><a href="#HOW" class="headerlink" title="HOW"></a>HOW</h2><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><h4 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h4><blockquote>
<p>略</p>
</blockquote>
<h4 id="lamp环境配置"><a href="#lamp环境配置" class="headerlink" title="lamp环境配置"></a>lamp环境配置</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 拉取现成别人做好的lamp镜像</span></span><br><span class="line">[gtang94@izwz9hvzt7nfcuosqsmqtfz ~]$ docker pull xiaowenxiao/lamp:latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看拉取的镜像</span></span><br><span class="line">[gtang94@izwz9hvzt7nfcuosqsmqtfz ~]$ docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">xiaowenxiao/lamp    latest              fb7c111e75ee        12 months ago       3.86GB</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建挂载路径</span></span><br><span class="line">[gtang94@izwz9hvzt7nfcuosqsmqtfz ~]$ mkdir /usr/<span class="built_in">local</span>/lamp/project &amp;&amp; chmod 777 /usr/<span class="built_in">local</span>/lamp/project</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动容器</span></span><br><span class="line">[gtang94@izwz9hvzt7nfcuosqsmqtfz ~]$ docker run --privileged -tid -p 3307:3306 -p 81:80 -v /usr/<span class="built_in">local</span>/lamp/project:/var/www/project --name=lamp xiaowenxiao/lamp:latest /usr/sbin/init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看容器启动状态</span></span><br><span class="line">[gtang94@izwz9hvzt7nfcuosqsmqtfz ~]$ docker ps</span><br><span class="line">CONTAINER ID        IMAGE                     COMMAND             CREATED             STATUS              PORTS                                                NAMES</span><br><span class="line">bfdb64914288        xiaowenxiao/lamp:latest   <span class="string">"/usr/sbin/init"</span>    4 seconds ago       Up 4 seconds        22/tcp, 0.0.0.0:81-&gt;80/tcp, 0.0.0.0:3307-&gt;3306/tcp   lamp</span><br></pre></td></tr></table></figure>



<h3 id="Apache重定向"><a href="#Apache重定向" class="headerlink" title="Apache重定向"></a>Apache重定向</h3><h4 id="Apache支持-htaccess"><a href="#Apache支持-htaccess" class="headerlink" title="Apache支持.htaccess"></a>Apache支持.htaccess</h4><blockquote>
<ul>
<li>修改 /etc/httpd/conf/httpd.conf， 将 &lt;Directory “/var/www/project”&gt; 中的 AllowOverride None 改成 AllowOverride All</li>
<li>重启apache : <code>systemctl restart httpd.service</code></li>
</ul>
</blockquote>
<blockquote>
<p>启用 .htaccess 后，每次请求资源时，无论是否真正用到，都需要在每个目录下查找读取.htaccess文件。例如访，问 /gateway/user/list.html，需要依次查找：</p>
<ul>
<li>/.htaccess</li>
<li>/gateway/.htaccess</li>
<li>/gateway/user/.htaccess</li>
</ul>
</blockquote>
<h4 id="htaccess基本正则"><a href="#htaccess基本正则" class="headerlink" title=".htaccess基本正则"></a>.htaccess基本正则</h4><table>
<thead>
<tr>
<th>字符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>.</td>
<td>匹配换行符以外的所有字符</td>
</tr>
<tr>
<td>\w</td>
<td>匹配字母、数字、下划线、汉字</td>
</tr>
<tr>
<td>\s</td>
<td>匹配任意空白符</td>
</tr>
<tr>
<td>\d</td>
<td>匹配数字</td>
</tr>
<tr>
<td>\b</td>
<td>匹配单词的开始或结束</td>
</tr>
<tr>
<td>^</td>
<td>匹配以某个字符串开始</td>
</tr>
<tr>
<td>$</td>
<td>匹配以某个字符串结束</td>
</tr>
<tr>
<td>*</td>
<td>匹配零次或多次</td>
</tr>
<tr>
<td>+</td>
<td>匹配依次或多次</td>
</tr>
<tr>
<td>?</td>
<td>匹配零次或一次</td>
</tr>
<tr>
<td>{n}</td>
<td>重复n次</td>
</tr>
<tr>
<td>{n,}</td>
<td>重复n次或n次以上</td>
</tr>
<tr>
<td>{n,m}</td>
<td>重复n到m次</td>
</tr>
<tr>
<td>()</td>
<td>一个括号代表一个分组，第一个括号的内容用 $1 引用，第二个括号的内容用 $2 引用，依次类推</td>
</tr>
</tbody></table>
<h4 id="htaccess语法"><a href="#htaccess语法" class="headerlink" title=".htaccess语法"></a>.htaccess语法</h4><h5 id="RewriteEngine"><a href="#RewriteEngine" class="headerlink" title="RewriteEngine"></a>RewriteEngine</h5><blockquote>
<p>RewriteEngine 用于开启或停用rewrite功能，值为 On 或 Off，例：<code>RewriteEngine On</code></p>
</blockquote>
<h5 id="RewriteBase"><a href="#RewriteBase" class="headerlink" title="RewriteBase"></a>RewriteBase</h5><blockquote>
<p>RewriteBase 用于设置重写的基准目录，根目录使用 / ，例：<code>RewriteBase /</code></p>
</blockquote>
<h5 id="RewriteCond"><a href="#RewriteCond" class="headerlink" title="RewriteCond"></a>RewriteCond</h5><blockquote>
<p>RewriteCond 用于设置匹配的条件，只有匹配所有的 RewriteCond 后才能进入下面的 RewriteRule </p>
</blockquote>
<blockquote>
<p>RewriteCond 的语法格式：<code>RewriteCond TestString CondPattern [flags]</code></p>
</blockquote>
<blockquote>
<p>TestString 是一个纯文本的字符串，主要参数如下：</p>
</blockquote>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>HTTP_HOST</td>
<td>当前请求的 Host: 头部的内容</td>
</tr>
<tr>
<td>HTTP_COOKIE</td>
<td>cookie</td>
</tr>
<tr>
<td>HTTP_UPGRADE_INSECURE_REQUESTS</td>
<td>表示浏览器可读懂服务器发过来的请求</td>
</tr>
<tr>
<td>HTTP_USER_AGENT</td>
<td>获取用户相关信息，包括用户浏览器、操作系统等信息</td>
</tr>
<tr>
<td>HTTP_ACCEPT</td>
<td>当前请求的ACCEPT头部信息</td>
</tr>
<tr>
<td>HTTP_ACCEPT_LANGUAGE</td>
<td><em>当前请求的 Accept-Language: 头部的内容。例如：“en”</em></td>
</tr>
<tr>
<td>SERVER_SIGNATURE</td>
<td><em>包含服务器版本和 虚拟主机名的字符串</em></td>
</tr>
<tr>
<td>SERVER_SOFTWARE</td>
<td><em>服务器标识的字串，在响应请求时的头部中给出</em></td>
</tr>
<tr>
<td>SERVER_NAME</td>
<td>当前 运行脚本所在服务器 主机的名称</td>
</tr>
<tr>
<td>SERVER_ADDR</td>
<td>当前 运行脚本所在服务器 IP地址</td>
</tr>
<tr>
<td>SERVER_PORT</td>
<td>当前 运行脚本所在服务器 端口</td>
</tr>
<tr>
<td>REMOTE_ADDR</td>
<td>正在浏览当前页面用户的 IP 地址</td>
</tr>
<tr>
<td>DOCUMENT_ROOT</td>
<td>当前 运行脚本所在的文档根目录。在服务器配置文件中定义</td>
</tr>
<tr>
<td>SERVER_ADMIN</td>
<td>管理员信息</td>
</tr>
<tr>
<td>SCRIPT_FILENAME</td>
<td>当前执行 脚本的 绝对路径名</td>
</tr>
<tr>
<td>REMOTE_PORT</td>
<td>用户连接到服务器时所使用的端口</td>
</tr>
<tr>
<td>GATEWAY_INTERFACE</td>
<td>服务器使用的 CGI 规范的版本。例如，“CGI/1.1”</td>
</tr>
<tr>
<td>SERVER_PROTOCOL</td>
<td>请求页面时通信协议的名称和版本。例如，“HTTP/1.0”</td>
</tr>
<tr>
<td>REQUEST_METHOD</td>
<td>访问页面时的请求方法。例如：“GET”、“HEAD”，“POST”，“PUT”</td>
</tr>
<tr>
<td>QUERY_STRING</td>
<td>查询(query)的字符串</td>
</tr>
<tr>
<td>REQUEST_URI</td>
<td>访问此页面所需的 URI。例如，“/index.html”</td>
</tr>
<tr>
<td>SCRIPT_NAME</td>
<td>包含当前 脚本的路径。这在页面需要指向自己时非常有用</td>
</tr>
<tr>
<td>PHP_SELF</td>
<td>当前正在执行 脚本的文件名，与 document root相关</td>
</tr>
<tr>
<td>PATH_TRANSLATED</td>
<td>当前 脚本所在文件系统（不是文档根目录）的基本路径</td>
</tr>
<tr>
<td>argv</td>
<td>传递给该 脚本的参数</td>
</tr>
</tbody></table>
<blockquote>
<p>CondPattern 是条件pattern，也就是TestString的具体值会被计算与CondPattern匹配，用 ! 是表示匹配的反转</p>
<p>flags 是RewriteCond的标志符，有以下参数：</p>
</blockquote>
<table>
<thead>
<tr>
<th>字符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>nocase|NC</td>
<td>忽略大小</td>
</tr>
<tr>
<td>ornext|OR</td>
<td>逻辑或，可以同时匹配多个RewriteCond条件RewriteRule适用的标志符</td>
</tr>
<tr>
<td>redirect|R [=code]</td>
<td>强迫重写为基于http开头的外部转向(注意URL的变化) 如：[R=301,L]</td>
</tr>
<tr>
<td>forbidden|F</td>
<td>重写为禁止访问</td>
</tr>
<tr>
<td>proxy|P</td>
<td>重写为通过代理访问的http路径</td>
</tr>
<tr>
<td>last|L</td>
<td>最后的重写规则标志，如果匹配，不再执行以后的规则</td>
</tr>
<tr>
<td>next|N</td>
<td>循环同一个规则，直到不能满足匹配</td>
</tr>
<tr>
<td>chain|C</td>
<td>如果匹配该规则，则继续下面的有Chain标志的规则</td>
</tr>
<tr>
<td>type|T=MIME-type</td>
<td>指定MIME类型</td>
</tr>
<tr>
<td>nosubreq|NS</td>
<td>如果是内部子请求则跳过</td>
</tr>
<tr>
<td>nocase|NC</td>
<td>忽略大小</td>
</tr>
<tr>
<td>qsappend|QSA</td>
<td>附加查询字符串</td>
</tr>
<tr>
<td>noescape|NE</td>
<td>禁止URL中的字符自动转义成%[0-9]+的形式</td>
</tr>
<tr>
<td>passthrough|PT</td>
<td>将重写结果运用于mod_alias</td>
</tr>
<tr>
<td>skip|S=num</td>
<td>跳过下面几个规则</td>
</tr>
</tbody></table>
<h5 id="RewriteRule"><a href="#RewriteRule" class="headerlink" title="RewriteRule"></a>RewriteRule</h5><blockquote>
<p>RewriteRule 是具体的重定向规则， 语法格式：<code>RewriteRule Pattern Substitution [flags]</code></p>
</blockquote>
<blockquote>
<p>Pattern：一般是重定向前的URL</p>
<p>Substitution：一般是重定向后的新URL</p>
<p>flags 是Rewrite的标志符，一般有以下参数：</p>
</blockquote>
<table>
<thead>
<tr>
<th>字符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>R</td>
<td>表示强制重定向，后面可跟返回给浏览器的HTTP状态码（常用）</td>
</tr>
<tr>
<td>F</td>
<td>表示禁止访问（常用）</td>
</tr>
<tr>
<td>L</td>
<td>表示当前规则是最后一条规则，停止读取后面的条件和规则，立即执行当前重定向（常用）</td>
</tr>
<tr>
<td>G</td>
<td>表示强制URL变为GONE，返回410的HTTP状态码</td>
</tr>
<tr>
<td>P</td>
<td>表示强制使用代理转发</td>
</tr>
<tr>
<td>N</td>
<td>表示重新从第一条规则开始重新允许重写过程</td>
</tr>
<tr>
<td>C</td>
<td>表示与下一条规则关联</td>
</tr>
<tr>
<td>T</td>
<td>表示强制转为MIME类型</td>
</tr>
<tr>
<td>NS</td>
<td>只用于不是内部的子请求</td>
</tr>
<tr>
<td>NC</td>
<td>不区分大小写</td>
</tr>
<tr>
<td>QSA</td>
<td>追加请求字符串</td>
</tr>
<tr>
<td>NE</td>
<td>不再输出转义特殊字符</td>
</tr>
<tr>
<td>PT</td>
<td>表示传递给下一个处理</td>
</tr>
</tbody></table>
<h5 id="AcceptPathInfo"><a href="#AcceptPathInfo" class="headerlink" title="AcceptPathInfo"></a>AcceptPathInfo</h5><blockquote>
<p>改指令决定是否在接受附带多余路径名信息的请求，语法：<code>AcceptPathInfo On|Off|Default</code> ，此指令默认是Default，指令取值范围如下：</p>
</blockquote>
<table>
<thead>
<tr>
<th>取值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>On</td>
<td>只要前导路径可以映射到一个真实存在的路径，就可以接受该请求</td>
</tr>
<tr>
<td>Off</td>
<td>只有当一个请求映射到真实存在的路径时，才会被接受</td>
</tr>
<tr>
<td>Default</td>
<td>是否接收附带多余路径名信息的请求又其处理器(cgi-script、isapi-isa)决定</td>
</tr>
</tbody></table>
<h3 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h3><h4 id="将H5的客户端发送的请求重定向到指定文件"><a href="#将H5的客户端发送的请求重定向到指定文件" class="headerlink" title="将H5的客户端发送的请求重定向到指定文件"></a>将H5的客户端发送的请求重定向到指定文件</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">RewriteCond %&#123;HTTP_USER_AGENT&#125; (iPhone|Android|dream|CUPCAKE|blackberry9500|blackberry9530|blackberry9520|blackberry9550|blackberry9800|webOS|incognito|webmate)</span><br><span class="line">RewriteRule ^a.html b.html [R=301,L]</span><br></pre></td></tr></table></figure>



<h4 id="重定向死循环"><a href="#重定向死循环" class="headerlink" title="重定向死循环"></a>重定向死循环</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果是sp的URL，用pc客户但打开后URL变成pc的URL，用sp的客户端打开后URL变成pc的URL</span></span><br><span class="line"><span class="comment"># 如果是pc的URL，用pc客户但打开后URL变成pc的URL，用sp的客户端打开后URL变成pc的URL</span></span><br><span class="line">RewriteCond %&#123;HTTP_USER_AGENT&#125; (iPhone|Android|dream|CUPCAKE|blackberry9500|blackberry9530|blackberry9520|blackberry9550|blackberry9800|webOS|incognito|webmate)</span><br><span class="line">RewriteRule die_pc.html die_sp.html</span><br><span class="line"></span><br><span class="line">RewriteRule die_sp.html die_pc.html [R=301,L]</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">RewriteCond %&#123;HTTP_USER_AGENT&#125; (iPhone|Android|dream|CUPCAKE|blackberry9500|blackberry9530|blackberry9520|blackberry9550|blackberry9800|webOS|incognito|webmate)</span><br><span class="line">RewriteRule die_pc.html die_sp.html [L]</span><br><span class="line"></span><br><span class="line">RewriteCond %&#123;ENV:REDIRECT_STATUS&#125; ^$</span><br><span class="line">RewriteRule die_sp.html die_pc.html [R=301,L]</span><br></pre></td></tr></table></figure>



<h4 id="多条件满足"><a href="#多条件满足" class="headerlink" title="多条件满足"></a>多条件满足</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">RewriteCond %&#123;REMOTE_ADDR&#125; ^1\.80\.146\.247$ [OR]</span><br><span class="line">RewriteCond %&#123;HTTP_USER_AGENT&#125; (iPhone|Android|dream|CUPCAKE|blackberry9500|blackberry9530|blackberry9520|blackberry9550|blackberry9800|webOS|incognito|webmate)</span><br><span class="line">RewriteRule mul.html 404.html</span><br></pre></td></tr></table></figure>



<h4 id="按照请求的资源类型匹配"><a href="#按照请求的资源类型匹配" class="headerlink" title="按照请求的资源类型匹配"></a>按照请求的资源类型匹配</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">RewriteCond %&#123;REQUEST_FILENAME&#125; -f</span><br><span class="line">RewriteRule ^ft(.*)\.html ft.html [R=301,L]</span><br></pre></td></tr></table></figure>



<h4 id="按资源类型转发-排除特定文件"><a href="#按资源类型转发-排除特定文件" class="headerlink" title="按资源类型转发(排除特定文件)"></a>按资源类型转发(排除特定文件)</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">RewriteCond %&#123;REQUEST_FILENAME&#125; !ft1.html</span><br><span class="line">RewriteCond %&#123;REQUEST_FILENAME&#125; -f</span><br><span class="line">RewriteRule ^ft(\d+)\.html ft.html [R=301,L]</span><br></pre></td></tr></table></figure>



<h4 id="全目录下的资源重定向"><a href="#全目录下的资源重定向" class="headerlink" title="全目录下的资源重定向"></a>全目录下的资源重定向</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">RewriteCond %&#123;HTTP_USER_AGENT&#125; (iPhone|Android|dream|CUPCAKE|blackberry9500|blackberry9530|blackberry9520|blackberry9550|blackberry9800|webOS|incognito|webmate)</span><br><span class="line">RewriteRule ^learn/(\d+).html learn.html [L]</span><br></pre></td></tr></table></figure>



<h4 id="参数匹配重定向"><a href="#参数匹配重定向" class="headerlink" title="参数匹配重定向"></a>参数匹配重定向</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">RewriteCond %&#123;QUERY_STRING&#125; (p=2)$</span><br><span class="line">RewriteRule ^param1.html param2.html [L]</span><br></pre></td></tr></table></figure>



<h4 id="请求转发"><a href="#请求转发" class="headerlink" title="请求转发"></a>请求转发</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">RewriteRule a.html b.html</span><br></pre></td></tr></table></figure>



<h4 id="添加参数重定向"><a href="#添加参数重定向" class="headerlink" title="添加参数重定向"></a>添加参数重定向</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">RewriteRule ^addp1.php addp2.php?p2=22222 [QSA,L]</span><br></pre></td></tr></table></figure>



<h4 id="POST请求的重定向"><a href="#POST请求的重定向" class="headerlink" title="POST请求的重定向"></a>POST请求的重定向</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--index.html--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>This is a simple HTML form!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">	<span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"out_before.php"</span> <span class="attr">method</span>=<span class="string">"POST"</span>&gt;</span></span><br><span class="line">	name:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	select some products: <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"products[]"</span> <span class="attr">size</span>=<span class="string">6</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"c++"</span>&gt;</span>c++<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"c#"</span>&gt;</span>c#<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"php"</span>&gt;</span>php<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"Python"</span>&gt;</span>Python<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"lua"</span>&gt;</span>lua<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"JavaScript"</span>&gt;</span>JavaScript<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">	Message:<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">"message"</span> <span class="attr">rows</span>=<span class="string">"5"</span> <span class="attr">cols</span>=<span class="string">"40"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"ok"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//out_before.php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;pre&gt;"</span>;</span><br><span class="line">print_r($_SERVER);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;/pre&gt;"</span>;</span><br><span class="line"><span class="keyword">exit</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// out_after.php</span></span><br><span class="line">header(<span class="string">"Content-Type: text/html; charset=UTF-8"</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">"username"</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"输入的名户名为："</span> . $_POST[<span class="string">"username"</span>] . <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">"products"</span>])) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (is_array($_POST[<span class="string">"products"</span>]) &amp;&amp; !<span class="keyword">empty</span>($_POST[<span class="string">"products"</span>]))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"选择的科目为："</span> . <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">        <span class="keyword">foreach</span> ($_POST[<span class="string">"products"</span>] <span class="keyword">as</span>  $value ) &#123;</span><br><span class="line">            <span class="keyword">echo</span>  <span class="string">"$value &lt;br /&gt;"</span>;&#125;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"选择的个数为："</span> . count($_POST[<span class="string">"products"</span></span><br><span class="line">        ]) . <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">"message"</span>])) </span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"输入的消息为："</span> . $_POST[<span class="string">"message"</span>] . <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># .htaccess</span></span><br><span class="line">RewriteEngine On</span><br><span class="line">RewriteBase /</span><br><span class="line"></span><br><span class="line"><span class="comment">#RewriteRule ^out_before.php p308/out_after.php [R=301,L]</span></span><br><span class="line"></span><br><span class="line">RewriteRule ^out_before.php p308/out_after.php [R=308,L]</span><br></pre></td></tr></table></figure>





<h3 id="代码中重定向"><a href="#代码中重定向" class="headerlink" title="代码中重定向"></a>代码中重定向</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">'HTTP/1.1 301 Moved Permanently'</span>);</span><br><span class="line">header(<span class="string">"Location: phpr2.php"</span>);</span><br></pre></td></tr></table></figure>



<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="HTTP-Code"><a href="#HTTP-Code" class="headerlink" title="HTTP Code"></a><a href="[https://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81](https://zh.wikipedia.org/wiki/HTTP状态码)">HTTP Code</a></h3><h3 id="在线调试"><a href="#在线调试" class="headerlink" title="在线调试"></a><a href="https://htaccess.madewithlove.be/" target="_blank" rel="noopener">在线调试</a></h3><h3 id="Apache配置文件参数"><a href="#Apache配置文件参数" class="headerlink" title="Apache配置文件参数"></a>Apache配置文件参数</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ServerRoot <span class="string">"/etc/httpd"</span> <span class="comment"># 你的apache软件安装的位置。其它指定的目录如果没有指定绝对路径，则目录是相对于该目录</span></span><br><span class="line"></span><br><span class="line">Listen 80 <span class="comment"># #服务器监听的端口号</span></span><br><span class="line"></span><br><span class="line">Include conf.modules.d/*.conf</span><br><span class="line"></span><br><span class="line">User apache</span><br><span class="line"></span><br><span class="line">Group apache</span><br><span class="line"></span><br><span class="line">ServerAdmin root@localhost <span class="comment">#管理员的邮件地址</span></span><br><span class="line"></span><br><span class="line">&lt;Directory /&gt;</span><br><span class="line">    AllowOverride none</span><br><span class="line">    Require all denied</span><br><span class="line">&lt;/Directory&gt;</span><br><span class="line"></span><br><span class="line">DocumentRoot <span class="string">"/var/www/project"</span> <span class="comment">#主站点的网页存储位置</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># == 主站点的目录进行访问控制 start ==</span></span><br><span class="line">&lt;Directory <span class="string">"/var/www/project"</span>&gt;</span><br><span class="line">    AllowOverride None</span><br><span class="line">    Require all granted</span><br><span class="line">&lt;/Directory&gt;</span><br><span class="line"></span><br><span class="line">&lt;Directory <span class="string">"/var/www/project"</span>&gt;</span><br><span class="line">		<span class="comment"># Options：配置在特定目录使用哪些特性，常用的值和基本含义如下:</span></span><br><span class="line">		<span class="comment"># ExecCGI: 在该目录下允许执行CGI脚本</span></span><br><span class="line">		<span class="comment"># FollowSymLinks: 在该目录下允许文件系统使用符号连接</span></span><br><span class="line">		<span class="comment"># Indexes: 当用户访问该目录时，如果用户找不到DirectoryIndex指定的主页文件(例如index.html),则返回该目录下的文件列表给用户</span></span><br><span class="line">		<span class="comment"># SymLinksIfOwnerMatch: 当使用符号连接时，只有当符号连接的文件拥有者与实际文件的拥有者相同时才可以访问</span></span><br><span class="line">    Options Indexes FollowSymLinks</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># AllowOverride：允许存在于.htaccess文件中的指令类型(.htaccess文件名是可以改变的，其文件名由AccessFileName指令决定):</span></span><br><span class="line">    <span class="comment"># None: 当AllowOverride被设置为None时。不搜索该目录下的.htaccess文件（可以减小服务器开销）</span></span><br><span class="line">    <span class="comment"># All: 在.htaccess文件中可以使用所有的指令</span></span><br><span class="line">    <span class="comment"># Order：控制在访问时Allow和Deny两个访问规则哪个优先</span></span><br><span class="line">    <span class="comment"># Allow：允许访问的主机列表</span></span><br><span class="line">    <span class="comment"># Deny：拒绝访问的主机列表</span></span><br><span class="line">    AllowOverride All</span><br><span class="line">    </span><br><span class="line">    Require all granted</span><br><span class="line">&lt;/Directory&gt;</span><br><span class="line"><span class="comment"># == 主站点的目录进行访问控制 end ==</span></span><br><span class="line"></span><br><span class="line">&lt;IfModule dir_module&gt;</span><br><span class="line">    DirectoryIndex index.php index.html</span><br><span class="line">&lt;/IfModule&gt;</span><br><span class="line"></span><br><span class="line">&lt;Files <span class="string">".ht*"</span>&gt;</span><br><span class="line">    Require all denied</span><br><span class="line">&lt;/Files&gt;</span><br><span class="line"></span><br><span class="line">ErrorLog <span class="string">"logs/error_log"</span> <span class="comment"># 日志的保存位置</span></span><br><span class="line"></span><br><span class="line">LogLevel warn <span class="comment"># 日志的级别</span></span><br><span class="line"></span><br><span class="line">&lt;IfModule log_config_module&gt;</span><br><span class="line">    LogFormat <span class="string">"%h %l %u %t \"%r\" %&gt;s %b \"%&#123;Referer&#125;i\" \"%&#123;User-Agent&#125;i\""</span> combined</span><br><span class="line">    LogFormat <span class="string">"%h %l %u %t \"%r\" %&gt;s %b"</span> common</span><br><span class="line"></span><br><span class="line">    &lt;IfModule logio_module&gt;</span><br><span class="line">      <span class="comment"># You need to enable mod_logio.c to use %I and %O</span></span><br><span class="line">      LogFormat <span class="string">"%h %l %u %t \"%r\" %&gt;s %b \"%&#123;Referer&#125;i\" \"%&#123;User-Agent&#125;i\" %I %O"</span> combinedio</span><br><span class="line">    &lt;/IfModule&gt;</span><br><span class="line">        CustomLog <span class="string">"logs/access_log"</span> combined</span><br><span class="line">&lt;/IfModule&gt;</span><br><span class="line"></span><br><span class="line">&lt;IfModule alias_module&gt;</span><br><span class="line">    ScriptAlias /cgi-bin/ <span class="string">"/var/www/cgi-bin/"</span></span><br><span class="line">&lt;/IfModule&gt;</span><br><span class="line"></span><br><span class="line">&lt;Directory <span class="string">"/var/www/cgi-bin"</span>&gt;</span><br><span class="line">    AllowOverride None</span><br><span class="line">    Options None</span><br><span class="line">    Require all granted</span><br><span class="line">&lt;/Directory&gt;</span><br><span class="line"></span><br><span class="line">&lt;IfModule mime_module&gt;</span><br><span class="line">    TypesConfig /etc/mime.types</span><br><span class="line">    </span><br><span class="line">    AddType application/x-compress .Z</span><br><span class="line">    AddType application/x-gzip .gz .tgz</span><br><span class="line">    AddType application/x-httpd-php .php</span><br><span class="line">    AddType application/x-httpd-php-source .php5</span><br><span class="line">    </span><br><span class="line">    AddType text/html .shtml</span><br><span class="line">    AddOutputFilter INCLUDES .shtml</span><br><span class="line">&lt;/IfModule&gt;</span><br><span class="line"></span><br><span class="line">AddDefaultCharset UTF-8</span><br><span class="line"></span><br><span class="line">&lt;IfModule mime_magic_module&gt;</span><br><span class="line">    MIMEMagicFile conf/magic</span><br><span class="line">&lt;/IfModule&gt;</span><br><span class="line"></span><br><span class="line">EnableSendfile on</span><br><span class="line"></span><br><span class="line">IncludeOptional conf.d/*.conf</span><br><span class="line">ServerName localhost:80 <span class="comment"># 主站点名称（网站的主机名）</span></span><br><span class="line">AddType application/x-httpd-php .php</span><br><span class="line">DirectoryIndex index.php index.htm index.html <span class="comment"># 主页文件的设置（本例将主页文件设置为：index.html,index.htm和index.php）</span></span><br><span class="line">AddHandler php7-script .php</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>301</tag>
        <tag>302</tag>
        <tag>HTTP重定向</tag>
        <tag>apache</tag>
        <tag>lamp</tag>
      </tags>
  </entry>
  <entry>
    <title>集合接口</title>
    <url>/2020/08/08/%E9%9B%86%E5%90%88%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<h2 id="What"><a href="#What" class="headerlink" title="What"></a>What</h2><h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><blockquote>
<p>在Java中，有一个类专门用来存放其他类的对象，这个存放其他类的对象就叫做容器。</p>
</blockquote>
<blockquote>
<p>常见的容器有：</p>
<ul>
<li>Collection：存储对象的集合</li>
<li>Map：存储键值对（两个对象）的映射表</li>
<li>数组</li>
</ul>
</blockquote>
<h3 id="集合-Collection"><a href="#集合-Collection" class="headerlink" title="集合 Collection"></a>集合 Collection</h3><blockquote>
<p>集合有List、Set、Queue。集合类图继承关系如下：</p>
</blockquote>
<p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1596733072/collection_fgqruy.png" alt="collection"></p>
<h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><blockquote>
<p>map类图继承关系如下：</p>
</blockquote>
<p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1596733075/map_iubgoc.png" alt="map"></p>
<h2 id="Why"><a href="#Why" class="headerlink" title="Why"></a>Why</h2><h3 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h3><p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1596964477/Object_ti6xr6.png" alt="Object"></p>
<blockquote>
<p>Object 类在 java.lang 下，Object类所有类的基类，所有类（包括数据）都实现了这个类的方法</p>
</blockquote>
<h4 id="registerNatives"><a href="#registerNatives" class="headerlink" title="registerNatives"></a>registerNatives</h4><blockquote>
<p>静态native方法，用来注册native方法的</p>
<p>在Object类的的静态代码块中，调用改方法</p>
</blockquote>
<p>####getClass</p>
<blockquote>
<p>返回该Object类的运行时类。返回的类对象是被表示类的static synchronized方法锁定的对象。</p>
<p>实际结构的类型是Class类型。</p>
</blockquote>
<h4 id="hashCode"><a href="#hashCode" class="headerlink" title="hashCode"></a>hashCode</h4><blockquote>
<p>返回这个对象的哈希值，支持这个方式是为了哈希表，例如HashMap提供的那样。</p>
</blockquote>
<blockquote>
<p>这个hashCode通常的概念是：</p>
<ul>
<li>只要在执行Java应用程序时多次在同一个对象上调用该方法，如果equals方法比较中使用的信息没有被修改时，hashCode方法返回必须始终返回相同的整数</li>
<li>如果调用equals方法检测两个对象相等，那么在这两个对象上调用hashCode方法产生的结果相同</li>
<li>如果调用eqlas方法检测两个对象不相等，那么这两个对象调用hashCode方法的结果一定不相同。为不相等的对象生成不同的哈希值可能会提高哈希表的性能</li>
</ul>
</blockquote>
<h4 id="equals"><a href="#equals" class="headerlink" title="equals"></a>equals</h4><blockquote>
<p>判断其他类是否和该类相等</p>
</blockquote>
<blockquote>
<p>equals方法在非空对象引用上的等价关系：</p>
<ul>
<li>自反性：对应任何非空的对象x，x.equals(x)返回true</li>
<li>对称性：对应任何非空的对象x和y，x.equals(y)返回true   y.equals(x)返回true</li>
<li>传递性：对应任何非空的对象x、y、z，如果 x.equals(y) 返回true、y.equals(z)返回true，则必然 x.equals(z) 返回true</li>
<li>一致性：对应任何非空的对象x、y，如果equals方法比较中使用的信息没有被修改时，多次调用 x.equals(y)始终返回true(或false)</li>
<li>对应任何非空的对象x，x.equals(null)返回false</li>
</ul>
</blockquote>
<blockquote>
<p><strong>注：覆盖该方法是，通常都需要一起覆盖hashCode方法。equals方法规定，equals相等的对象必须具有相等的哈希值</strong></p>
</blockquote>
<h4 id="clone"><a href="#clone" class="headerlink" title="clone"></a>clone</h4><blockquote>
<p>创建并返回该对象的副本。</p>
</blockquote>
<h5 id="为什么要用clone"><a href="#为什么要用clone" class="headerlink" title="为什么要用clone"></a>为什么要用clone</h5><blockquote>
<p>在实际编程中，常常遇到这样的情况：有一个对象A，在某一时刻，A对象中包含了一些有效值，此时需要一个和A对象完全相同的B对象，并且在此后对B对象的任何修改都不能改变A中的值，也就是A和B是完全独立的两个对象，但B的初始值是由A确定的。这种情况下就需要用到clone了</p>
</blockquote>
<h5 id="new一个对象和clone一个对象"><a href="#new一个对象和clone一个对象" class="headerlink" title="new一个对象和clone一个对象"></a>new一个对象和clone一个对象</h5><blockquote>
<p>new一个对象的基本过程：</p>
<ul>
<li>按照对象类型分配内存空间</li>
<li>调用构造函数，填充对象的各个域（对象的初始化）</li>
<li>对象初始化完成，将该对象的引用返回到外部</li>
</ul>
</blockquote>
<blockquote>
<p>clone一个对象的基本过程：</p>
<ul>
<li>按照对象类型分配内存空间</li>
<li>使用原对象中对应的各个域，填充新对象的域</li>
<li>将该对象的引用返回到外部</li>
</ul>
</blockquote>
<h5 id="假克隆（复制）"><a href="#假克隆（复制）" class="headerlink" title="假克隆（复制）"></a>假克隆（复制）</h5><blockquote>
<p>在Java中，基本数据类型可以通过 = 克隆，但引用类型不能通过该方式克隆</p>
</blockquote>
<blockquote>
<p>Java的栈中保存基本数据类型和引用变量，在堆中保存对象。= 克隆只能克隆栈中的变量，不能克隆堆中的变量</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> club.hermit.study.Collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(<span class="keyword">int</span> age, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> club.hermit.study.Collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student stu1 = <span class="keyword">new</span> Student(<span class="number">11</span>, <span class="string">"gtang11"</span>);</span><br><span class="line">        Student stu2 = stu1;</span><br><span class="line"></span><br><span class="line">        System.out.println(stu1);</span><br><span class="line">        System.out.println(stu2);</span><br><span class="line"></span><br><span class="line">        stu1.setAge(<span class="number">12</span>);</span><br><span class="line">        System.out.println(stu1.getAge());</span><br><span class="line">        System.out.println(stu2.getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">club.hermit.study.Collection.Student@5e481248</span><br><span class="line">club.hermit.study.Collection.Student@5e481248</span><br><span class="line">12</span><br><span class="line">12</span><br></pre></td></tr></table></figure>

<blockquote>
<p>通过结果可知道stu1和stu2的地址值是相同的，也就是这两个指向的是同一个对象，stu2只是stu1的引用。这种是引用的克隆。内存的情景如下：</p>
</blockquote>
<p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1596991734/copy_phd8b5.png" alt="copy"></p>
<h5 id="浅克隆"><a href="#浅克隆" class="headerlink" title="浅克隆"></a>浅克隆</h5><blockquote>
<p>浅克隆是指：克隆对象时仅克隆对象本身及对象中的基本变量，不拷贝对象包含的引用指向的对象</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> club.hermit.study.Collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> Name name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(<span class="keyword">int</span> age, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="keyword">new</span> Name(<span class="string">"sur"</span>, name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (Student)<span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String surnames;</span><br><span class="line">    <span class="keyword">private</span> String monicker;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Name</span><span class="params">(String s, String m)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.surnames = s;</span><br><span class="line">        <span class="keyword">this</span>.monicker = m;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> club.hermit.study.Collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        Student stu1 = <span class="keyword">new</span> Student(<span class="number">11</span>, <span class="string">"gtang11"</span>);</span><br><span class="line">        Student stu2 = (Student) stu1.clone();</span><br><span class="line"></span><br><span class="line">        System.out.println(stu1);</span><br><span class="line">        System.out.println(stu2);</span><br><span class="line"></span><br><span class="line">        System.out.println(stu1.name);</span><br><span class="line">        System.out.println(stu2.name);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">club.hermit.study.Collection.Student@5e481248</span><br><span class="line">club.hermit.study.Collection.Student@66d3c617</span><br><span class="line">club.hermit.study.Collection.Name@63947c6b</span><br><span class="line">club.hermit.study.Collection.Name@63947c6b</span><br></pre></td></tr></table></figure>

<blockquote>
<p>通过结果可知，stu1和stu2的地址值不同，所以他们指向的是两个对象，但stu1的name和stu2的name的地址值相同，也就是这两个name指向同一个对象。这种情况的内存情景如下：</p>
</blockquote>
<p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1596993430/q_pnivxv.png" alt="shallow"></p>
<h5 id="深克隆"><a href="#深克隆" class="headerlink" title="深克隆"></a>深克隆</h5><blockquote>
<p>深克隆是指：克隆对象时不仅克隆对象本身，还会克隆对象中包含的引用指向的所有对象</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> club.hermit.study.Collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> Name name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(<span class="keyword">int</span> age, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="keyword">new</span> Name(<span class="string">"sur"</span>, name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        Student newStu = (Student)<span class="keyword">super</span>.clone();</span><br><span class="line">        newStu.name = (Name) name.clone();</span><br><span class="line">        <span class="keyword">return</span> newStu;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String surnames;</span><br><span class="line">    <span class="keyword">private</span> String monicker;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Name</span><span class="params">(String s, String m)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.surnames = s;</span><br><span class="line">        <span class="keyword">this</span>.monicker = m;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (Name)<span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> club.hermit.study.Collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        Student stu1 = <span class="keyword">new</span> Student(<span class="number">11</span>, <span class="string">"gtang11"</span>);</span><br><span class="line">        Student stu2 = (Student) stu1.clone();</span><br><span class="line"></span><br><span class="line">        System.out.println(stu1);</span><br><span class="line">        System.out.println(stu2);</span><br><span class="line"></span><br><span class="line">        System.out.println(stu1.name);</span><br><span class="line">        System.out.println(stu2.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">club.hermit.study.Collection.Student@5e481248</span><br><span class="line">club.hermit.study.Collection.Student@66d3c617</span><br><span class="line">club.hermit.study.Collection.Name@63947c6b</span><br><span class="line">club.hermit.study.Collection.Name@2b193f2d</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果要深克隆一个对象，则这个对象要实现Cloneable接口，实现clone方法，并且在clone方法的内部，把该对象引用的其他对象也要clone一份，这就要求这个被引用的对象（如Name）也要必须实现Cloneable接口并实现clone方法。这种情况的内存情景如下：</p>
</blockquote>
<p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1596994157/s_phyure.png" alt="deep"></p>
<h4 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h4><blockquote>
<p>返回对象的字符串表示形式。建议所有子类覆盖此方法</p>
</blockquote>
<blockquote>
<p>该方法返回一个类对象实例，返回值相当于： getClass().getName() + ‘@’ + Integer.toHexString(hashCode())</p>
</blockquote>
<h4 id="notify、notifyAll"><a href="#notify、notifyAll" class="headerlink" title="notify、notifyAll"></a>notify、notifyAll</h4><blockquote>
<p>唤醒一个正在等待对象监视器的单个线程</p>
</blockquote>
<blockquote>
<p>唤醒正在等待对象监视器的所有线程</p>
</blockquote>
<h4 id="wait"><a href="#wait" class="headerlink" title="wait"></a>wait</h4><blockquote>
<p>使当前线程等待，知道另一个线程调用此对象的notify()方法或notifyAll()方法，也可指定过期时间</p>
</blockquote>
<h4 id="finalize"><a href="#finalize" class="headerlink" title="finalize"></a>finalize</h4><blockquote>
<p>当垃圾回收器确定不再有对该对象的引用时，GC在对象上调用该对象此方法</p>
<p>当子类需要处理系统资源或者执行其他清理工作时需重写该方法</p>
</blockquote>
<blockquote>
<p>对于任何对象，JVM从不调用多次finalize方法</p>
</blockquote>
<h3 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h3><blockquote>
<p>Collection是集合的根接口，它继承了 Iterable 接口。定义了集合的基本操作方式，下面是Collection的继承类：</p>
</blockquote>
<p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1597159182/Collection_m8fain.png" alt="collection"></p>
<blockquote>
<p>Collection中定义的方法主要分为：</p>
<ul>
<li>查询操作方法</li>
<li>修改操作方法</li>
<li>批量操作方法</li>
<li>比较和散列方法</li>
</ul>
</blockquote>
<h4 id="查询操作方法"><a href="#查询操作方法" class="headerlink" title="查询操作方法"></a>查询操作方法</h4><table>
<thead>
<tr>
<th>方法</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>size()</td>
<td>返回此集合中的元素数</td>
</tr>
<tr>
<td>isEmpty()</td>
<td>如果此集合不好办元素，则返回true</td>
</tr>
<tr>
<td>contains(Object)</td>
<td>如果此集合包含指定的元素，则返回true</td>
</tr>
<tr>
<td>iterator()</td>
<td>返回此集合元素中的迭代器</td>
</tr>
<tr>
<td>toArray(T[])</td>
<td>返回包含此集合中所有元素的数组，返回的数组的运行时类型是指定数组的运行时类型</td>
</tr>
</tbody></table>
<h4 id="修改操作方法"><a href="#修改操作方法" class="headerlink" title="修改操作方法"></a>修改操作方法</h4><table>
<thead>
<tr>
<th>方法</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>add(E)</td>
<td>确保此集合包含指定的元素</td>
</tr>
<tr>
<td>remove(Object)</td>
<td>从该集合中删除指定元素的单个实例</td>
</tr>
</tbody></table>
<h4 id="批量操作方法"><a href="#批量操作方法" class="headerlink" title="批量操作方法"></a>批量操作方法</h4><table>
<thead>
<tr>
<th>方法</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>containsAll(Collection&lt;?&gt;)</td>
<td>如果此集合包含指定集合中的所有元素，则返回true</td>
</tr>
<tr>
<td>addAll(Collection&lt;? extend E&gt;)</td>
<td>将指定集合中的所有元素添加到此集合</td>
</tr>
<tr>
<td>removeAll(Collection&lt;?&gt;)</td>
<td>将指定集合中的所有元素从此集合中移除</td>
</tr>
<tr>
<td>removeIf(Predicate&lt;? super E&gt; filter)</td>
<td>删除满足给定谓词的此集合的所有元素</td>
</tr>
<tr>
<td>retainAll(Collection&lt;?&gt;)</td>
<td>仅保留此集合中包含在指定集合中的元素</td>
</tr>
<tr>
<td>clear()</td>
<td>从此集合中删除所有元素</td>
</tr>
</tbody></table>
<h4 id="比较和散列方法"><a href="#比较和散列方法" class="headerlink" title="比较和散列方法"></a>比较和散列方法</h4><table>
<thead>
<tr>
<th>方法</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>equals(Object o)</td>
<td>将指定的对象与此集合进行比较</td>
</tr>
<tr>
<td>hashCode()</td>
<td>返回此集合的哈希值</td>
</tr>
<tr>
<td>Spliterator()</td>
<td>创建一个Spliterator在这个集合中的元素</td>
</tr>
<tr>
<td>stream()</td>
<td>返回以此集合作为源的顺序stream</td>
</tr>
</tbody></table>
<h4 id="可选操作的方法"><a href="#可选操作的方法" class="headerlink" title="可选操作的方法"></a>可选操作的方法</h4><blockquote>
<p>在Collection的源码中注释中，有部分 标注为 optional operation 的方法，如add()方法、clear()方法：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Removes all of the elements from this collection (optional operation).</span></span><br><span class="line"><span class="comment"> * The collection will be empty after this method returns.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> UnsupportedOperationException if the &lt;tt&gt;clear&lt;/tt&gt; operation</span></span><br><span class="line"><span class="comment"> *         is not supported by this collection</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在Collection接口中包含一些“具有破坏性”的方法，即通过调用这些方法可以修改集合的这类方法。如果集合不支持这类方法时，需要抛出 UnsupportedOperationException 异常。</p>
</blockquote>
<blockquote>
<p>接口的目的 就是为了让实现类实现这个接口中的方法，但这样就出现一种情况：接口定义了很多方法，但部分子类并不需要其中的一些方法，比如在不可变的集合中，add、addAll、remove这类方法就是冗余的，而且会给类的使用者带来困扰！！所以就需要抛出 UnsupportedOperationException 异常。</p>
</blockquote>
<blockquote>
<p>在JDK中的实现了Collection接口的AbstractCollection抽象类中，就对这类可选操作的方法抛出了异常。</p>
</blockquote>
<h4 id="default方法"><a href="#default方法" class="headerlink" title="default方法"></a>default方法</h4><blockquote>
<p>在JDK1.8之前，接口中只能声明方法，具体的实现只能在实现类中的。为了支持lambda表达式，JDK1.8引入了default关键字。</p>
<p>在JDK1.8之后，接口中被声明为default的方法也可以有具体实现了。</p>
</blockquote>
<blockquote>
<p>Collection中的spliterator、stream、parallelStream都被声明为default以支持lambda表达式。</p>
</blockquote>
<h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><blockquote>
<p>List接口继承了Collection接口，在Collection接口方法的基础上扩展了一些方法，类继承关系如下：</p>
</blockquote>
<p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1597164674/List_t99r85.png" alt="list"></p>
<blockquote>
<p>List接口在Collection接口的基础上，又增加了以下方法：</p>
<ul>
<li>批量操作方法（新增2个方法）</li>
<li>位置访问操作方法</li>
<li>搜索操作方法</li>
<li>List迭代器方法</li>
<li>查看操作方法</li>
</ul>
</blockquote>
<p>####批量操作方法</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>replaceAll(UnaryOperator<E>)</td>
<td>将该列表的每个元素替换为将该运算符应用于该元素的结果</td>
</tr>
<tr>
<td>sort(Comparator&lt;? super E&gt;)</td>
<td>按照指定的Comparator给此list排序</td>
</tr>
</tbody></table>
<h5 id="replaceAll"><a href="#replaceAll" class="headerlink" title="replaceAll"></a>replaceAll</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">replaceAll</span><span class="params">(UnaryOperator&lt;E&gt; operator)</span> </span>&#123;</span><br><span class="line">    Objects.requireNonNull(operator);</span><br><span class="line">    <span class="keyword">final</span> ListIterator&lt;E&gt; li = <span class="keyword">this</span>.listIterator();</span><br><span class="line">    <span class="keyword">while</span> (li.hasNext()) &#123;</span><br><span class="line">        li.set(operator.apply(li.next()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparator&lt;? <span class="keyword">super</span> E&gt; c)</span> </span>&#123;</span><br><span class="line">    Object[] a = <span class="keyword">this</span>.toArray();</span><br><span class="line">    Arrays.sort(a, (Comparator) c);</span><br><span class="line">    ListIterator&lt;E&gt; i = <span class="keyword">this</span>.listIterator();</span><br><span class="line">    <span class="keyword">for</span> (Object e : a) &#123;</span><br><span class="line">        i.next();</span><br><span class="line">        i.set((E) e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="位置访问操作方法"><a href="#位置访问操作方法" class="headerlink" title="位置访问操作方法"></a>位置访问操作方法</h4><table>
<thead>
<tr>
<th>方法</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>get(int)</td>
<td>返回此list中指定位置的元素</td>
</tr>
<tr>
<td>set(int, E)</td>
<td>用指定的元素替换此list中指定位置的元素</td>
</tr>
<tr>
<td>add(int, E)</td>
<td>将指定的元素插入到此list中的指定位置</td>
</tr>
<tr>
<td>remove(int)</td>
<td>移除该list中指定位置的元素</td>
</tr>
</tbody></table>
<h4 id="搜索操作方法"><a href="#搜索操作方法" class="headerlink" title="搜索操作方法"></a>搜索操作方法</h4><table>
<thead>
<tr>
<th>方法</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>indexOf(Object）</td>
<td>返回此list中指定元素第一次出现的索引值，不如该list中不包含该元素，返回-1</td>
</tr>
<tr>
<td>lastIndexOf(Object）</td>
<td>返回此list中指定元素最后一次出现的索引值，不如该list中不包含该元素，返回-1</td>
</tr>
</tbody></table>
<h4 id="List迭代器操作方法"><a href="#List迭代器操作方法" class="headerlink" title="List迭代器操作方法"></a>List迭代器操作方法</h4><table>
<thead>
<tr>
<th>方法</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>listIterator()</td>
<td>返回列表中的列表迭代器</td>
</tr>
<tr>
<td>listIterator(int)</td>
<td>从列表中的指定位置开始，返回列表中的元素的列表迭代器</td>
</tr>
</tbody></table>
<h4 id="查看操作方法"><a href="#查看操作方法" class="headerlink" title="查看操作方法"></a>查看操作方法</h4><table>
<thead>
<tr>
<th>方法</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>subList(int fromIndex,int toIndex)</td>
<td>返回此列表中的指定的fromIndex到toIndex之间的元素</td>
</tr>
<tr>
<td>spliterator()</td>
<td>在此列表的元素上创建一个Spliterator</td>
</tr>
</tbody></table>
<h4 id="list的特点"><a href="#list的特点" class="headerlink" title="list的特点"></a>list的特点</h4><blockquote>
<p>list接口有以下特点：</p>
<ul>
<li>元素有序</li>
<li>允许插入多个null元素</li>
<li>元素可重复</li>
</ul>
</blockquote>
<h5 id="list的哪些设计使得list接口有这些特点"><a href="#list的哪些设计使得list接口有这些特点" class="headerlink" title="list的哪些设计使得list接口有这些特点"></a>list的哪些设计使得list接口有这些特点</h5><blockquote>
<p>个人对这个问题的认识：</p>
<p>面向接口编程，接口只是一个规范，实现类是接口的具体实现而已。具体到list，Java的作者只是对list接口做了上面这些特点的规定而已，具体遵不遵守完全看个人（但Java系列则一定是严格遵守的），也就是你自己写一个实现了list接口的类，这个类add、remove的时候都是随机的也没问任何问题的</p>
</blockquote>
<h3 id="Map-1"><a href="#Map-1" class="headerlink" title="Map"></a>Map</h3><blockquote>
<p>待补充</p>
</blockquote>
]]></content>
      <categories>
        <category>源码分析</category>
      </categories>
      <tags>
        <tag>List</tag>
        <tag>Object</tag>
        <tag>假克隆</tag>
        <tag>深克隆</tag>
        <tag>浅克隆</tag>
        <tag>Collection</tag>
        <tag>Map</tag>
      </tags>
  </entry>
  <entry>
    <title>代理模式</title>
    <url>/2020/07/26/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="WHAT"><a href="#WHAT" class="headerlink" title="WHAT"></a>WHAT</h2><h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><blockquote>
<p>代理模式是一种常见的设计模式，代理模式为另一个对象提供一个替身或占位符以控制对这个对象的访问</p>
</blockquote>
<h3 id="代理模式的用途"><a href="#代理模式的用途" class="headerlink" title="代理模式的用途"></a>代理模式的用途</h3><blockquote>
<p>代理模式为其他对象提供了一种代理以控制对这个对象的访问。在某些情况下，一个客户不想或者不能直接引用另一个对象，而代理对象可以在客户端和目标对象之间起到中介的作用</p>
</blockquote>
<blockquote>
<p>代理模式的应用场景主要有：</p>
<ul>
<li>Spring AOP </li>
<li>RPC</li>
<li>Java注解</li>
<li>性能监控</li>
</ul>
</blockquote>
<h3 id="代理模式的基本概念"><a href="#代理模式的基本概念" class="headerlink" title="代理模式的基本概念"></a>代理模式的基本概念</h3><h4 id="subject"><a href="#subject" class="headerlink" title="subject"></a>subject</h4><blockquote>
<p>抽象主题角色。定义代理类和真实主题的公共对外方法，也是代理类代理真实主题的方法</p>
</blockquote>
<h4 id="realsubject"><a href="#realsubject" class="headerlink" title="realsubject"></a>realsubject</h4><blockquote>
<p>真实主题角色。真正实现业务逻辑的类</p>
</blockquote>
<h4 id="proxy"><a href="#proxy" class="headerlink" title="proxy"></a>proxy</h4><blockquote>
<p>代理主题角色。用来代理和封装真实的主题</p>
</blockquote>
<h4 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@startuml</span><br><span class="line">left to right direction</span><br><span class="line"></span><br><span class="line">class client &#123;&#125;</span><br><span class="line">note left: 客户端</span><br><span class="line"></span><br><span class="line">interface Subject &#123;</span><br><span class="line">    + request()</span><br><span class="line">&#125;</span><br><span class="line">note top: 抽象主题角色</span><br><span class="line"></span><br><span class="line">class Proxy &#123;</span><br><span class="line">    - before()</span><br><span class="line">    + request()</span><br><span class="line">    - after()</span><br><span class="line">&#125;</span><br><span class="line">note left: 代理主题类</span><br><span class="line"></span><br><span class="line">class RealSubject &#123;</span><br><span class="line">    + request()</span><br><span class="line">&#125;</span><br><span class="line">note right: 真实主题类</span><br><span class="line"></span><br><span class="line">Subject &lt;|- RealSubject</span><br><span class="line">Subject &lt;|- Proxy</span><br><span class="line">Proxy --&gt; RealSubject: 调用真实主题的request方法</span><br><span class="line">client ..&gt; Subject</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure>

<h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><h4 id="按场景分类"><a href="#按场景分类" class="headerlink" title="按场景分类"></a>按场景分类</h4><blockquote>
<ul>
<li>远程代理</li>
<li>虚拟代理</li>
<li>Copy-on-Write代理</li>
<li>保护代理</li>
<li>Cache代理</li>
<li>防火墙代理</li>
<li>同步化代理</li>
<li>智能引用代理</li>
</ul>
</blockquote>
<h4 id="按字节码创建时机分类"><a href="#按字节码创建时机分类" class="headerlink" title="按字节码创建时机分类"></a>按字节码创建时机分类</h4><h5 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h5><blockquote>
<p>在程序运行前就已经存在代理类的字节码文件，代理类和真实主题角色的关系在程序运行前就确定了</p>
</blockquote>
<h5 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h5><blockquote>
<p>动态代理的代码不用程序员写，也就是程序编译后，并没有代理类的.class文件；代理类是在程序运行期间，由JVM根据反射机制动态的生成的</p>
</blockquote>
<h2 id="HOW"><a href="#HOW" class="headerlink" title="HOW"></a>HOW</h2><h3 id="静态代理实现"><a href="#静态代理实现" class="headerlink" title="静态代理实现"></a>静态代理实现</h3><h4 id="Subject"><a href="#Subject" class="headerlink" title="Subject"></a>Subject</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> club.hermit.study.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">request</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="RealSubject"><a href="#RealSubject" class="headerlink" title="RealSubject"></a>RealSubject</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> club.hermit.study.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RealSubject</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"real subject"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> club.hermit.study.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Subject subject;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Proxy</span><span class="params">(Subject subject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.subject = subject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        before();</span><br><span class="line">        subject.request();</span><br><span class="line">        after();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"proxy before"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"proxy after"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> club.hermit.study.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Subject proxy = <span class="keyword">new</span> Proxy(<span class="keyword">new</span> RealSubject());</span><br><span class="line">        proxy.request();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">proxy before</span><br><span class="line">real subject</span><br><span class="line">proxy after</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code 0</span><br></pre></td></tr></table></figure>

<h3 id="动态代理实现"><a href="#动态代理实现" class="headerlink" title="动态代理实现"></a>动态代理实现</h3><h4 id="JDK动态代理实现"><a href="#JDK动态代理实现" class="headerlink" title="JDK动态代理实现"></a>JDK动态代理实现</h4><h5 id="Subject-1"><a href="#Subject-1" class="headerlink" title="Subject"></a>Subject</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> club.hermit.study.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">request</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="RealSubject-1"><a href="#RealSubject-1" class="headerlink" title="RealSubject"></a>RealSubject</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> club.hermit.study.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RealSubject</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"real subject"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="JdkProxyHandler"><a href="#JdkProxyHandler" class="headerlink" title="JdkProxyHandler"></a>JdkProxyHandler</h5><blockquote>
<p>该类实现了InvocationHandler接口，此接口在后面的原理中详解</p>
<p>该类只是一个调用逻辑处理类，在该类的invode方法中，编写动态生成的Proxy中的X方法的处理逻辑（X方法也就是Proxy实现了Subject类中那个方法，此处就是request方法）</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> club.hermit.study.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdkProxyHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Object target; <span class="comment">// 被代理的对象，也就是上面的RealSubject类</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JdkProxyHandler</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">        before();</span><br><span class="line">        Object res = method.invoke(target, args);</span><br><span class="line">        after();</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"jdk proxy handler before"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"jdk proxy handler after"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="JdkProxyClient"><a href="#JdkProxyClient" class="headerlink" title="JdkProxyClient"></a>JdkProxyClient</h5><blockquote>
<p>在该Client类中，动态生成jdkProxy代理类是通过Proxy的newProxyInstance方法（注：该处的Proxy是java.lang.reflect.Proxy类）</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> club.hermit.study.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdkProxyClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        RealSubject realSubject = <span class="keyword">new</span> RealSubject();</span><br><span class="line">        ClassLoader classLoader = realSubject.getClass().getClassLoader();</span><br><span class="line">        Class[] interfaces = realSubject.getClass().getInterfaces();<span class="comment">// 获取被代理类实现的所有接口</span></span><br><span class="line">        InvocationHandler handler = <span class="keyword">new</span> JdkProxyHandler(realSubject);</span><br><span class="line">        <span class="comment">//此处动态创建代理类：</span></span><br><span class="line">        <span class="comment">// 1. JDK会根据传入的参数动态的在内存中创建和.class文件等同的字节码</span></span><br><span class="line">        <span class="comment">// 2. 然后根据创建的.class字节码在内存中生成一个代表该类的 java.lang.Class 对象</span></span><br><span class="line">        <span class="comment">// 3. 通过newProxyInstance创建实例</span></span><br><span class="line">        Subject jdkProxy = (Subject) Proxy.newProxyInstance(classLoader, interfaces, handler);</span><br><span class="line">        jdkProxy.request();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="输出结果-1"><a href="#输出结果-1" class="headerlink" title="输出结果"></a>输出结果</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">jdk proxy handler before</span><br><span class="line">real subject</span><br><span class="line">jdk proxy handler after</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code 0</span><br></pre></td></tr></table></figure>

<h4 id="CGLIB动态代理实现"><a href="#CGLIB动态代理实现" class="headerlink" title="CGLIB动态代理实现"></a>CGLIB动态代理实现</h4><blockquote>
<p>Maven中引入cglib相关包：</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="Subject-2"><a href="#Subject-2" class="headerlink" title="Subject"></a>Subject</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> club.hermit.study.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">request</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="RealSubject-2"><a href="#RealSubject-2" class="headerlink" title="RealSubject"></a>RealSubject</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> club.hermit.study.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RealSubject</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"real subject"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="CglibProxyInterceptor"><a href="#CglibProxyInterceptor" class="headerlink" title="CglibProxyInterceptor"></a>CglibProxyInterceptor</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> club.hermit.study.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodProxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CglibProxyInterceptor</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        before();</span><br><span class="line">        Object res = methodProxy.invokeSuper(o, objects);</span><br><span class="line">        after();</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"cglib proxy interceptor before"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"cglib proxy interceptor after"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="CglibProxyClient"><a href="#CglibProxyClient" class="headerlink" title="CglibProxyClient"></a>CglibProxyClient</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> club.hermit.study.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.Enhancer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CglibProxyClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        CglibProxyInterceptor cglibProxyInterceptor = <span class="keyword">new</span> CglibProxyInterceptor();</span><br><span class="line">        Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">        enhancer.setSuperclass(RealSubject<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        enhancer.setCallback(cglibProxyInterceptor);</span><br><span class="line"></span><br><span class="line">        Subject proxy = (Subject) enhancer.create();<span class="comment">//创建代理类</span></span><br><span class="line">        proxy.request();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="输出结果-2"><a href="#输出结果-2" class="headerlink" title="输出结果"></a>输出结果</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cglib proxy interceptor before</span><br><span class="line">real subject</span><br><span class="line">cglib proxy interceptor after</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code 0</span><br></pre></td></tr></table></figure>

<h2 id="WHY"><a href="#WHY" class="headerlink" title="WHY"></a>WHY</h2><h3 id="静态代理实现原理"><a href="#静态代理实现原理" class="headerlink" title="静态代理实现原理"></a>静态代理实现原理</h3><blockquote>
<p>静态代理的实现体现了 面向对象中的 面向interface编程！</p>
</blockquote>
<h3 id="静态代理的缺陷"><a href="#静态代理的缺陷" class="headerlink" title="静态代理的缺陷"></a>静态代理的缺陷</h3><blockquote>
<p>静态代理在复杂业务场景下并不适用，如：</p>
<ul>
<li>当Proxy类中要代理多种Subject类时，静态代理的实现方式会使Proxy类变的特别复杂，因为Proxy中要实现各种代理的各种Subject接口中声明的所有方法</li>
<li>当要增、删、改Subject类中方法时，Proxy类也要跟着改动</li>
</ul>
<p>而动态代理刚好解决了以上问题</p>
</blockquote>
<h3 id="动态代理实现原理"><a href="#动态代理实现原理" class="headerlink" title="动态代理实现原理"></a>动态代理实现原理</h3><blockquote>
<p>在<a href="[https://gtang94.github.io/2020/07/11/Java%E7%B1%BB%E5%9E%8B%E4%BF%A1%E6%81%AF/](https://gtang94.github.io/2020/07/11/Java类型信息/)">类加载机制</a>的加载阶段中，首先是通过类的全限定名来获取该类的二进制字节流(.class字节码)，此处的获取途径就有很多：</p>
<ul>
<li>从ZIP包获取</li>
<li>从网络中获取，如Applet</li>
<li>运行时计算生成。这中途径使用最多的是动态代理技术，在 java.lang.reflect.Proxy 类中，就是用了 ProxyGenerator.generateProxyClass 来为特定接口生成形式为 *$Proxy 的代理类的二进制字节流</li>
<li>由其他文件生成，如由JSP文件生成对应的Class类</li>
<li>从DB中获取</li>
</ul>
</blockquote>
<blockquote>
<p>动态代理就是根据接口或者RealSubject对象，由程序计算得到Proxy类的字节码，然后将该Proxy加载到JVM中使用的</p>
<p>那程序是怎么计算得到Proxy类字节码的呢？？</p>
<p>Java中有许多<a href="https://java-source.net/open-source/bytecode-libraries" target="_blank" rel="noopener">操作字节码的类库</a>，通常是通过这些类库来实现上面的计算Proxy字节码的。最常用的方式有以下两种：</p>
<ul>
<li>通过实现接口的方式： JDK动态代理</li>
<li>通过继承类的方式：CGLIB动态代理</li>
</ul>
</blockquote>
<h4 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h4><blockquote>
<p>JDK动态代理主要涉及 java.lang.reflect.Proxy 和 java.lang.reflect.InvocationHandler 类</p>
</blockquote>
<h5 id="java-lang-reflect-InvocationHandler"><a href="#java-lang-reflect-InvocationHandler" class="headerlink" title="java.lang.reflect.InvocationHandler"></a>java.lang.reflect.InvocationHandler</h5><blockquote>
<p>InvocationHandler 是由代理实例的调用处理程序实现的接口</p>
<p>该方法主要有invoke方法，用来处理代理实例上的方法调用并返回结果的</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> java.lang.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> Throwable</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="java-lang-reflect-Proxy"><a href="#java-lang-reflect-Proxy" class="headerlink" title="java.lang.reflect.Proxy"></a>java.lang.reflect.Proxy</h5><blockquote>
<p>该类提供了创建动态代理类和实体的静态方法，它也是由这些方法创建的所有动态代理类的超类</p>
</blockquote>
<blockquote>
<p>getInvocationHandler() 方法用于获取指定代理对象所关联的调用处理器</p>
</blockquote>
<blockquote>
<p>getProxyClass() 方法用于返回指定接口的代理类</p>
</blockquote>
<blockquote>
<p>newProxyInstance() 方法用于构造实现指定接口的代理类的一个新实例，所有方法会调用给定处理器对象的invoke方法</p>
</blockquote>
<blockquote>
<p>isProxyClass() 该方法用于返回cl类是否为一个代理类</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@startuml</span><br><span class="line">class Proxy &#123;</span><br><span class="line">    - serialVersionUID</span><br><span class="line">    - constructorParams</span><br><span class="line">    - proxyClassCache</span><br><span class="line">    # h</span><br><span class="line">    - key0</span><br><span class="line"></span><br><span class="line">    + getProxyClass(ClassLoader, Class&lt;?&gt;...)</span><br><span class="line">    - checkProxyAccess(Class&lt;?&gt;, ClassLoader, Class&lt;?&gt;...)</span><br><span class="line">    - getProxyClass0(ClassLoader, Class&lt;?&gt;...)</span><br><span class="line">    + newProxyInstance(ClassLoader, Class&lt;?&gt;[], InvocationHandler)</span><br><span class="line">    - checkNewProxyPermission(Class&lt;?&gt;, Class&lt;?&gt;)</span><br><span class="line">    + isProxyClass(Class&lt;?&gt;)</span><br><span class="line">    + getInvocationHandler(Object)</span><br><span class="line">    - defineClass0(ClassLoader, String, byte[], int, int)</span><br><span class="line">&#125;</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure>

<h5 id="持久化JDK动态生成的Proxy类"><a href="#持久化JDK动态生成的Proxy类" class="headerlink" title="持久化JDK动态生成的Proxy类"></a>持久化JDK动态生成的Proxy类</h5><blockquote>
<p>改写JdkProxyClient类，将生成的Proxy持久化到硬盘中</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> club.hermit.study.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sun.misc.ProxyGenerator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdkProxyClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        RealSubject realSubject = <span class="keyword">new</span> RealSubject();</span><br><span class="line">        ClassLoader classLoader = realSubject.getClass().getClassLoader();</span><br><span class="line">        Class[] interfaces = realSubject.getClass().getInterfaces();</span><br><span class="line">        InvocationHandler handler = <span class="keyword">new</span> JdkProxyHandler(realSubject);</span><br><span class="line">        Subject proxy = (Subject) Proxy.newProxyInstance(classLoader, interfaces, handler);</span><br><span class="line">        proxy.request();</span><br><span class="line">        saveJdkProxy(realSubject.getClass(), <span class="string">"Proxy"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">saveJdkProxy</span><span class="params">(Class clz, String proxyName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] file = ProxyGenerator.generateProxyClass(proxyName, clz.getInterfaces());</span><br><span class="line">        String path = clz.getResource(<span class="string">"."</span>).getPath();</span><br><span class="line">        FileOutputStream out = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            out = <span class="keyword">new</span> FileOutputStream(path + proxyName + <span class="string">".class"</span>);</span><br><span class="line">            out.write(file);</span><br><span class="line">            out.flush();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                out.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>动态生成的代理类Proxy如下：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> club.hermit.study.proxy.Subject;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.UndeclaredThrowableException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">extends</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">reflect</span>.<span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m1;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m2;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m3;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m0;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Proxy</span><span class="params">(InvocationHandler var1)</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(var1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object var1)</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Boolean)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m1, <span class="keyword">new</span> Object[]&#123;var1&#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var3;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var4) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var4);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (String)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m2, (Object[])<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m3, (Object[])<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Integer)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m0, (Object[])<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            m1 = Class.forName(<span class="string">"java.lang.Object"</span>).getMethod(<span class="string">"equals"</span>, Class.forName(<span class="string">"java.lang.Object"</span>));</span><br><span class="line">            m2 = Class.forName(<span class="string">"java.lang.Object"</span>).getMethod(<span class="string">"toString"</span>);</span><br><span class="line">            m3 = Class.forName(<span class="string">"club.hermit.study.proxy.Subject"</span>).getMethod(<span class="string">"request"</span>);</span><br><span class="line">            m0 = Class.forName(<span class="string">"java.lang.Object"</span>).getMethod(<span class="string">"hashCode"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchMethodError(var2.getMessage());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoClassDefFoundError(var3.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>从上面动态生成的Proxy可以看到：</p>
<ul>
<li>该类生成了equals、toString、hashCode、request方法</li>
<li>该类继承了java.lang.reflect.Proxy 类，实现了Subject类</li>
<li>该类的参数h是Proxy类中的InvocationHandler接口的实例变量，并且在request中，h调用了InvocationHandler接口的invode方法，也就是调用了上面手动实现的JdkProxyHandler接口中的invoke方法</li>
<li>该类中的m3是静态代码块中通过反射获取到的Subject接口中的request方法</li>
</ul>
</blockquote>
<h5 id="调用时序图"><a href="#调用时序图" class="headerlink" title="调用时序图"></a>调用时序图</h5><blockquote>
<p>所以，整个类的调用时序图如下：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@startuml</span><br><span class="line"></span><br><span class="line">class JdkProxyClient &#123;&#125;</span><br><span class="line">class JdkProxy &#123;</span><br><span class="line">    - m0</span><br><span class="line">    - m1</span><br><span class="line">    - m2</span><br><span class="line">    - m3</span><br><span class="line">    + equals()</span><br><span class="line">    + hashCode()</span><br><span class="line">    + toString()</span><br><span class="line">    + request()</span><br><span class="line">&#125;</span><br><span class="line">class JdkProxyHandler &#123;</span><br><span class="line">    ~ target</span><br><span class="line">    + invoke()</span><br><span class="line">    - before</span><br><span class="line">    - after</span><br><span class="line">&#125;</span><br><span class="line">class RealSubject &#123;</span><br><span class="line">    ~ request()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">JdkProxyClient -&gt; JdkProxy: request()</span><br><span class="line">JdkProxy -&gt; JdkProxyHandler: h.invode()</span><br><span class="line">JdkProxyHandler -&gt; RealSubject: method.invoke()</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure>



<h4 id="CGLIB动态代理"><a href="#CGLIB动态代理" class="headerlink" title="CGLIB动态代理"></a>CGLIB动态代理</h4><blockquote>
<p>GBLIB创建动态代理类的模式是：</p>
<ul>
<li>查找目标类上的所有非final的public类型的方法定义</li>
<li>将这些方法的定义转换成字节码</li>
<li>将组成的字节码转换成响应的代理的class对象</li>
<li>实现MethodInterceptor接口，用来处理对代理类上所有方法的请求</li>
</ul>
</blockquote>
<h4 id="JDK和CGLIB实现动态代理的对比"><a href="#JDK和CGLIB实现动态代理的对比" class="headerlink" title="JDK和CGLIB实现动态代理的对比"></a>JDK和CGLIB实现动态代理的对比</h4><table>
<thead>
<tr>
<th>代理方式</th>
<th>实现</th>
<th>优点</th>
</tr>
</thead>
<tbody><tr>
<td>JDK</td>
<td>实现被代理对象的接口</td>
<td>1. 最小依赖关系，减少依赖意味着简化开发和维护，JDK本身支持，比CGLIB更可靠；2. 平滑进行JDK版本升级，而字节码类库通常需要进行更新以保证在新版本的Java上能够正常使用；3.代码实现简单</td>
</tr>
<tr>
<td>CGLIB</td>
<td>继承被代理类</td>
<td>1. 无需实现接口，达到代码类无侵入；2. 值操作我们关系的类，而不必为其他相关类增加工作量；3. 高性能</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>Java动态代理</tag>
        <tag>Java静态代理</tag>
        <tag>JDK动态代理</tag>
        <tag>CGLIB动态代理</tag>
      </tags>
  </entry>
  <entry>
    <title>Java注解</title>
    <url>/2020/07/25/Java%E6%B3%A8%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="WHAT"><a href="#WHAT" class="headerlink" title="WHAT"></a>WHAT</h2><h3 id="注解是什么"><a href="#注解是什么" class="headerlink" title="注解是什么"></a>注解是什么</h3><blockquote>
<p>Java注解又叫Java标注，是Java5.0开始支持加入源代码的特殊语法元数据</p>
</blockquote>
<blockquote>
<p>Java语言中的类、方法、变量、参数、包都可以被标注，Java标注可以通过反射获取标注内容，在编译生成class文件时，可以嵌入到字节码中，JVM可以保留标注的内容，在运行时可以获取到标注内容</p>
</blockquote>
<h3 id="注解应用场景"><a href="#注解应用场景" class="headerlink" title="注解应用场景"></a>注解应用场景</h3><blockquote>
<ul>
<li>生成文档，Java最早提供的注解</li>
<li>跟踪代码依赖，替代配置文件，Spring中大量使用注解</li>
<li>参数校验 / 拦截器 等等</li>
</ul>
</blockquote>
<blockquote>
<p>自定义注解一般有两种用法：</p>
<ul>
<li>自定义注解处理器</li>
<li>配合Spring等框架使用</li>
</ul>
</blockquote>
<h3 id="JDK内置注解"><a href="#JDK内置注解" class="headerlink" title="JDK内置注解"></a>JDK内置注解</h3><blockquote>
<p>Java定义的注解一共有7个，3个在 java.lang 中，4个在 java.lang.annotation 中（JDK7之前）</p>
</blockquote>
<h4 id="作用在代码中的注解"><a href="#作用在代码中的注解" class="headerlink" title="作用在代码中的注解"></a>作用在代码中的注解</h4><h5 id="Override"><a href="#Override" class="headerlink" title="@Override"></a>@Override</h5><blockquote>
<p>检查该方法是否是重写方法</p>
<p>如果发现其父类，或者是引用的接口中并没有该方法时，会报编译错误</p>
</blockquote>
<h5 id="Deprecated"><a href="#Deprecated" class="headerlink" title="@Deprecated"></a>@Deprecated</h5><blockquote>
<p>标记过时方法</p>
<p>如果使用了注解为它的元素，编译器就会发出警告消息</p>
</blockquote>
<h5 id="Suppress-Warnings"><a href="#Suppress-Warnings" class="headerlink" title="@Suppress Warnings"></a>@Suppress Warnings</h5><blockquote>
<p>指示编译器去忽略注解中声明的警告</p>
</blockquote>
<h4 id="作用在注解上的注解（也叫-元注解）"><a href="#作用在注解上的注解（也叫-元注解）" class="headerlink" title="作用在注解上的注解（也叫 元注解）"></a>作用在注解上的注解（也叫 元注解）</h4><h5 id="Target"><a href="#Target" class="headerlink" title="@Target"></a>@Target</h5><blockquote>
<p>描述了该注解可以用于什么地方，它的值在 java.lang.annotation.ElementType 中定义</p>
</blockquote>
<blockquote>
<p>ElementType的参数包括：</p>
<ul>
<li>CONSTRUCTOR：声明构造器</li>
<li>FIELD：声明域（包括enum实例）</li>
<li>LOCAL_VARIABLE：局部变量声明</li>
<li>METHOD：声明方法</li>
<li>PACKAGE：声明包</li>
<li>PARAMETER：声明参数</li>
<li>TYPE：类、接口（包括注解类型）或enum的声明</li>
</ul>
</blockquote>
<h5 id="Retention"><a href="#Retention" class="headerlink" title="@Retention"></a>@Retention</h5><blockquote>
<p>描述了在什么级别保存该注解信息（注解的保留时间范围），值在 java.lang.annotatioin.RetentionPolicy中定义</p>
</blockquote>
<blockquote>
<p>RetentionPolicy参数包括：</p>
<ul>
<li>SOURCE：在源文件中保留，编译时该注解就会被忽略</li>
<li>CLASS：跟随源文件编译到.class文件中，运行时就会被忽略</li>
<li>RUNTIME：在运行时候也保留，因此可通过反射机制读取注解的信息</li>
</ul>
</blockquote>
<h5 id="Documented"><a href="#Documented" class="headerlink" title="@Documented"></a>@Documented</h5><blockquote>
<p>将此注解包含在Javadoc中</p>
</blockquote>
<h5 id="Inherited"><a href="#Inherited" class="headerlink" title="@Inherited"></a>@Inherited</h5><blockquote>
<p>允许子类继承父类中的注解</p>
</blockquote>
<h4 id="Java7新增的注解"><a href="#Java7新增的注解" class="headerlink" title="Java7新增的注解"></a>Java7新增的注解</h4><h5 id="SafeVarargs"><a href="#SafeVarargs" class="headerlink" title="@SafeVarargs"></a>@SafeVarargs</h5><blockquote>
<p>Java 7开始支持，忽略任何使用参数为泛型变量的方法或构造函数调用产生的警告</p>
</blockquote>
<h5 id="FunctionalInterface"><a href="#FunctionalInterface" class="headerlink" title="@FunctionalInterface"></a>@FunctionalInterface</h5><blockquote>
<p>Java 8开始支持，标识一个匿名函数或函数式接口</p>
</blockquote>
<h5 id="Repeatable"><a href="#Repeatable" class="headerlink" title="@Repeatable"></a>@Repeatable</h5><blockquote>
<p>Java 8开始支持，标识某注解可以在同一个声明上使用多次</p>
</blockquote>
<h2 id="注解用法"><a href="#注解用法" class="headerlink" title="注解用法"></a>注解用法</h2><h3 id="自定义注解规范"><a href="#自定义注解规范" class="headerlink" title="自定义注解规范"></a>自定义注解规范</h3><blockquote>
<p>注释声明用 @interface，且</p>
<ul>
<li>该声明会自动继承 java.lang.annotation.Annotation 接口</li>
<li>用该声明后不能再继承其他类或接口</li>
</ul>
<p>声明格式为：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> 注解名 &#123;</span><br><span class="line">  修饰符 返回值 属性名() 默认值</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>修饰符 ：修饰符只能用public或default</p>
</blockquote>
<blockquote>
<p>返回值：返回值只能是</p>
<ul>
<li>Java基本数据类型(byte、char、short、int、float、double、long、boolean)</li>
<li>String类型</li>
<li>Class类型</li>
<li>enum类型</li>
<li>Annotation类型</li>
<li>以类型的数组</li>
</ul>
</blockquote>
<blockquote>
<p>属性名：该注解的属性名，如@UseCase(id=12,name=”gg”)中的id和name</p>
</blockquote>
<blockquote>
<p>默认值：不指定属性名时的默认值，这块可以不要</p>
</blockquote>
<h3 id="定义注解"><a href="#定义注解" class="headerlink" title="定义注解"></a>定义注解</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> club.hermit.study.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.FIELD)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Name &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="注解处理器"><a href="#注解处理器" class="headerlink" title="注解处理器"></a>注解处理器</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> club.hermit.study.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NameAnnotationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getInfo</span><span class="params">(Class&lt;?&gt; clz)</span> </span>&#123;</span><br><span class="line">        String res = <span class="string">""</span>;</span><br><span class="line">        Field[] declaredFieds = clz.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field : declaredFieds) &#123;</span><br><span class="line">            <span class="keyword">if</span> (field.isAnnotationPresent(Name<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">                Name nameAnnotation = field.getAnnotation(Name<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">                res = nameAnnotation.value();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="注解属性"><a href="#注解属性" class="headerlink" title="注解属性"></a>注解属性</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> club.hermit.study.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Name</span>(<span class="string">"gtang94"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="NameTest"><a href="#NameTest" class="headerlink" title="NameTest"></a>NameTest</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> club.hermit.study.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NameTest</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String name = NameAnnotationHandler.getInfo(Person<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">gtang94</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code 0</span><br></pre></td></tr></table></figure>



<h2 id="注解源码"><a href="#注解源码" class="headerlink" title="注解源码"></a>注解源码</h2><h3 id="java-lang-annotation包"><a href="#java-lang-annotation包" class="headerlink" title="java.lang.annotation包"></a>java.lang.annotation包</h3><h4 id="Annotation"><a href="#Annotation" class="headerlink" title="Annotation"></a>Annotation</h4><blockquote>
<p>所有注释类型扩展的公共接口。该接口本身并不定义注释类型</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Annotation</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">toString</span><span class="params">()</span></span>;</span><br><span class="line">    Class&lt;? extends Annotation&gt; annotationType();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>annotationType()方法返回此注释的注释类型</p>
</blockquote>
<h4 id="异常或错误"><a href="#异常或错误" class="headerlink" title="异常或错误"></a>异常或错误</h4><h5 id="AnnotationFormatError"><a href="#AnnotationFormatError" class="headerlink" title="AnnotationFormatError"></a>AnnotationFormatError</h5><blockquote>
<p>该类继承 Error 类</p>
</blockquote>
<blockquote>
<p>当注释解析器尝试从类文件读取注释并确认注释格式错误时抛出错误</p>
</blockquote>
<h5 id="AnnotationTypeMismatchException"><a href="#AnnotationTypeMismatchException" class="headerlink" title="AnnotationTypeMismatchException"></a>AnnotationTypeMismatchException</h5><blockquote>
<p>继承 RuntimeException 类</p>
</blockquote>
<blockquote>
<p>抛出以指示程序已尝试访问主机编辑后类已更改的注释元素</p>
</blockquote>
<h5 id="IncompleteAnnotationException"><a href="#IncompleteAnnotationException" class="headerlink" title="IncompleteAnnotationException"></a>IncompleteAnnotationException</h5><blockquote>
<p>抛出以指示程序已尝试访问在编辑或序列化注释后添加到注释类型定义的注释类型的元素的异常</p>
</blockquote>
<h4 id="元注释"><a href="#元注释" class="headerlink" title="元注释"></a>元注释</h4><h5 id="Documented-1"><a href="#Documented-1" class="headerlink" title="Documented"></a>Documented</h5><h5 id="Inherited-1"><a href="#Inherited-1" class="headerlink" title="Inherited"></a>Inherited</h5><h5 id="Native"><a href="#Native" class="headerlink" title="Native"></a>Native</h5><blockquote>
<p>Java1.8才引入的元注释</p>
</blockquote>
<h5 id="Repeatable-1"><a href="#Repeatable-1" class="headerlink" title="Repeatable"></a>Repeatable</h5><blockquote>
<p>Java1.8才引入的元注释</p>
</blockquote>
<h5 id="Retention-1"><a href="#Retention-1" class="headerlink" title="Retention"></a>Retention</h5><h5 id="Target-1"><a href="#Target-1" class="headerlink" title="Target"></a>Target</h5><h4 id="ElementType"><a href="#ElementType" class="headerlink" title="ElementType"></a>ElementType</h4><blockquote>
<p>该枚举类中定义了在Java程序中可能出现注释的位置的分类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> ElementType &#123;</span><br><span class="line">    <span class="comment">/** Class, interface (including annotation type), or enum declaration */</span></span><br><span class="line">    TYPE,</span><br><span class="line">    <span class="comment">/** Field declaration (includes enum constants) */</span></span><br><span class="line">    FIELD,</span><br><span class="line">    <span class="comment">/** Method declaration */</span></span><br><span class="line">    METHOD,</span><br><span class="line">    <span class="comment">/** Formal parameter declaration */</span></span><br><span class="line">    PARAMETER,</span><br><span class="line">    <span class="comment">/** Constructor declaration */</span></span><br><span class="line">    CONSTRUCTOR,</span><br><span class="line">    <span class="comment">/** Local variable declaration */</span></span><br><span class="line">    LOCAL_VARIABLE,</span><br><span class="line">    <span class="comment">/** Annotation type declaration */</span></span><br><span class="line">    ANNOTATION_TYPE,</span><br><span class="line">    <span class="comment">/** Package declaration */</span></span><br><span class="line">    PACKAGE,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Type parameter declaration</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TYPE_PARAMETER,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Use of a type</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TYPE_USE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="RetentionPolicy"><a href="#RetentionPolicy" class="headerlink" title="RetentionPolicy"></a>RetentionPolicy</h4><blockquote>
<p>注释保留策略。这个枚举类型的常量标识了在何时保留注释</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> RetentionPolicy &#123;</span><br><span class="line">    SOURCE,</span><br><span class="line">    CLASS,</span><br><span class="line">    RUNTIME</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="注解原理"><a href="#注解原理" class="headerlink" title="注解原理"></a>注解原理</h3><blockquote>
<p>注解本质是一个继承了Annotation 的特殊接口，其具体实现类是Java 运行时生成的动态代理类。而我们通过反射获取注解时，返回的是Java 运行时生成的动态代理对象$Proxy1。通过代理对象调用自定义注解（接口）的方法，会最终调用AnnotationInvocationHandler 的invoke 方法。该方法会从memberValues 这个Map 中索引出对应的值。而memberValues 的来源是Java 常量池。</p>
<p>— 摘自《<a href="https://www.cnblogs.com/acm-bingzi/p/javaAnnotation.html" target="_blank" rel="noopener">注解Annotation实现原理与自定义注解例子</a>》</p>
</blockquote>
<h4 id="将动态代理对象-Proxy1持久化到硬盘"><a href="#将动态代理对象-Proxy1持久化到硬盘" class="headerlink" title="将动态代理对象$Proxy1持久化到硬盘"></a>将动态代理对象$Proxy1持久化到硬盘</h4><blockquote>
<p>在NameAnnotationHandler断点debug，可知动态生成了$Proxy1代理类</p>
</blockquote>
<p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1595751725/WechatIMG1_kerabq.png" alt="=annotation"></p>
<blockquote>
<p>修改NameTest，将$Proxy1持久化</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> club.hermit.study.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NameTest</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.setProperty(<span class="string">"sun.misc.ProxyGenerator.saveGeneratedFiles"</span>, <span class="string">"true"</span>);</span><br><span class="line">        String name = NameAnnotationHandler.getInfo(Person<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>点击重新运行后得到$Proxy1.class源码</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by Fernflower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.sun.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> club.hermit.study.annotation.Name;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.UndeclaredThrowableException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> $<span class="title">Proxy1</span> <span class="keyword">extends</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">Name</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m1;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m2;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m4;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m0;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m3;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $Proxy1(InvocationHandler var1) <span class="keyword">throws</span>  &#123;</span><br><span class="line">        <span class="keyword">super</span>(var1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object var1)</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Boolean)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m1, <span class="keyword">new</span> Object[]&#123;var1&#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var3;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var4) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var4);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (String)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m2, (Object[])<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Class <span class="title">annotationType</span><span class="params">()</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Class)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m4, (Object[])<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Integer)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m0, (Object[])<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">value</span><span class="params">()</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (String)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m3, (Object[])<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            m1 = Class.forName(<span class="string">"java.lang.Object"</span>).getMethod(<span class="string">"equals"</span>, Class.forName(<span class="string">"java.lang.Object"</span>));</span><br><span class="line">            m2 = Class.forName(<span class="string">"java.lang.Object"</span>).getMethod(<span class="string">"toString"</span>);</span><br><span class="line">            m4 = Class.forName(<span class="string">"club.hermit.study.annotation.Name"</span>).getMethod(<span class="string">"annotationType"</span>);</span><br><span class="line">            m0 = Class.forName(<span class="string">"java.lang.Object"</span>).getMethod(<span class="string">"hashCode"</span>);</span><br><span class="line">            m3 = Class.forName(<span class="string">"club.hermit.study.annotation.Name"</span>).getMethod(<span class="string">"value"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchMethodError(var2.getMessage());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoClassDefFoundError(var3.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>由$Proxy1.class源码可知：</p>
<ul>
<li>$Proxy1继承了 Proxy 类，实现了Name接口（但Name是@interface声明的，并不是一个接口啊!?）</li>
<li>value()方法中，调用InvocationHandler接口的invoke方法</li>
</ul>
</blockquote>
<h4 id="反编译Name接口"><a href="#反编译Name接口" class="headerlink" title="反编译Name接口"></a>反编译Name接口</h4><h5 id="反编译工具"><a href="#反编译工具" class="headerlink" title="反编译工具"></a>反编译工具</h5><blockquote>
<p>javap是java内置的反编译工具，具体用法如下：</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">gtang94MacBook-Pro:note tangguoqiang$ javap -<span class="built_in">help</span></span><br><span class="line">用法: javap &lt;options&gt; &lt;classes&gt;</span><br><span class="line">其中, 可能的选项包括:</span><br><span class="line">  -<span class="built_in">help</span>  --<span class="built_in">help</span>  -?        输出此用法消息</span><br><span class="line">  -version                 版本信息</span><br><span class="line">  -v  -verbose             输出附加信息</span><br><span class="line">  -l                       输出行号和本地变量表</span><br><span class="line">  -public                  仅显示公共类和成员</span><br><span class="line">  -protected               显示受保护的/公共类和成员</span><br><span class="line">  -package                 显示程序包/受保护的/公共类</span><br><span class="line">                           和成员 (默认)</span><br><span class="line">  -p  -private             显示所有类和成员</span><br><span class="line">  -c                       对代码进行反汇编</span><br><span class="line">  -s                       输出内部类型签名</span><br><span class="line">  -sysinfo                 显示正在处理的类的</span><br><span class="line">                           系统信息 (路径, 大小, 日期, MD5 散列)</span><br><span class="line">  -constants               显示最终常量</span><br><span class="line">  -classpath &lt;path&gt;        指定查找用户类文件的位置</span><br><span class="line">  -cp &lt;path&gt;               指定查找用户类文件的位置</span><br><span class="line">  -bootclasspath &lt;path&gt;    覆盖引导类文件的位置</span><br></pre></td></tr></table></figure>

<h5 id="反编译Name"><a href="#反编译Name" class="headerlink" title="反编译Name"></a>反编译Name</h5><blockquote>
<p>执行 javap -v Name.class 后输出Name.class信息，可知：</p>
<ul>
<li>Name 接口继承了 java.lang.annotation.Annotation 接口</li>
<li>ACC_ANNOTATION 表名Name是一个注解</li>
</ul>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">gtang94MacBook-Pro:annotation tangguoqiang$ javap -v Name.class</span><br><span class="line">Classfile /Users/gtang94/data/recharge/study/study/target/classes/club/hermit/study/annotation/Name.class</span><br><span class="line">  Last modified 2020-7-26; size 452 bytes</span><br><span class="line">  MD5 checksum 37d757a80b01e1ac9855c35355f0afc1</span><br><span class="line">  Compiled from <span class="string">"Name.java"</span></span><br><span class="line">public interface club.hermit.study.annotation.Name extends java.lang.annotation.Annotation</span><br><span class="line">  minor version: 0</span><br><span class="line">  major version: 52</span><br><span class="line">  flags: ACC_PUBLIC, ACC_INTERFACE, ACC_ABSTRACT, ACC_ANNOTATION</span><br><span class="line">Constant pool:</span><br><span class="line">   <span class="comment">#1 = Class              #17            // club/hermit/study/annotation/Name</span></span><br><span class="line">   <span class="comment">#2 = Class              #18            // java/lang/Object</span></span><br><span class="line">   <span class="comment">#3 = Class              #19            // java/lang/annotation/Annotation</span></span><br><span class="line">   <span class="comment">#4 = Utf8               value</span></span><br><span class="line">   <span class="comment">#5 = Utf8               ()Ljava/lang/String;</span></span><br><span class="line">   <span class="comment">#6 = Utf8               AnnotationDefault</span></span><br><span class="line">   <span class="comment">#7 = Utf8</span></span><br><span class="line">   <span class="comment">#8 = Utf8               SourceFile</span></span><br><span class="line">   <span class="comment">#9 = Utf8               Name.java</span></span><br><span class="line">  <span class="comment">#10 = Utf8               RuntimeVisibleAnnotations</span></span><br><span class="line">  <span class="comment">#11 = Utf8               Ljava/lang/annotation/Retention;</span></span><br><span class="line">  <span class="comment">#12 = Utf8               Ljava/lang/annotation/RetentionPolicy;</span></span><br><span class="line">  <span class="comment">#13 = Utf8               RUNTIME</span></span><br><span class="line">  <span class="comment">#14 = Utf8               Ljava/lang/annotation/Target;</span></span><br><span class="line">  <span class="comment">#15 = Utf8               Ljava/lang/annotation/ElementType;</span></span><br><span class="line">  <span class="comment">#16 = Utf8               FIELD</span></span><br><span class="line">  <span class="comment">#17 = Utf8               club/hermit/study/annotation/Name</span></span><br><span class="line">  <span class="comment">#18 = Utf8               java/lang/Object</span></span><br><span class="line">  <span class="comment">#19 = Utf8               java/lang/annotation/Annotation</span></span><br><span class="line">&#123;</span><br><span class="line">  public abstract java.lang.String value();</span><br><span class="line">    descriptor: ()Ljava/lang/String;</span><br><span class="line">    flags: ACC_PUBLIC, ACC_ABSTRACT</span><br><span class="line">    AnnotationDefault:</span><br><span class="line">      default_value: s<span class="comment">#7&#125;</span></span><br><span class="line">SourceFile: <span class="string">"Name.java"</span></span><br><span class="line">RuntimeVisibleAnnotations:</span><br><span class="line">  0: <span class="comment">#11(#4=e#12.#13)</span></span><br><span class="line">  1: <span class="comment">#14(#4=[e#15.#16])</span></span><br></pre></td></tr></table></figure>

<h5 id="调用逻辑处理类"><a href="#调用逻辑处理类" class="headerlink" title="调用逻辑处理类"></a>调用逻辑处理类</h5><blockquote>
<p>注释是通过动态代理实现的，那调用逻辑处理类是在哪的呢？也即InvocationHandler的实现类是哪个</p>
<p>通过debug单步运行NameAnnotationHandler类，如下可知调用逻辑处理类是 sun.reflect.annotation.AnnotationInvocationHandler</p>
</blockquote>
<p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1595763069/WechatIMG2_umpwhf.png" alt="handler"></p>
<blockquote>
<p>sun.reflect.annotation.AnnotationInvocationHandler类的invoke()源码如下：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object var1, Method var2, Object[] var3)</span> </span>&#123;</span><br><span class="line">    String var4 = var2.getName();</span><br><span class="line">    Class[] var5 = var2.getParameterTypes();</span><br><span class="line">    <span class="keyword">if</span> (var4.equals(<span class="string">"equals"</span>) &amp;&amp; var5.length == <span class="number">1</span> &amp;&amp; var5[<span class="number">0</span>] == Object<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.equalsImpl(var3[<span class="number">0</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (var5.length != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError(<span class="string">"Too many parameters for an annotation method"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">byte</span> var7 = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">switch</span>(var4.hashCode()) &#123;</span><br><span class="line">        <span class="keyword">case</span> -<span class="number">1776922004</span>:</span><br><span class="line">            <span class="keyword">if</span> (var4.equals(<span class="string">"toString"</span>)) &#123;</span><br><span class="line">                var7 = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">147696667</span>:</span><br><span class="line">            <span class="keyword">if</span> (var4.equals(<span class="string">"hashCode"</span>)) &#123;</span><br><span class="line">                var7 = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1444986633</span>:</span><br><span class="line">            <span class="keyword">if</span> (var4.equals(<span class="string">"annotationType"</span>)) &#123;</span><br><span class="line">                var7 = <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span>(var7) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.toStringImpl();</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.hashCodeImpl();</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.type;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            Object var6 = <span class="keyword">this</span>.memberValues.get(var4);</span><br><span class="line">            <span class="keyword">if</span> (var6 == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IncompleteAnnotationException(<span class="keyword">this</span>.type, var4);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (var6 <span class="keyword">instanceof</span> ExceptionProxy) &#123;</span><br><span class="line">                <span class="keyword">throw</span> ((ExceptionProxy)var6).generateException();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (var6.getClass().isArray() &amp;&amp; Array.getLength(var6) != <span class="number">0</span>) &#123;</span><br><span class="line">                    var6 = <span class="keyword">this</span>.cloneArray(var6);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> var6;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>源码分析</category>
      </categories>
      <tags>
        <tag>注解</tag>
        <tag>反编译</tag>
        <tag>动态代理</tag>
      </tags>
  </entry>
  <entry>
    <title>Java类型信息</title>
    <url>/2020/07/11/Java%E7%B1%BB%E5%9E%8B%E4%BF%A1%E6%81%AF/</url>
    <content><![CDATA[<blockquote>
<p>在某些情况下，Java需要在运行时再发现和确定类型信息，发现和确定用到的方法就是RTTI（Runtime Type Infomation，运行时类型信息），Java中的RTTI主要有个下面两种方式：</p>
<ul>
<li>传统RTTI ： 假定在编译时已经知道了所有的类型</li>
<li>反射 ： 允许在运行时发现和使用类的信息</li>
</ul>
</blockquote>
<blockquote>
<p><strong>运行时类型信息</strong> 使得程序员从只能在编译期执行面向类型的操作的禁锢中解脱了出来</p>
</blockquote>
<h2 id="传统RTTI"><a href="#传统RTTI" class="headerlink" title="传统RTTI"></a>传统RTTI</h2><blockquote>
<p>也叫RTTI。是通过继承和多态来实现的，在运行时通过调用超类的方法来实现具体的功能</p>
</blockquote>
<blockquote>
<p>传统RTTI有3中实现方式：</p>
<ul>
<li>向上转型或向下转型</li>
<li>通过Class对象(注：用了Class类并不代表就是反射)</li>
<li>通过instanceof或isInstance()</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span> + <span class="string">".draw()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Circle"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Square"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShapeTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Shape&gt; list = Arrays.asList(</span><br><span class="line">                <span class="keyword">new</span> Circle(),</span><br><span class="line">                <span class="keyword">new</span> Square()</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">for</span> (Shape shape : list) &#123;</span><br><span class="line">            shape.draw();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Circle.draw()</span><br><span class="line">Square.draw()</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code 0</span><br></pre></td></tr></table></figure>



<h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><h3 id="反射是什么"><a href="#反射是什么" class="headerlink" title="反射是什么"></a>反射是什么</h3><blockquote>
<p>反射是RTTI的另一种实现方式，是在Java程序运行时，动态的获取信息已经动态调用对象方法的机制</p>
</blockquote>
<h3 id="反射用在啥地方"><a href="#反射用在啥地方" class="headerlink" title="反射用在啥地方"></a>反射用在啥地方</h3><blockquote>
<p>在平时项目开发中，很少用反射，但在更深层次的模块化开发、框架开发中，经常用到反射。例如：</p>
<ul>
<li>动态代理设计模式</li>
<li>Spring框架</li>
<li>JDBC</li>
</ul>
</blockquote>
<h3 id="传统RTTI和反射的区别"><a href="#传统RTTI和反射的区别" class="headerlink" title="传统RTTI和反射的区别"></a>传统RTTI和反射的区别</h3><blockquote>
<p>RTTI在编译期就需要.class文件，而反射不需要</p>
</blockquote>
<h2 id="反射基本用法"><a href="#反射基本用法" class="headerlink" title="反射基本用法"></a>反射基本用法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span> + <span class="string">".draw()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String nameStr = <span class="string">"CircleNameStr"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> redius;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> PI = <span class="number">3.1415</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Circle</span><span class="params">(<span class="keyword">float</span> redius)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.redius = redius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getRedius</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRedius</span><span class="params">(<span class="keyword">float</span> redius)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.redius = redius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> PI * <span class="keyword">this</span>.redius * redius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Circle"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="获取类的所有变量"><a href="#获取类的所有变量" class="headerlink" title="获取类的所有变量"></a>获取类的所有变量</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShapeTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Class circle = Circle<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">        System.out.println(circle.getName()); <span class="comment">// 获取类名</span></span><br><span class="line">        Field[] fields1 = circle.getFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field : fields1) &#123;</span><br><span class="line">            <span class="keyword">int</span> modifiers = field.getModifiers(); <span class="comment">// 获取访问权限</span></span><br><span class="line">            System.out.println(Modifier.toString(modifiers));</span><br><span class="line">            System.out.println(field.getType().getName() + <span class="string">" : "</span> + field.getName()); <span class="comment">//获取变量类型和变量名称</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">        Field[] fields2 = circle.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field : fields2) &#123;</span><br><span class="line">            <span class="keyword">int</span> modifiers = field.getModifiers();</span><br><span class="line">            System.out.println(Modifier.toString(modifiers));</span><br><span class="line">            System.out.println(field.getType().getName() + <span class="string">" : "</span> + field.getName());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">club.hermit.study.reflect.Circle</span><br><span class="line">public</span><br><span class="line">java.lang.String : nameStr</span><br><span class="line">public static final</span><br><span class="line">double : PI</span><br><span class="line"></span><br><span class="line">public</span><br><span class="line">java.lang.String : nameStr</span><br><span class="line">private</span><br><span class="line"><span class="built_in">float</span> : redius</span><br><span class="line">public static final</span><br><span class="line">double : PI</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code 0</span><br></pre></td></tr></table></figure>

<h3 id="获取类的所有方法"><a href="#获取类的所有方法" class="headerlink" title="获取类的所有方法"></a>获取类的所有方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShapeTest2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Class circle = Circle<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">        System.out.println(<span class="string">"类名: "</span> + circle.getName()); <span class="comment">// 获取类名</span></span><br><span class="line"></span><br><span class="line">        Method[] methods1 = circle.getMethods(); <span class="comment">// 获取所有public方法</span></span><br><span class="line">        System.out.println(<span class="string">"=====所有public方法：====="</span>);</span><br><span class="line">        <span class="keyword">for</span> (Method method : methods1) &#123;</span><br><span class="line">            <span class="keyword">int</span> modifiers = method.getModifiers(); <span class="comment">// 获取权限修饰符</span></span><br><span class="line">            System.out.println(<span class="string">"方法修饰符: "</span> + Modifier.toString(modifiers));</span><br><span class="line"></span><br><span class="line">            Class resType = method.getReturnType(); <span class="comment">// 获取返回值</span></span><br><span class="line">            System.out.println(<span class="string">"方法返回值: "</span> + resType.getName() + <span class="string">" : "</span> + method.getName());</span><br><span class="line"></span><br><span class="line">            Parameter[] parameters = method.getParameters(); <span class="comment">// 获取参数</span></span><br><span class="line">            <span class="keyword">if</span> (parameters.length != <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.print(<span class="string">"方法参数: "</span>);</span><br><span class="line">                <span class="keyword">for</span> (Parameter parameter : parameters) &#123;</span><br><span class="line">                    System.out.print(parameter.getType().getName() + <span class="string">" : "</span> + parameter.getName());</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">""</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Class[] ex = method.getExceptionTypes(); <span class="comment">// 获取异常</span></span><br><span class="line">            <span class="keyword">if</span> (ex.length != <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.print(<span class="string">"方法异常: "</span>);</span><br><span class="line">                <span class="keyword">for</span> (Class <span class="keyword">var</span> : ex) &#123;</span><br><span class="line">                    System.out.print(<span class="keyword">var</span>.getName());</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">""</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"=====所有方法====="</span>);</span><br><span class="line"></span><br><span class="line">        Method[] methods2 = circle.getDeclaredMethods(); <span class="comment">// 获取所有方法</span></span><br><span class="line">        <span class="keyword">for</span> (Method method : methods2) &#123;</span><br><span class="line">            <span class="keyword">int</span> modifiers = method.getModifiers(); <span class="comment">// 获取权限修饰符</span></span><br><span class="line">            System.out.println(<span class="string">"方法修饰符: "</span> + Modifier.toString(modifiers));</span><br><span class="line"></span><br><span class="line">            Class resType = method.getReturnType(); <span class="comment">// 获取返回值</span></span><br><span class="line">            System.out.println(<span class="string">"方法返回值: "</span> + resType.getName() + <span class="string">" : "</span> + method.getName());</span><br><span class="line"></span><br><span class="line">            Parameter[] parameters = method.getParameters(); <span class="comment">// 获取参数</span></span><br><span class="line">            <span class="keyword">if</span> (parameters.length != <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.print(<span class="string">"方法参数: "</span>);</span><br><span class="line">                <span class="keyword">for</span> (Parameter parameter : parameters) &#123;</span><br><span class="line">                    System.out.print(parameter.getType().getName() + <span class="string">" : "</span> + parameter.getName());</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">""</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Class[] ex = method.getExceptionTypes(); <span class="comment">// 获取异常</span></span><br><span class="line">            <span class="keyword">if</span> (ex.length != <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.print(<span class="string">"方法异常: "</span>);</span><br><span class="line">                <span class="keyword">for</span> (Class <span class="keyword">var</span> : ex) &#123;</span><br><span class="line">                    System.out.print(<span class="keyword">var</span>.getName());</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">""</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">类名: club.hermit.study.reflect.Circle</span><br><span class="line">=====所有public方法：=====</span><br><span class="line">方法修饰符: public</span><br><span class="line">方法返回值: java.lang.String : toString</span><br><span class="line"></span><br><span class="line">方法修饰符: public</span><br><span class="line">方法返回值: <span class="built_in">float</span> : getRedius</span><br><span class="line"></span><br><span class="line">方法修饰符: public</span><br><span class="line">方法返回值: void : setRedius</span><br><span class="line">方法参数: <span class="built_in">float</span> : arg0</span><br><span class="line"></span><br><span class="line">方法修饰符: public final</span><br><span class="line">方法返回值: void : <span class="built_in">wait</span></span><br><span class="line">方法参数: long : arg0int : arg1</span><br><span class="line">方法异常: java.lang.InterruptedException</span><br><span class="line"></span><br><span class="line">方法修饰符: public final native</span><br><span class="line">方法返回值: void : <span class="built_in">wait</span></span><br><span class="line">方法参数: long : arg0</span><br><span class="line">方法异常: java.lang.InterruptedException</span><br><span class="line"></span><br><span class="line">方法修饰符: public final</span><br><span class="line">方法返回值: void : <span class="built_in">wait</span></span><br><span class="line">方法异常: java.lang.InterruptedException</span><br><span class="line"></span><br><span class="line">方法修饰符: public</span><br><span class="line">方法返回值: boolean : equals</span><br><span class="line">方法参数: java.lang.Object : arg0</span><br><span class="line"></span><br><span class="line">方法修饰符: public native</span><br><span class="line">方法返回值: int : hashCode</span><br><span class="line"></span><br><span class="line">方法修饰符: public final native</span><br><span class="line">方法返回值: java.lang.Class : getClass</span><br><span class="line"></span><br><span class="line">方法修饰符: public final native</span><br><span class="line">方法返回值: void : notify</span><br><span class="line"></span><br><span class="line">方法修饰符: public final native</span><br><span class="line">方法返回值: void : notifyAll</span><br><span class="line"></span><br><span class="line">=====所有方法=====</span><br><span class="line">方法修饰符: public</span><br><span class="line">方法返回值: java.lang.String : toString</span><br><span class="line"></span><br><span class="line">方法修饰符: public</span><br><span class="line">方法返回值: <span class="built_in">float</span> : getRedius</span><br><span class="line"></span><br><span class="line">方法修饰符: public</span><br><span class="line">方法返回值: void : setRedius</span><br><span class="line">方法参数: <span class="built_in">float</span> : arg0</span><br><span class="line"></span><br><span class="line">方法修饰符: private</span><br><span class="line">方法返回值: double : getArea</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code 0</span><br></pre></td></tr></table></figure>

<blockquote>
<p>此处，Circle.class 和 Class.forName(“Circle”) 都可以创建Circle类的Class对象，但用Circle.class创建时，不会自动初始化该Class对象，也就是不会执行Circle中的static{}部分的代码(如果有这部分代码的话)</p>
</blockquote>
<h3 id="反射访问private方法"><a href="#反射访问private方法" class="headerlink" title="反射访问private方法"></a>反射访问private方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShapeTest3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Circle circle = <span class="keyword">new</span> Circle(<span class="number">12</span>);</span><br><span class="line">        Class circleClass = circle.getClass(); <span class="comment">// 获取Class类实例</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Method area = circleClass.getDeclaredMethod(<span class="string">"getArea"</span>, <span class="keyword">null</span>); <span class="comment">// 获取circleClass中的方法</span></span><br><span class="line">            <span class="keyword">if</span> (area != <span class="keyword">null</span>) &#123;</span><br><span class="line">                area.setAccessible(<span class="keyword">true</span>); <span class="comment">// 获取私有方法的访问权限</span></span><br><span class="line">                System.out.println(area.invoke(circle)); <span class="comment">// 使用invoke调用</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">452.376</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code 0</span><br></pre></td></tr></table></figure>

<h3 id="反射修改private变量"><a href="#反射修改private变量" class="headerlink" title="反射修改private变量"></a>反射修改private变量</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShapeTest4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Circle circle = <span class="keyword">new</span> Circle(<span class="number">12</span>);</span><br><span class="line">        Class circleClass = circle.getClass(); <span class="comment">// 获取Class类实例</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Field field = circleClass.getDeclaredField(<span class="string">"redius"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (field != <span class="keyword">null</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">"更改前: "</span> + circle.getRedius());</span><br><span class="line">                field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                field.set(circle, <span class="number">10</span>);</span><br><span class="line">                System.out.println(<span class="string">"更改后: "</span> + circle.getRedius());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">更改前: 12.0</span><br><span class="line">更改后: 10.0</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code 0</span><br></pre></td></tr></table></figure>

<h3 id="反射修改private常量"><a href="#反射修改private常量" class="headerlink" title="反射修改private常量"></a>反射修改private常量</h3><blockquote>
<p>Java在编译时，JVM会对<strong>已赋值的</strong>int、float、double等基本类型以及String类的常量做优化，将常量直接替换成具体值，但包装类型Integer、Float、Double及其他类就不会。</p>
<p>如下Circle类的.class文件：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by Fernflower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> club.hermit.study.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String nameStr = <span class="string">"CircleNameStr"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> redius;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> PI = <span class="number">3.1415</span>D;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Circle</span><span class="params">(<span class="keyword">float</span> redius)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.redius = redius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getRedius</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.redius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRedius</span><span class="params">(<span class="keyword">float</span> redius)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.redius = redius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3.1415</span>D * (<span class="keyword">double</span>)<span class="keyword">this</span>.redius * (<span class="keyword">double</span>)<span class="keyword">this</span>.redius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Circle"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>所以，在这个时候就算通过反射替换了这种常量，依旧没有用</p>
</blockquote>
<blockquote>
<p>但如果将int、float、double、String这类常量不直接赋值，而是在构造方法中赋值，则可以修改，因为在编译后的.class文件中是通过变量名使用这种变量的。</p>
<p>例如，修改Circle类，去掉PI的static修饰符，不给PI直接赋值，而是放在构造方法中，则编译后的.class文件变为:</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String nameStr = <span class="string">"CircleNameStr"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> redius;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">double</span> PI;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Circle</span><span class="params">(<span class="keyword">float</span> redius)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.redius = redius;</span><br><span class="line">        <span class="keyword">this</span>.PI = <span class="number">3.1415</span>D;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getRedius</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.redius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRedius</span><span class="params">(<span class="keyword">float</span> redius)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.redius = redius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.PI * (<span class="keyword">double</span>)<span class="keyword">this</span>.redius * (<span class="keyword">double</span>)<span class="keyword">this</span>.redius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Circle"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>所以此时是可以通过反射修改此处的PI值的</p>
</blockquote>
<h2 id="反射原理"><a href="#反射原理" class="headerlink" title="反射原理"></a>反射原理</h2><h3 id="类的加载机制"><a href="#类的加载机制" class="headerlink" title="类的加载机制"></a>类的加载机制</h3><h4 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h4><blockquote>
<p>每个类编译后都会生成一个.class文件，JVM使用类加载器(Class Loader)来加载这个.class文件，类加载器实质上是一条类加载器链，一般的，只会用到一个原生的类加载器，通常只是在本地磁盘中加载。如果需要从远程或DB中加载.class文件时，就需要挂载额外的类加载器来实现了。</p>
</blockquote>
<blockquote>
<p>一般来说，类加载器是按照树形层次结构组织的，每个加载器都有一个父类加载器。另外，每个类加载器都支持代理模式，也就是可以自己完成.class的加载工作，也可以代理给其他加载器完成。</p>
</blockquote>
<blockquote>
<p>类加载器的加载顺序有两种：</p>
<ul>
<li>父类优先策略：JDK就采用这种方式，在这种策略下，类加载某个.class之前，会尝试先代理给父类加载器，只有当父类加载器找不到时，才会自己加载</li>
<li>子类优先策略：与父类优先策略相反，先尝试子类加载，找不到时候使用父类加载器加载</li>
</ul>
</blockquote>
<h4 id="动态加载"><a href="#动态加载" class="headerlink" title="动态加载"></a>动态加载</h4><blockquote>
<p>不论是采用 <strong>父类优先策略</strong> 加载还是采用 <strong>子类优先策略</strong> 加载，类都是在第一次被用到时动态加载到JVM的，即：</p>
<ul>
<li>Java程序在运行时，并不是一起把所有.class都加载，而是只有在使用的时候发现该类还未被加载时才会加载</li>
<li>当程序创建第一个对类的静态成员的引用时，才会加载该类。Java这个特性就叫<strong>动态加载</strong></li>
</ul>
</blockquote>
<blockquote>
<p>注：当加载一个.class文件时，并不意味着就会初始化这个对象。</p>
<p>类的初始化包括:</p>
<ul>
<li>加载：由类加载器执行，加载.class字节码，并创建一个Class对象</li>
<li>链接：验证字节码，为静态域分配存储空间（只是分配，并不初始化该存储空间），解析该类创建所需要的对其他类的应用</li>
<li>初始化：首先执行静态初始化块static{}，初始化静态变量，执行静态方法（如静态方法）</li>
</ul>
</blockquote>
<h4 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h4><blockquote>
<p>加载阶段主要完成以下几件事：</p>
<ul>
<li>通过一个类的全限定类名来获取定义此类的二进制字节流</li>
<li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构</li>
<li>在内存中生成一个代表这个类的 java.lang.Class 对象，作为方法区这个类的各种数据访问入口</li>
</ul>
</blockquote>
<h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><blockquote>
<p>Java在加载了类之后，需要进行链接的步骤，链接简单的说，就是将已经加载的Java二进制代码组合到JVM运行状态中去。它包含三个步骤：</p>
<ul>
<li>验证：验证是保证二进制字节码在结构上的正确性，具体来说，工作包括检测类型的正确性、接入属性正确性、检查final class没有被继承、检查静态变量的正确性等</li>
<li>准备：准备阶段主要是创建静态域、分配空间、给这些域设置默认值，需要注意的是：1. 在准备阶段不会执行任何代码，仅仅是ishezhi默认值；2. 这些默认值是这样分配的，原生类型全部设为0，其他引用类型设置为null</li>
<li>解析：解析的过程就是对类中的接口、类、方法、变量的符号引用进行解析和定位，解析成直接引用（符号引用就是编码是用字符串表示某个变量、接口的位置，直接引用就是根据符号引用翻译出来的地址），并保证这些类被正确的找到。解析的过程可能导致其他的类被加载。需要注意的是：根据不同的解析策略，这一步不是必须的，有些解析策略在解析时递归的把所有引用姐写，这是early resolution，要求所有引用都必须存在；还有一种策略是late resolution，这也是oracle的JDK所采用的策略，即在类只是被引用了，还没有别真正用到时，并不进行解析，只有当真正用到了，才去加载和解析这个类</li>
</ul>
</blockquote>
<h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><blockquote>
<p>根据JVM规范，所有JVM实现必须在每个类或接口被Java程序首次使用时才初始化。主要有以下几种：</p>
<ul>
<li>创建类的实例</li>
<li>访问某个类或者接口的静态变量，或者对该静态变量赋值</li>
<li>调用类的静态方法</li>
<li>反射</li>
<li>初始化一个类的子类，不过直接通过子类引用父类元素，不会引起子类的初始化</li>
<li>JVM被标明为启动类的类</li>
</ul>
</blockquote>
<h3 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h3><blockquote>
<p>Class的实例代表了Java运行程序中的类或接口。一个枚举就是一种类，一个注释就是一种接口。每个数组也属于反映Class对象的一个类，这个类被具有相同元素类型和数量维度的所有数组共享。而Java的原始类型，如：booealn、byte、char、short、int、long、float、double、及void也被表示为Class对象</p>
</blockquote>
<h4 id="类声明"><a href="#类声明" class="headerlink" title="类声明"></a>类声明</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Class</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span>,</span></span><br><span class="line"><span class="class">                              <span class="title">GenericDeclaration</span>,</span></span><br><span class="line"><span class="class">                              <span class="title">Type</span>,</span></span><br><span class="line"><span class="class">                              <span class="title">AnnotatedElement</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Class类被声明为final，做了阉割，不能有子类</p>
</blockquote>
<h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><h5 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Class</span><span class="params">(ClassLoader loader)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Initialize final field for classLoader.  The initialization value of non-null</span></span><br><span class="line">  <span class="comment">// prevents future JIT optimizations from assuming this final field is null.</span></span><br><span class="line">  classLoader = loader;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Class类没有public的构造方法；该private的构造方法也是为了阻止默认构造方法被使用（在Java中，如果创建了一个带有三处的构造方法，那么无参的构造方法必须显式的写出来）</p>
<p>当.class字节码文件在类加载器(Class Loader)中被加载并且被已定义的类方法被调用时，JVM才会自动构造Class对象</p>
</blockquote>
<h5 id="生成实例"><a href="#生成实例" class="headerlink" title="生成实例"></a>生成实例</h5><blockquote>
<p>该类方法主要是根据给定的类名，加载类信息并执行初始化</p>
</blockquote>
<h6 id="forName"><a href="#forName" class="headerlink" title="forName"></a>forName</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@CallerSensitive</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Class&lt;?&gt; forName(String className)</span><br><span class="line">            <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">    Class&lt;?&gt; caller = Reflection.getCallerClass();</span><br><span class="line">    <span class="keyword">return</span> forName0(className, <span class="keyword">true</span>, ClassLoader.getClassLoader(caller), caller);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@CallerSensitive</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Class&lt;?&gt; forName(String name, <span class="keyword">boolean</span> initialize,</span><br><span class="line">                               ClassLoader loader)</span><br><span class="line">    <span class="keyword">throws</span> ClassNotFoundException</span><br><span class="line">&#123;</span><br><span class="line">    Class&lt;?&gt; caller = <span class="keyword">null</span>;</span><br><span class="line">    SecurityManager sm = System.getSecurityManager();</span><br><span class="line">    <span class="keyword">if</span> (sm != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// Reflective call to get caller class is only needed if a security manager</span></span><br><span class="line">        <span class="comment">// is present.  Avoid the overhead of making this call otherwise.</span></span><br><span class="line">        caller = Reflection.getCallerClass();</span><br><span class="line">        <span class="keyword">if</span> (sun.misc.VM.isSystemDomainLoader(loader)) &#123;</span><br><span class="line">            ClassLoader ccl = ClassLoader.getClassLoader(caller);</span><br><span class="line">            <span class="keyword">if</span> (!sun.misc.VM.isSystemDomainLoader(ccl)) &#123;</span><br><span class="line">                sm.checkPermission(</span><br><span class="line">                    SecurityConstants.GET_CLASSLOADER_PERMISSION);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> forName0(name, initialize, loader, caller);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** Called after security check for system loader access checks have been made. */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> Class&lt;?&gt; forName0(String name, <span class="keyword">boolean</span> initialize,</span><br><span class="line">                                        ClassLoader loader,</span><br><span class="line">                                        Class&lt;?&gt; caller)</span><br><span class="line">    <span class="keyword">throws</span> ClassNotFoundException;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>forName()方法共有两个重载方法，他们最终都调用navite方法forName0()</p>
<p>在只有一个形参的forName方法中，通过获得类加载器，调用forName0方法</p>
<p>在另一个forName方法中，通过SecurityManager类，JVM在应用层进行安全检查，按照各种权限判断是否可获取类加载器</p>
</blockquote>
<h6 id="newInstance"><a href="#newInstance" class="headerlink" title="newInstance"></a>newInstance</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@CallerSensitive</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">newInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> InstantiationException, IllegalAccessException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (System.getSecurityManager() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        checkMemberAccess(Member.PUBLIC, Reflection.getCallerClass(), <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag">NOTE:</span> the following code may not be strictly correct under</span></span><br><span class="line">    <span class="comment">// the current Java memory model.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Constructor lookup</span></span><br><span class="line">    <span class="keyword">if</span> (cachedConstructor == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == Class<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalAccessException(</span><br><span class="line">                <span class="string">"Can not call newInstance() on the Class for java.lang.Class"</span></span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class&lt;?&gt;[] empty = &#123;&#125;;</span><br><span class="line">            <span class="keyword">final</span> Constructor&lt;T&gt; c = getConstructor0(empty, Member.DECLARED);</span><br><span class="line">            <span class="comment">// Disable accessibility checks on the constructor</span></span><br><span class="line">            <span class="comment">// since we have to do the security check here anyway</span></span><br><span class="line">            <span class="comment">// (the stack depth is wrong for the Constructor's</span></span><br><span class="line">            <span class="comment">// security check to work)</span></span><br><span class="line">            java.security.AccessController.doPrivileged(</span><br><span class="line">                <span class="keyword">new</span> java.security.PrivilegedAction&lt;Void&gt;() &#123;</span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Void <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                            c.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">            cachedConstructor = c;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> (InstantiationException)</span><br><span class="line">                <span class="keyword">new</span> InstantiationException(getName()).initCause(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Constructor&lt;T&gt; tmpConstructor = cachedConstructor;</span><br><span class="line">    <span class="comment">// Security check (same as in java.lang.reflect.Constructor)</span></span><br><span class="line">    <span class="keyword">int</span> modifiers = tmpConstructor.getModifiers();</span><br><span class="line">    <span class="keyword">if</span> (!Reflection.quickCheckMemberAccess(<span class="keyword">this</span>, modifiers)) &#123;</span><br><span class="line">        Class&lt;?&gt; caller = Reflection.getCallerClass();</span><br><span class="line">        <span class="keyword">if</span> (newInstanceCallerCache != caller) &#123;</span><br><span class="line">            Reflection.ensureMemberAccess(caller, <span class="keyword">this</span>, <span class="keyword">null</span>, modifiers);</span><br><span class="line">            newInstanceCallerCache = caller;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Run constructor</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> tmpConstructor.newInstance((Object[])<span class="keyword">null</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">        Unsafe.getUnsafe().throwException(e.getTargetException());</span><br><span class="line">        <span class="comment">// Not reached</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>通过该方法，可以创建一个被Class表示的类的新实例，如果该类尚未没初始化时该类就会在此时被初始化</p>
<p>在该方法中，通过getConstructor0()、privateGetDeclaredConstructors()、reflectionData()等方法获取构造函数数组，接着根据参数列表为空判断找到空构造函数，拷贝并返回该构造函数</p>
<p>最后调用Constructor类的newInstance方法返回一个新实例</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Constructor&lt;T&gt; <span class="title">getConstructor0</span><span class="params">(Class&lt;?&gt;[] parameterTypes,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    <span class="keyword">int</span> which)</span> <span class="keyword">throws</span> NoSuchMethodException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Constructor&lt;T&gt;[] constructors = privateGetDeclaredConstructors((which == Member.PUBLIC));</span><br><span class="line">    <span class="keyword">for</span> (Constructor&lt;T&gt; constructor : constructors) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arrayContentsEq(parameterTypes,</span><br><span class="line">                            constructor.getParameterTypes())) &#123;</span><br><span class="line">            <span class="keyword">return</span> getReflectionFactory().copyConstructor(constructor);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchMethodException(getName() + <span class="string">".&lt;init&gt;"</span> + argumentTypesToString(parameterTypes));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="获取类信息"><a href="#获取类信息" class="headerlink" title="获取类信息"></a>获取类信息</h5><blockquote>
<p>这一类方法比较多，包括获取类的构造函数、已经声明的字段、方法，该类的注解、包名、父类，以及判断该类是否是数组、枚举、接口等</p>
<p>这类方法有：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Package <span class="title">getPackage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> Package.getPackage(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> Class&lt;? <span class="keyword">super</span> T&gt; getSuperclass();</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">getModifiers</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> Object[] getSigners();</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@CallerSensitive</span></span><br><span class="line"><span class="keyword">public</span> Field[] getFields() <span class="keyword">throws</span> SecurityException &#123;</span><br><span class="line">  checkMemberAccess(Member.PUBLIC, Reflection.getCallerClass(), <span class="keyword">true</span>);</span><br><span class="line">  <span class="keyword">return</span> copyFields(privateGetPublicFields(<span class="keyword">null</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@CallerSensitive</span></span><br><span class="line"><span class="keyword">public</span> Method[] getMethods() <span class="keyword">throws</span> SecurityException &#123;</span><br><span class="line">  checkMemberAccess(Member.PUBLIC, Reflection.getCallerClass(), <span class="keyword">true</span>);</span><br><span class="line">  <span class="keyword">return</span> copyMethods(privateGetPublicMethods());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@CallerSensitive</span></span><br><span class="line"><span class="keyword">public</span> Constructor&lt;?&gt;[] getConstructors() <span class="keyword">throws</span> SecurityException &#123;</span><br><span class="line">  checkMemberAccess(Member.PUBLIC, Reflection.getCallerClass(), <span class="keyword">true</span>);</span><br><span class="line">  <span class="keyword">return</span> copyConstructors(privateGetDeclaredConstructors(<span class="keyword">true</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@CallerSensitive</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Field <span class="title">getField</span><span class="params">(String name)</span></span></span><br><span class="line"><span class="function">  <span class="keyword">throws</span> NoSuchFieldException, SecurityException </span>&#123;</span><br><span class="line">  checkMemberAccess(Member.PUBLIC, Reflection.getCallerClass(), <span class="keyword">true</span>);</span><br><span class="line">  Field field = getField0(name);</span><br><span class="line">  <span class="keyword">if</span> (field == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchFieldException(name);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> field;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@CallerSensitive</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Method <span class="title">getMethod</span><span class="params">(String name, Class&lt;?&gt;... parameterTypes)</span></span></span><br><span class="line"><span class="function">  <span class="keyword">throws</span> NoSuchMethodException, SecurityException </span>&#123;</span><br><span class="line">  checkMemberAccess(Member.PUBLIC, Reflection.getCallerClass(), <span class="keyword">true</span>);</span><br><span class="line">  Method method = getMethod0(name, parameterTypes, <span class="keyword">true</span>);</span><br><span class="line">  <span class="keyword">if</span> (method == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchMethodException(getName() + <span class="string">"."</span> + name + argumentTypesToString(parameterTypes));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> method;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>等一系列方法……</p>
</blockquote>
<h5 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h5><h6 id="asSubclass"><a href="#asSubclass" class="headerlink" title="asSubclass"></a>asSubclass</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;U&gt; Class&lt;? extends U&gt; asSubclass(Class&lt;U&gt; clazz) &#123;</span><br><span class="line">  <span class="keyword">if</span> (clazz.isAssignableFrom(<span class="keyword">this</span>))</span><br><span class="line">    <span class="keyword">return</span> (Class&lt;? extends U&gt;) <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> ClassCastException(<span class="keyword">this</span>.toString());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">boolean</span> <span class="title">isAssignableFrom</span><span class="params">(Class&lt;?&gt; cls)</span></span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>该asSubclass方法将类转换为它的子类</p>
<p>isAssignableFrom方法用来判断clazz是否是当前实例，或者是当前实例的父类</p>
</blockquote>
<h6 id="cast"><a href="#cast" class="headerlink" title="cast"></a>cast</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">cast</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (obj != <span class="keyword">null</span> &amp;&amp; !isInstance(obj))</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> ClassCastException(cannotCastMsg(obj));</span><br><span class="line">  <span class="keyword">return</span> (T) obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">boolean</span> <span class="title">isInstance</span><span class="params">(Object obj)</span></span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>将obj对象转换成Class类表示的类或接口</p>
</blockquote>
<h3 id="Reflect包"><a href="#Reflect包" class="headerlink" title="Reflect包"></a>Reflect包</h3><h4 id="Constructor"><a href="#Constructor" class="headerlink" title="Constructor"></a>Constructor</h4><blockquote>
<p>该类提供了有关单个类的构造函数，该类用在newInstance()方法中</p>
</blockquote>
<h5 id="newInstance方法"><a href="#newInstance方法" class="headerlink" title="newInstance方法"></a>newInstance方法</h5><blockquote>
<p>使用被 Constructor类表示的构造器初始化一个、声明了该构造器的类的是实例，</p>
</blockquote>
<h2 id="QA"><a href="#QA" class="headerlink" title="QA"></a>QA</h2><h3 id="三种获取Class对象-new-Object-getClass、Object-class、Class-forName-“className”-区别"><a href="#三种获取Class对象-new-Object-getClass、Object-class、Class-forName-“className”-区别" class="headerlink" title="三种获取Class对象( new Object().getClass、Object.class、Class.forName(“className”) )区别"></a>三种获取Class对象( new Object().getClass、Object.class、Class.forName(“className”) )区别</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">reflect1</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"reflect1 静态代码块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"reflect1 动态代码块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">reflect1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行reflect1构造方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">reflect2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"reflect2 静态代码块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"reflect2 动态代码块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">reflect2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行reflect2构造方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">reflect3</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"reflect3 静态代码块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"reflect3 动态代码块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">reflect3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行reflect3构造方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"=========clz1========="</span>);</span><br><span class="line">        Class clz1 = reflect1<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">        System.out.println(<span class="string">"=========clz1========="</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"=========clz2========="</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class clz2 = Class.forName(<span class="string">"club.hermit.study.reflect.reflect2"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"=========clz2========="</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"=========clz3========="</span>);</span><br><span class="line">        Class clz3 = <span class="keyword">new</span> reflect3().getClass();</span><br><span class="line">        System.out.println(<span class="string">"=========clz3========="</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">=========clz1=========</span><br><span class="line">=========clz1=========</span><br><span class="line">=========clz2=========</span><br><span class="line">reflect2 静态代码块</span><br><span class="line">=========clz2=========</span><br><span class="line">=========clz3=========</span><br><span class="line">reflect3 静态代码块</span><br><span class="line">reflect3 动态代码块</span><br><span class="line">执行reflect3构造方法</span><br><span class="line">=========clz3=========</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code 0</span><br></pre></td></tr></table></figure>

<blockquote>
<p>由上可知，</p>
<ul>
<li>object.class 静态、动态代码块和构造方法都不会执行</li>
<li>Class.forName(“”) 只执行静态代码块</li>
<li>new Object().getClass()  会执行静态代码块、动态代码块、构造方法</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>源码分析</category>
      </categories>
      <tags>
        <tag>Class</tag>
        <tag>类加载器</tag>
        <tag>反射</tag>
        <tag>Reflect</tag>
        <tag>Class Loader</tag>
      </tags>
  </entry>
  <entry>
    <title>序列化源码分析</title>
    <url>/2020/07/05/%E5%BA%8F%E5%88%97%E5%8C%96%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h2 id="what"><a href="#what" class="headerlink" title="what"></a>what</h2><h3 id="序列化-反序列化是什么"><a href="#序列化-反序列化是什么" class="headerlink" title="序列化/反序列化是什么"></a>序列化/反序列化是什么</h3><blockquote>
<p>Java序列化是把Java Bean转化成有序字节流的过程</p>
<p>Java反序列化是把有序字节流转化成Java Bean的过程</p>
</blockquote>
<h3 id="序列化-反序列化有什么用"><a href="#序列化-反序列化有什么用" class="headerlink" title="序列化/反序列化有什么用"></a>序列化/反序列化有什么用</h3><blockquote>
<p>在网络通信过程中，所有的数据，如图片、文本都是以二进制序列的形式传输的。而将这些图片、文本对应的对象转化成二进制序列就是通过序列化实现的</p>
</blockquote>
<blockquote>
<p>而将网络中的二进制数据流恢复成对象就是通过Java Bean实现的</p>
</blockquote>
<h3 id="序列化用在什么情况下"><a href="#序列化用在什么情况下" class="headerlink" title="序列化用在什么情况下"></a>序列化用在什么情况下</h3><blockquote>
<ul>
<li>将对象持久化到硬盘中</li>
<li>将对象传输到网络中</li>
<li>进程间的对象传输</li>
</ul>
</blockquote>
<h2 id="序列化-反序列化怎么用"><a href="#序列化-反序列化怎么用" class="headerlink" title="序列化/反序列化怎么用"></a>序列化/反序列化怎么用</h2><blockquote>
<p>Java的序列化有两种方式：</p>
<ul>
<li>实现 Serializable 接口</li>
<li>实现 Externalizable 接口</li>
</ul>
</blockquote>
<h3 id="实现-Serializable-接口"><a href="#实现-Serializable-接口" class="headerlink" title="实现 Serializable 接口"></a>实现 Serializable 接口</h3><h4 id="默认方式实现序列化"><a href="#默认方式实现序列化" class="headerlink" title="默认方式实现序列化"></a>默认方式实现序列化</h4><blockquote>
<p>用FileOutputStream类实例化ObjectOutputStream类，然后使用ObjectOutputStream的默认的序列化方式，对非transient变量进行序列化</p>
</blockquote>
<blockquote>
<p>用FileInputStream类实例化ObjectInputStream类，然后使用ObjectInputStream的默认反序列化方式，对非transient变量进行反序列化</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerialParent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            ObjectOutputStream oss = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"test.txt"</span>));</span><br><span class="line">            Test test = <span class="keyword">new</span> Test(<span class="number">12</span>);</span><br><span class="line">            oss.writeObject(test);</span><br><span class="line"></span><br><span class="line">            ObjectInputStream iss = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"test.txt"</span>));</span><br><span class="line">            Test itest = (Test) iss.readObject();</span><br><span class="line">            System.out.println(itest.getAge());</span><br><span class="line">           </span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="自定义方式实现序列化"><a href="#自定义方式实现序列化" class="headerlink" title="自定义方式实现序列化"></a>自定义方式实现序列化</h4><h5 id="writeObject-readObject"><a href="#writeObject-readObject" class="headerlink" title="writeObject / readObject"></a>writeObject / readObject</h5><blockquote>
<p>在实现了Serializable类的子类中重写readObject和writeObject方法，在序列化/反序列化的时候，就会调用该类的readObject和writeObject方法</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerialParent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            ObjectOutputStream oss = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"test.txt"</span>));</span><br><span class="line">            Test test = <span class="keyword">new</span> Test(<span class="number">12</span>);</span><br><span class="line">            oss.writeObject(test);</span><br><span class="line"></span><br><span class="line">            ObjectInputStream iss = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"test.txt"</span>));</span><br><span class="line">            Test itest = (Test) iss.readObject();</span><br><span class="line">            System.out.println(itest.toString());</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(java.io.ObjectOutputStream outputStream)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            outputStream.defaultWriteObject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream inputStream)</span> <span class="keyword">throws</span> IOException,ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            inputStream.defaultReadObject();</span><br><span class="line">            age = <span class="number">1000</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Test &#123;"</span> +</span><br><span class="line">                <span class="string">"age = "</span> + age +</span><br><span class="line">                <span class="string">"&#125;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="writeReplace-readResolve"><a href="#writeReplace-readResolve" class="headerlink" title="writeReplace / readResolve"></a>writeReplace / readResolve</h5><blockquote>
<p>和writeObject/readObject类似，重写writeReplace/readResolve方法也能实现自定义序列化</p>
<p>但在序列化时，会先调用writeReplace方法，在调用writeObject方法。该方法可将任意对象代替成目标序列化对象</p>
<p>在反序列化时，readResolve方法会替换反序列化出的对象，反序列出来的方法会别立即丢弃。该方法在readObject之后调用</p>
</blockquote>
<h3 id="实现-Externalizable-接口"><a href="#实现-Externalizable-接口" class="headerlink" title="实现 Externalizable 接口"></a>实现 Externalizable 接口</h3><blockquote>
<p>实现Externalizable接口，并且实现writeExternal方法和readExternal方法，在序列化/反序列化时，会调用这两个方法进行序列化</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerialParent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            ObjectOutputStream oss = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"test.txt"</span>));</span><br><span class="line">            Test test = <span class="keyword">new</span> Test(<span class="number">12</span>);</span><br><span class="line">            oss.writeObject(test);</span><br><span class="line"></span><br><span class="line">            ObjectInputStream iss = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"test.txt"</span>));</span><br><span class="line">            Test itest = (Test) iss.readObject();</span><br><span class="line">            System.out.println(itest.toString());</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">implements</span> <span class="title">Externalizable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="string">"zhangsan"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Test &#123;"</span> +</span><br><span class="line">                <span class="string">"age = "</span> + age +</span><br><span class="line">                <span class="string">"&#125;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeExternal</span><span class="params">(ObjectOutput out)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        StringBuffer buff = <span class="keyword">new</span> StringBuffer(<span class="keyword">this</span>.name).reverse();</span><br><span class="line">        out.writeObject(buff);</span><br><span class="line">        out.writeInt(<span class="keyword">this</span>.age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readExternal</span><span class="params">(ObjectInput in)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = ((StringBuffer)in.readObject()).reverse().toString();</span><br><span class="line">        <span class="keyword">this</span>.age = in.readInt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><h3 id="标记接口"><a href="#标记接口" class="headerlink" title="标记接口"></a>标记接口</h3><blockquote>
<p>标记接口并不是Java语言特有的，标记接口是编程中的一种通用的设计思路。</p>
<p>Java中的标记接口有Serializable、Cloneable等，他们没有实际的方法，只是起到标记类的作用。比如Class A implements Serializable, Cloneable ，只是表示A可以被序列化和克隆。</p>
<p>在Java运行时，通过 obj instanceof Serializable 判断是否实现这些标记接口，实现则做特殊处理</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>标记接口是编程中的一种设计思路，编程语言本身并不支持为类维护元数据。而标记接口则弥补了这个功能上的缺失：当一个类实现了标记接口时，实际上从某种意义上来说就成为了这个类的元数据之一，在运行时，通过编程语言的反射机制，我们就可以拿到代码中的元数据了</p>
</blockquote>
<h3 id="元数据"><a href="#元数据" class="headerlink" title="元数据"></a>元数据</h3><blockquote>
<p><a href="https://www.oracle.com/technetwork/articles/hunter-meta-097643-zhs.html" target="_blank" rel="noopener">元数据</a>是用来描述数据的数据，也就是描述代码与其他资源(如：DB表)之间内在联系的数据</p>
<p>例如：富士苹果有一个属性：它是红色的。假定有一个 FujiApple 类，您可以使用 <code>@Color</code> 批注类型的一个批注来指定它的颜色。通过这么做，您就提供了关于苹果的元数据</p>
</blockquote>
<blockquote>
<p>在JDK1.5之前标记接口主要担任元数据的角色(描述代码的字节流联系的数据)，1.5之后注解主要作为元数据的角色</p>
</blockquote>
<h3 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h3><blockquote>
<p>在正常情况下，在使用一个类时，必须先得知道它是做什么的，有什么用，有哪些属性，有哪些方法。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Person person = <span class="keyword">new</span> Person();</span><br><span class="line">person.getAge(<span class="number">20</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>但在某些情况下，在程序运行时才你呢个知道要操作的是什么类，及这个类的方法属性，然后调用它的方法</p>
<p>在这种情况下，即在运行时操作类的方式就是反射</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class clz = Class.forName(<span class="string">"club.hermit.study.Person"</span>);</span><br><span class="line">Method method = clz.getMethod(<span class="string">"setAge"</span>, <span class="keyword">int</span><span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">Constructor cons = clz.getConstructor();</span><br><span class="line">Object object = cons.newInstance();</span><br><span class="line">method.invoke(object, <span class="number">20</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>上面两个都实现了实例化Person类，已经设置Person类的age属性，但一个是通过正常实例化类的方式，后者是通过发射的方式</p>
</blockquote>
<h3 id="序列化原理"><a href="#序列化原理" class="headerlink" title="序列化原理"></a>序列化原理</h3><blockquote>
<p>在通过ObjectOutputStream实现序列化的过程中，writeObject0方法做以下的事：</p>
<ol>
<li>先处理以前写入或不重新写入的对象</li>
</ol>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// handle previously written and non-replaceable objects</span></span><br><span class="line"><span class="keyword">int</span> h;</span><br><span class="line"><span class="keyword">if</span> ((obj = subs.lookup(obj)) == <span class="keyword">null</span>) &#123;</span><br><span class="line">  writeNull();</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!unshared &amp;&amp; (h = handles.lookup(obj)) != -<span class="number">1</span>) &#123;</span><br><span class="line">  writeHandle(h);</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Class) &#123;</span><br><span class="line">  writeClass((Class) obj, unshared);</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> ObjectStreamClass) &#123;</span><br><span class="line">  writeClassDesc((ObjectStreamClass) obj, unshared);</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>判断对象是否为null、对象句柄映射、Class的子类、及待序列化的类是否是序列化类的描述内，根据各自判断直接将结果写入流中</p>
<p>ObjectStreamClass类是类的序列化描述符，可以通过lookup方法查找或创建JVM中加的的特定类的ObjectStreamClass类。该类中包含了类名和序列化ID(serialVersionUID)</p>
</blockquote>
<blockquote>
<ol start="2">
<li>检查是否需要更换对象</li>
</ol>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// check for replacement object</span></span><br><span class="line">Object orig = obj;</span><br><span class="line">Class&lt;?&gt; cl = obj.getClass();</span><br><span class="line">ObjectStreamClass desc;</span><br><span class="line"><span class="keyword">for</span> (;;) &#123;</span><br><span class="line">  <span class="comment">// REMIND: skip this check for strings/arrays?</span></span><br><span class="line">  Class&lt;?&gt; repCl;</span><br><span class="line">  desc = ObjectStreamClass.lookup(cl, <span class="keyword">true</span>);</span><br><span class="line">  <span class="keyword">if</span> (!desc.hasWriteReplaceMethod() ||</span><br><span class="line">      (obj = desc.invokeWriteReplace(obj)) == <span class="keyword">null</span> ||</span><br><span class="line">      (repCl = obj.getClass()) == cl)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  cl = repCl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (enableReplace) &#123;</span><br><span class="line">  Object rep = replaceObject(obj);</span><br><span class="line">  <span class="keyword">if</span> (rep != obj &amp;&amp; rep != <span class="keyword">null</span>) &#123;</span><br><span class="line">    cl = rep.getClass();</span><br><span class="line">    desc = ObjectStreamClass.lookup(cl, <span class="keyword">true</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  obj = rep;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>首先通过反射拿到需序列化的类的类名cl</li>
<li>然后通过第一步说的lookup方法查找JVM中加载的cl类对应的ObjectStreamClass描述符</li>
<li>如果需序列化的类中定义了writeReplace方法，则会反射执行该writeReplace方法</li>
</ul>
<p>注：该处的 if 条件用的贼鸡儿好<del>~</del> 如果未定义直接break，如果定义才之后 || 后面的条件(即反射执行的writeReplace方法)</p>
</blockquote>
<blockquote>
<ol start="3">
<li>判断对象的父接口</li>
</ol>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// remaining cases</span></span><br><span class="line"><span class="keyword">if</span> (obj <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">  writeString((String) obj, unshared);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (cl.isArray()) &#123;</span><br><span class="line">  writeArray(obj, desc, unshared);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Enum) &#123;</span><br><span class="line">  writeEnum((Enum&lt;?&gt;) obj, desc, unshared);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Serializable) &#123;</span><br><span class="line">  writeOrdinaryObject(obj, desc, unshared);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (extendedDebugInfo) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> NotSerializableException(</span><br><span class="line">      cl.getName() + <span class="string">"\n"</span> + debugInfoStack.toString());</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> NotSerializableException(cl.getName());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在此处判断实现序列化接口 obj instanceof Serializable ，将对象写入字节流</p>
</blockquote>
<blockquote>
<p>在 writeOrdinaryObject 方法中，通过 ObjectStreamClass 描述符判断此序列化是实现了 Serializable 接口还是实现了 Externalizable 接口</p>
</blockquote>
<blockquote>
<ul>
<li>在 writeSerialData 方法即实现Serializable接口是调用的方法中，按照ObjectStreamClass描述符对每个属性遍历，如果重写了writeObject方法，则反射执行该writeObject方法，否则执行默认的defaultWriteFields方法</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ObjectStreamClass.ClassDataSlot[] slots = desc.getClassDataLayout();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; slots.length; i++) &#123;</span><br><span class="line">  ObjectStreamClass slotDesc = slots[i].desc;</span><br><span class="line">  <span class="keyword">if</span> (slotDesc.hasWriteObjectMethod()) &#123;</span><br><span class="line">    PutFieldImpl oldPut = curPut;</span><br><span class="line">    curPut = <span class="keyword">null</span>;</span><br><span class="line">    SerialCallbackContext oldContext = curContext;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (extendedDebugInfo) &#123;</span><br><span class="line">      debugInfoStack.push(</span><br><span class="line">        <span class="string">"custom writeObject data (class \""</span> +</span><br><span class="line">        slotDesc.getName() + <span class="string">"\")"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      curContext = <span class="keyword">new</span> SerialCallbackContext(obj, slotDesc);</span><br><span class="line">      bout.setBlockDataMode(<span class="keyword">true</span>);</span><br><span class="line">      slotDesc.invokeWriteObject(obj, <span class="keyword">this</span>);</span><br><span class="line">      bout.setBlockDataMode(<span class="keyword">false</span>);</span><br><span class="line">      bout.writeByte(TC_ENDBLOCKDATA);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      curContext.setUsed();</span><br><span class="line">      curContext = oldContext;</span><br><span class="line">      <span class="keyword">if</span> (extendedDebugInfo) &#123;</span><br><span class="line">        debugInfoStack.pop();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    curPut = oldPut;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    defaultWriteFields(obj, slotDesc);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>同理，在实现了Externalizable接口后，执行writeExternalData方法，执行需序列化的类中定义的writeExternal方法</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">curContext = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (protocol == PROTOCOL_VERSION_1) &#123;</span><br><span class="line">  obj.writeExternal(<span class="keyword">this</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  bout.setBlockDataMode(<span class="keyword">true</span>);</span><br><span class="line">  obj.writeExternal(<span class="keyword">this</span>);</span><br><span class="line">  bout.setBlockDataMode(<span class="keyword">false</span>);</span><br><span class="line">  bout.writeByte(TC_ENDBLOCKDATA);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="反序列化原理"><a href="#反序列化原理" class="headerlink" title="反序列化原理"></a>反序列化原理</h3><blockquote>
<p>在反序列化中，根据序列化的类型逐个解析</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> TC_ARRAY:</span><br><span class="line"><span class="keyword">return</span> checkResolve(readArray(unshared));</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> TC_ENUM:</span><br><span class="line"><span class="keyword">return</span> checkResolve(readEnum(unshared));</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> TC_OBJECT:</span><br><span class="line"><span class="keyword">return</span> checkResolve(readOrdinaryObject(unshared));</span><br></pre></td></tr></table></figure>

<blockquote>
<p>根据JVM中获取的ObjectStreamClass描述符，根据反射形式，执行在类中预定义的readExternal和readObject方法反序列化对象</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ObjectStreamClass desc = readClassDesc(<span class="keyword">false</span>);</span><br><span class="line">desc.checkDeserialize();</span><br><span class="line"></span><br><span class="line">Class&lt;?&gt; cl = desc.forClass();</span><br><span class="line"><span class="keyword">if</span> (cl == String<span class="class">.<span class="keyword">class</span> || <span class="title">cl</span> </span>== Class<span class="class">.<span class="keyword">class</span></span></span><br><span class="line"><span class="class">    || <span class="title">cl</span> </span>== ObjectStreamClass<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> InvalidClassException(<span class="string">"invalid class descriptor"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (desc.isExternalizable()) &#123;</span><br><span class="line">  readExternalData((Externalizable) obj, desc);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  readSerialData(obj, desc);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (obj != <span class="keyword">null</span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    obj.readExternal(<span class="keyword">this</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line">    handles.markException(passHandle, ex);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (obj == <span class="keyword">null</span> || handles.lookupException(passHandle) != <span class="keyword">null</span>) &#123;</span><br><span class="line">  defaultReadFields(<span class="keyword">null</span>, slotDesc); <span class="comment">// skip field values</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (slotDesc.hasReadObjectMethod()) &#123;</span><br><span class="line">  ThreadDeath t = <span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">boolean</span> reset = <span class="keyword">false</span>;</span><br><span class="line">  SerialCallbackContext oldContext = curContext;</span><br><span class="line">  <span class="keyword">if</span> (oldContext != <span class="keyword">null</span>)</span><br><span class="line">    oldContext.check();</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    curContext = <span class="keyword">new</span> SerialCallbackContext(obj, slotDesc);</span><br><span class="line"></span><br><span class="line">    bin.setBlockDataMode(<span class="keyword">true</span>);</span><br><span class="line">    slotDesc.invokeReadObject(obj, <span class="keyword">this</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">                         * In most cases, the handle table has already</span></span><br><span class="line"><span class="comment">                         * propagated a CNFException to passHandle at this</span></span><br><span class="line"><span class="comment">                         * point; this mark call is included to address cases</span></span><br><span class="line"><span class="comment">                         * where the custom readObject method has cons'ed and</span></span><br><span class="line"><span class="comment">                         * thrown a new CNFException of its own.</span></span><br><span class="line"><span class="comment">                         */</span></span><br><span class="line">    handles.markException(passHandle, ex);</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        curContext.setUsed();</span><br><span class="line">        <span class="keyword">if</span> (oldContext!= <span class="keyword">null</span>)</span><br><span class="line">          oldContext.check();</span><br><span class="line">        curContext = oldContext;</span><br><span class="line">        reset = <span class="keyword">true</span>;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (ThreadDeath x) &#123;</span><br><span class="line">        t = x;  <span class="comment">// defer until reset is true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (!reset);</span><br><span class="line">    <span class="keyword">if</span> (t != <span class="keyword">null</span>)</span><br><span class="line">      <span class="keyword">throw</span> t;</span><br><span class="line">  &#125;</span><br><span class="line">  defaultDataEnd = <span class="keyword">false</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  defaultReadFields(obj, slotDesc);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (slotDesc.hasWriteObjectData()) &#123;</span><br><span class="line">  skipCustomData();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  bin.setBlockDataMode(<span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (obj != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">      slotDesc.hasReadObjectNoDataMethod() &amp;&amp;</span><br><span class="line">      handles.lookupException(passHandle) == <span class="keyword">null</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    slotDesc.invokeReadObjectNoData(obj);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="QA"><a href="#QA" class="headerlink" title="QA"></a>QA</h2><h3 id="为什么向Stream写入对象的顺序和从Stream读对象的数据的顺序要一样"><a href="#为什么向Stream写入对象的顺序和从Stream读对象的数据的顺序要一样" class="headerlink" title="为什么向Stream写入对象的顺序和从Stream读对象的数据的顺序要一样"></a>为什么向Stream写入对象的顺序和从Stream读对象的数据的顺序要一样</h3><h3 id="为什么父类实现序列化，子类会自动实现"><a href="#为什么父类实现序列化，子类会自动实现" class="headerlink" title="为什么父类实现序列化，子类会自动实现"></a>为什么父类实现序列化，子类会自动实现</h3><blockquote>
<p>因为父类实现了 序列化接口Externalizable或Serializable，由下来源码可知</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// remaining cases</span></span><br><span class="line"><span class="keyword">if</span> (obj <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">  writeString((String) obj, unshared);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (cl.isArray()) &#123;</span><br><span class="line">  writeArray(obj, desc, unshared);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Enum) &#123;</span><br><span class="line">  writeEnum((Enum&lt;?&gt;) obj, desc, unshared);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Serializable) &#123;</span><br><span class="line">  writeOrdinaryObject(obj, desc, unshared);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (extendedDebugInfo) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> NotSerializableException(</span><br><span class="line">      cl.getName() + <span class="string">"\n"</span> + debugInfoStack.toString());</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> NotSerializableException(cl.getName());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在此处相当于子类也实现了，所以当父类实现序列化时，子类也会自动实现</p>
</blockquote>
<h3 id="子类实现序列化，父类的属性不可以正常实例化"><a href="#子类实现序列化，父类的属性不可以正常实例化" class="headerlink" title="子类实现序列化，父类的属性不可以正常实例化"></a>子类实现序列化，父类的属性不可以正常实例化</h3><blockquote>
<p>实现 Externalizable 接口的类，在反序列化时需要无参的构造函数，所以为了构造父对象时，只能调用无参构造函数作为默认的父对象，因此父类的属性值是无参构造函数执行后的值</p>
</blockquote>
<h3 id="serialVersionUID如何保证版本兼容"><a href="#serialVersionUID如何保证版本兼容" class="headerlink" title="serialVersionUID如何保证版本兼容"></a>serialVersionUID如何保证版本兼容</h3>]]></content>
      <categories>
        <category>源码分析</category>
      </categories>
      <tags>
        <tag>Java序列化</tag>
        <tag>Externalizable</tag>
        <tag>Serializable</tag>
      </tags>
  </entry>
  <entry>
    <title>黄金圈法则What-How-Why</title>
    <url>/2020/07/01/%E9%BB%84%E9%87%91%E5%9C%88%E6%B3%95%E5%88%99What-How-Why/</url>
    <content><![CDATA[<blockquote>
<p>本文内容转自作者[朱利安_AI产品经理]的博客 <a href="https://www.jianshu.com/p/f1185cc40c41" target="_blank" rel="noopener">思考的梯子 | 黄金圈法则What-How-Why(超干货)</a></p>
</blockquote>
<h2 id="「黄金圈」是什么？"><a href="#「黄金圈」是什么？" class="headerlink" title="「黄金圈」是什么？"></a>「黄金圈」是什么？</h2><blockquote>
<p>这里的「黄金圈」并不是金拱门那个</p>
</blockquote>
<p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593614321/1060404-94a6f1ba2acd1ae5_yitj9c.webp" alt="images"></p>
<blockquote>
<p>「黄金圈」法则是营销大师Simon Sinek 提出的理论</p>
</blockquote>
<p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593614413/1060404-bc89d66866e63b1c_fn4ccq.webp" alt="images"></p>
<blockquote>
<p>上面这段英文的大概意思就是消费者更愿意为「本质需求」买单。</p>
</blockquote>
<blockquote>
<p>举个例子（瞎编的），假设外国车在一开始中国本地化的时候</p>
</blockquote>
<ul>
<li><h4 id="宝马宣传策略"><a href="#宝马宣传策略" class="headerlink" title="宝马宣传策略"></a>宝马宣传策略</h4></li>
</ul>
<blockquote>
<p>车好，发动机好，省油，动力足，安全</p>
</blockquote>
<ul>
<li><h4 id="奥迪宣传策略"><a href="#奥迪宣传策略" class="headerlink" title="奥迪宣传策略"></a>奥迪宣传策略</h4></li>
</ul>
<blockquote>
<p>中国特有加长版，后排乘坐超舒适，尊贵</p>
</blockquote>
<blockquote>
<p><strong>这种情况下高端市场谁的销量好？</strong></p>
</blockquote>
<blockquote>
<p>肯定是「奥迪」，高端车和普通车，都是四个轮子，<strong>如何体现差异性</strong>，这时候再从表象入手已经不能体现差异，必须深入到人内心的本质。</p>
<p><strong>国人好面子，「加长」「尊贵」简直就是直击老板们的内心，销量自然不差</strong></p>
<p>上面的case中，如果只看到了「表象」，谈论的就是「是什么」，就是在「What」层面，但谈论的是「为什么」的时候，已经深入到了「Why」层面。</p>
</blockquote>
<blockquote>
<p><strong>将事物分为「What-How-Why」逐层深入，就是「黄金圈」法则。</strong></p>
<p>而在实际生活和工作中使用，网上各种版本都有，切入的角度不相同，下面总结两种我认为比较合适的切入角度。</p>
</blockquote>
<h2 id="使用「黄金圈」实现「1–-gt-0-1」的过程"><a href="#使用「黄金圈」实现「1–-gt-0-1」的过程" class="headerlink" title="使用「黄金圈」实现「1–&gt;0.1」的过程"></a>使用「黄金圈」实现「1–&gt;0.1」的过程</h2><p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593614662/1060404-bdebe9419348bd52_joe6ct.webp" alt="images"></p>
<blockquote>
<p>当一个事物，现象或者需求已经存在的时，<strong>我们想要去探寻它，了解它，学习或者分享它的时候</strong>，适合用<strong>「What - How - Why」</strong>的思维方式</p>
</blockquote>
<h3 id="我们学新事物的过程"><a href="#我们学新事物的过程" class="headerlink" title="我们学新事物的过程"></a>我们学新事物的过程</h3><blockquote>
<p>当面对一个新的事物，如果上来直接讲原理，多数人是会懵逼的</p>
<p>但如果你从表象出发</p>
<ul>
<li>What - 了解完这个东西是什么？</li>
<li>How - 再了解这个东西它是怎么使用的？</li>
<li>Why - 最终再去了解原理</li>
</ul>
<p><strong>那么这个过程就会变得顺畅很多，而这个过程实际也就是这样一个整体拆成一个个组成部分，掰开揉碎的过程</strong></p>
</blockquote>
<h3 id="给老外介绍微信支付的case"><a href="#给老外介绍微信支付的case" class="headerlink" title="给老外介绍微信支付的case"></a>给老外介绍微信支付的case</h3><blockquote>
<p>举一个简单例子，假如有个老外来中国，他完全没有用过移动支付，你需要给他介绍微信支付</p>
</blockquote>
<h4 id="Step1-What"><a href="#Step1-What" class="headerlink" title="Step1 - What"></a>Step1 - What</h4><blockquote>
<p>你需要告诉他什么是微信支付？最简单的例子就是直接给他演示一遍支付的过程。</p>
</blockquote>
<p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593614757/1060404-85b8db355ba4e86e_g1b1ef.webp" alt="images"></p>
<h4 id="Step2-How"><a href="#Step2-How" class="headerlink" title="Step2 - How"></a>Step2 - How</h4><blockquote>
<p>而当他知道了什么是微信支付之后，你教她如何使用微信支付，就需要一步一步的引导</p>
<ol>
<li>绑定银行卡</li>
<li>实名认证</li>
<li>开通微信支付</li>
<li>设定密码</li>
<li>使用</li>
</ol>
</blockquote>
<p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593614838/1060404-422053e0c54a3e55_umxurz.webp" alt="images"></p>
<h4 id="Step3-Why"><a href="#Step3-Why" class="headerlink" title="Step3 - Why"></a>Step3 - Why</h4><blockquote>
<p>后续随着交谈的进一步深入</p>
<p>你们可以<strong>再去讨论一下为什么在中国会诞生如此通用的微信支付</strong>？</p>
</blockquote>
<blockquote>
<p>又或者探讨一下<strong>为什么</strong>国内的人愿意使用微信支付，但是<strong>在外国更多使用信用卡？</strong></p>
<p>探索内容其实是围绕的<strong>微信支付引申出的更加深入的内容</strong>，可能会涉及到社会的科技，经济，文化等。</p>
</blockquote>
<p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593614882/1060404-47a0245ff32e4a25_lrrrzt.webp" alt="images"></p>
<blockquote>
<p>通过以上简单的例子，说明<strong>当一个事物它本身存在在那里，你要去介绍或者探索它的时候就可以通过「What - How - Why」的方式，实现「1-&gt;0.1」逐步拆解</strong>。</p>
<p>千万不要觉得这东西太简单没有用。</p>
<p>我们试着<strong>把场景延伸一点，例如你去分析用户需求时，实际也可以使用这个策略</strong></p>
</blockquote>
<h3 id="运营人员的数据看板的case"><a href="#运营人员的数据看板的case" class="headerlink" title="运营人员的数据看板的case"></a>运营人员的数据看板的case</h3><blockquote>
<p>例如你要给公司内部运营人员做「数据看板」的工具，自动获取当天的数据形成图表显示。</p>
<p>当你收集需求的时候，注意！<strong>这个需求是已经存在的，你是可以通过需要通过「What - How - Why」的步骤去深入挖掘</strong></p>
<p>例如，面对面交流时</p>
<ul>
<li>what - 运营人员口头表述的需求是什么？</li>
<li>How - 他们现在<strong>用什么流程实现上述需求</strong>？（没有数据看板工具时，他们用什么流程完成数据汇总展示）</li>
<li>Why - 为什么会有这个需求？是因为KPI指标？还是领导个人喜好？</li>
</ul>
</blockquote>
<h3 id="介绍一本书-一个工具-一部电影case"><a href="#介绍一本书-一个工具-一部电影case" class="headerlink" title="介绍一本书/一个工具/一部电影case"></a>介绍一本书/一个工具/一部电影case</h3><blockquote>
<p>再比如你在写文章介绍自己喜欢的一本书时</p>
<ul>
<li>what - 这本书是关于什么内容？</li>
<li>How - 作者是如何去呈现这些内容？建议读者怎样去阅读这本书？</li>
<li>Why - 为什么推荐这本书？为什么作者会有书中的这些观点，而我是怎么看的？等</li>
</ul>
<p>合理的使用「What - How - Why」，<strong>它能够在你大脑毫无思绪的时候，快速建立起逻辑框架</strong>，顺着这个框架往下走，能够深入的挖掘出不少有价值的内容。</p>
</blockquote>
<h2 id="使用「黄金圈」实现「0-1–-gt-1」的过程"><a href="#使用「黄金圈」实现「0-1–-gt-1」的过程" class="headerlink" title="使用「黄金圈」实现「0.1–&gt;1」的过程"></a>使用「黄金圈」实现「0.1–&gt;1」的过程</h2><blockquote>
<p>在产品策划需求的时候，需要<strong>将大脑中的点子，转化为最终实际可以被用户使用的产品。</strong></p>
<p>这个过程我认为是从「0.1–&gt;1」的过程，适合用「What - Why - How」的方式</p>
</blockquote>
<p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593615064/1060404-cfdf00fc910db12b_fbbt49.webp" alt="images"></p>
<blockquote>
<p>策划产品功能时，<strong>一开始是不知道最终的形态是什么的，所以你需要从零开始一点点的深入，积累每一个0.1，最终才能形成一个完整的1。</strong></p>
<p>举一个用户反馈功能策划的思考过程</p>
</blockquote>
<h3 id="用户反馈功能策划case"><a href="#用户反馈功能策划case" class="headerlink" title="用户反馈功能策划case"></a>用户反馈功能策划case</h3><h4 id="Step1-What-1"><a href="#Step1-What-1" class="headerlink" title="Step1 - What"></a>Step1 - What</h4><blockquote>
<p><strong>用户说需要一个反馈功能</strong>，我们设想<strong>用户能够利用该功能吐槽产品，反馈他的建议</strong>，产品人员能看到用户的建议，从而改进我们的产品</p>
<p>但如果直接开发，可能并没有挖到用户真实的需求</p>
</blockquote>
<p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593615165/1060404-fa613dd03c41a47f_vuhnqv.webp" alt="images"></p>
<h4 id="Step2-Why"><a href="#Step2-Why" class="headerlink" title="Step2 - Why"></a>Step2 - Why</h4><blockquote>
<p>我们继续去探索下，<strong>为什么用户会有这个需求？</strong></p>
<p>问用户为什么需要这个功能时，解释说<strong>因为要退货，但是不知道怎么退</strong>，产品上也没有任何的提示，希望得到你们的帮助，所以我希望有反馈功能，<strong>你们看到我的问题就可以帮我退货</strong>。</p>
</blockquote>
<blockquote>
<p>好吧，其实<strong>用户想要的并不是一个用户反馈的功能，而是一个帮助中心的功能</strong>，因为他不知道怎么去完成退货，APP里又不存在帮助中心。</p>
<p><strong>在他过往的概念里，退货就是打电话反馈给相应的人，这个问题就能解决，所以他需要一个反馈的功能。</strong></p>
<p>虽然用反馈功能确实能够解决这<strong>一个用户</strong>的问题，但它不是最佳的方式。反而提供<strong>「帮助中心」</strong>给他，不仅能解决他一个人的问题，也<strong>能解决其他用户的问题</strong>。</p>
</blockquote>
<p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593615229/1060404-89f4000f8db3faee_ytqw4r.webp" alt="images"></p>
<h4 id="Step3-How"><a href="#Step3-How" class="headerlink" title="Step3 - How"></a>Step3 - How</h4><blockquote>
<p>开始思考如何实现帮助中心，用「Visio」梳理清楚，当有了清晰流程后，再用「Auxre」画原型。</p>
</blockquote>
<p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593615260/1060404-7db96e912eb0dc08_ey48wc.webp" alt="images"></p>
<blockquote>
<p>上述的这个例子实际是虚构的，但做产品过程中，问题会比上述的更为复杂，而且要规划的是一整个产品的所有用功能</p>
<p>但其实是对于整个产品，<strong>这样的思考思路依旧是成立的，将一整个产品拆散给一个个的业务流，每一个业务流里面去使用「What - Why - How」</strong></p>
</blockquote>
<h3 id="完成老板的需求的case"><a href="#完成老板的需求的case" class="headerlink" title="完成老板的需求的case"></a>完成老板的需求的case</h3><blockquote>
<p>如果你不是产品策划人员，这个思考方式依旧对你有用。</p>
</blockquote>
<blockquote>
<p><strong>例如某天临下班的时，老板说做一个介绍公司的PPT，明天上午就要用！</strong></p>
<p>如果你没有任何的思考，直接去做，<strong>即使你熬夜通宵</strong>，做出了一份「公司简史」，描述过公司从创立到现今取得的种种成就，公司的愿景，使命，价值观等，<strong>但第二天老板可能大发雷霆，因为你写的东西并不是他想要的。</strong></p>
<p><strong>你可以使用如下的方式思考</strong></p>
<ul>
<li><strong>what</strong> - 做一个介绍公司的PPT</li>
<li><strong>Why</strong> - <strong>为什么需要做一个PPT？</strong></li>
</ul>
<p>老板回答「<strong>明天上午有投资人过来</strong>，需要你写个PPT，介绍一下我们公司」，价值，愿景，使命这些带过就可以了，着重描述一下我们的产品</p>
</blockquote>
<blockquote>
<p>需求明确了，老板是想<strong>通过**</strong>介绍我们公司的产品来获得投资人的青睐<strong>，所以你</strong>应该思考投资人希望看到什么**。</p>
<p>例如产品的市场占有率，增长率，日活跃等等，表现产品在市面上蒸蒸日上的感觉</p>
</blockquote>
<blockquote>
<ul>
<li><strong>How</strong> - 将上述你思考的需要给投资人看的点，通过PPT描述出来</li>
</ul>
</blockquote>
<h3 id="两种思考方式如何配合？"><a href="#两种思考方式如何配合？" class="headerlink" title="两种思考方式如何配合？"></a>两种思考方式如何配合？</h3><blockquote>
<p><strong>上述提及的两种思考方式，实际是相辅相成的。</strong></p>
<p>当你设计一个东西的时候，东西不存在，是「0.1 –&gt;1」的过程，用「What - Why - How」去思考整体流程。</p>
<p>而当你去探寻一个已知的事物的时候，实现「0.1 –&gt; 0.01」逐步拆解的过程，用「What - How - Why」的方式</p>
</blockquote>
<blockquote>
<p><strong>再回来看 「用户反馈需求的case」</strong></p>
<p>case里面我们用了「What - Why - How」的过程</p>
</blockquote>
<p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593615444/1060404-c24d2349c1647492.png_ahvcaj.webp" alt="images"></p>
<blockquote>
<p>而<strong>「Why」这一步去探寻用户的需求的时候，**</strong>是站在「用户的视角」，用「What - How - Why」去深挖**</p>
</blockquote>
<blockquote>
<p><strong>再回看「给老板写PPT的Case」</strong></p>
<p>因为这个PPT，你不明确要写什么内容的时候，你要去创造它，我们用了「What - Why - How」的流程</p>
</blockquote>
<p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593615497/1060404-071cee81e04b7cde.png_pwl5va.webp" alt="images"></p>
<blockquote>
<p><strong>当你在思考「why」时，是去思考「投资人」想要看什么，使用「What - How - Why」的方式去深挖。</strong></p>
<p>而最终实际展示给投资人的PPT，也是通过「What - How - Why」来讲解，展示公司的实力。</p>
</blockquote>
<blockquote>
<p>所以，当你在<strong>创造时，从「0.1–&gt;1」，用「What - Why - How」</strong>的大流程，去逐渐的将每个0.1拼接起来，成为1</p>
<p>但当你要<strong>深挖需求的时候，实际就是要深入的每一个「0.1」</strong>，<strong>你要切换视角</strong>，<strong>将自己**</strong>作为需求方去思考「What - How - Why」**，去深挖。</p>
</blockquote>
<p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593615549/1060404-7cd0dfcf681814d1_chshnl.webp" alt="images"></p>
<blockquote>
<p>两种思维方式实际在过程中是不断切换使用，不断的将每一个「0.1」思考透彻，最终逐步汇聚成「1」</p>
<p>以上说的可能有点绕，如果看不明白的话，可以认真再看一遍 : P</p>
</blockquote>
<h2 id="为什么推荐用「黄金圈」？"><a href="#为什么推荐用「黄金圈」？" class="headerlink" title="为什么推荐用「黄金圈」？"></a>为什么推荐用「黄金圈」？</h2><blockquote>
<p>在我「梯子仓库」中，其实存在着多种思考模型，但是<strong>「黄金圈」却是我最常用的一种</strong>，我自己在生活中和在产品策划上的亲身实践经验也告诉我，<strong>这个思考方式普适性很广，极力推荐。</strong></p>
</blockquote>
<p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593615616/1060404-0d1ee818b49c0354_g8g4aw.webp" alt="images"></p>
<blockquote>
<p><strong>熟练的使用「黄金圈」，能很快的从「表象层」下的「本质层」去打「本质大Boss」，获得Boss爆出的装备 —— 「</strong>部分的<strong>真相」</strong></p>
</blockquote>
<p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593615643/1060404-5ae0e77b111e26cc_yx0pzu.webp" alt="images"></p>
<h2 id="重点总结"><a href="#重点总结" class="headerlink" title="重点总结"></a>重点总结</h2><h3 id="什么是「黄金圈」法则？"><a href="#什么是「黄金圈」法则？" class="headerlink" title="什么是「黄金圈」法则？"></a>什么是「黄金圈」法则？</h3><blockquote>
<p>由营销大师 Simon Sinek 提出的理论，事物有「What，How，Why」三个层，逐层深入</p>
<ul>
<li><strong>What</strong>，是什么</li>
<li><strong>How</strong>，如何实现</li>
<li><strong>Why</strong>，为什么是这样（而不是另外的样子呢）？</li>
</ul>
</blockquote>
<h3 id="如何在工作和生活中使用「黄金圈」法则？"><a href="#如何在工作和生活中使用「黄金圈」法则？" class="headerlink" title="如何在工作和生活中使用「黄金圈」法则？"></a>如何在工作和生活中使用「黄金圈」法则？</h3><h4 id="当你构思的时候，使用「what-why-how」"><a href="#当你构思的时候，使用「what-why-how」" class="headerlink" title="当你构思的时候，使用「what - why - how」"></a>当你构思的时候，使用「what - why - how」</h4><blockquote>
<p>拿到一个需求不要立刻动手画原型，先思考可能的本质（为什么有这个需求），想清楚每一个「0.1」，最终再汇总为「1」，形成方案。</p>
</blockquote>
<h4 id="当你需要深入细节部分的时候，使用「What-How-Why」"><a href="#当你需要深入细节部分的时候，使用「What-How-Why」" class="headerlink" title="当你需要深入细节部分的时候，使用「What - How - Why」"></a>当你需要深入细节部分的时候，使用「What - How - Why」</h4><blockquote>
<p>一个事物本身存在在那里，你要去探索或介绍它时，可以通过「What - How - Why」的方式，通过「0.1–&gt;0.01」逐步拆解的过程，获得更深入的挖掘。</p>
</blockquote>
<blockquote>
<p>这篇文章你可能看的觉得累，良药苦口，希望对你有帮助，感谢优秀的你耐心看完啦~</p>
</blockquote>
]]></content>
      <categories>
        <category>方法论</category>
      </categories>
      <tags>
        <tag>What-How-Why</tag>
        <tag>黄金圈</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA调试技巧</title>
    <url>/2020/07/01/IDEA%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<blockquote>
<p>本文内容转自作者光年的博客 <a href="https://www.cnblogs.com/jun1019/p/9741224.html" target="_blank" rel="noopener">你可能不知道的IDEA高级调试技巧</a></p>
</blockquote>
<h2 id="条件断点"><a href="#条件断点" class="headerlink" title="条件断点"></a>条件断点</h2><blockquote>
<p>循环中经常用到这个技巧，比如：遍历1个大List的过程中，想让断点停在某个特定值。</p>
</blockquote>
<p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593539643/640_d1dije.png" alt="img"></p>
<blockquote>
<p>参考上图，在断点的位置，右击断点旁边的小红点，会出来一个界面，在Condition这里填入断点条件即可，这样调试时，就会自动停在i=10的位置</p>
</blockquote>
<p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593539683/640_yum8dv.png" alt="img"></p>
<h2 id="回到”上一步”"><a href="#回到”上一步”" class="headerlink" title="回到”上一步”"></a>回到”上一步”</h2><blockquote>
<p>该技巧最适合特别复杂的方法套方法的场景，好不容易跑起来，一不小心手一抖，断点过去了，想回过头看看刚才的变量值，如果不知道该技巧，只能再跑一遍。</p>
</blockquote>
<p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593539717/640_lajuxz.png" alt="img"></p>
<blockquote>
<p>参考上图，method1方法调用method2，当前断点的位置j=100，点击上图红色箭头位置的Drop Frame图标后，时间穿越了</p>
</blockquote>
<p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593539752/640_piua3m.png" alt="img"></p>
<blockquote>
<p>回到了method1刚开始调用的时候，变量i变成了99，没毛病吧，老铁们，是不是很6 :)</p>
</blockquote>
<blockquote>
<p>注：好奇心是人类进步的阶梯，如果想知道为啥这个功能叫Drop Frame，而不是类似Back To Previous 之类的，可以去翻翻JVM的书，JVM内部以栈帧为单位保存线程的运行状态，drop frame即扔掉当前运行的栈帧，这样当前“指针”的位置，就自然到了上一帧的位置。</p>
</blockquote>
<h2 id="多线程调试"><a href="#多线程调试" class="headerlink" title="多线程调试"></a>多线程调试</h2><blockquote>
<p>多线程同时运行时，谁先执行，谁后执行，完全是看CPU心情的，无法控制先后，运行时可能没什么问题，但是调试时就比较麻烦了，最明显的就是断点乱跳，一会儿停这个线程，一会儿停在另一个线程，比如下图</p>
</blockquote>
<p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593539790/640_wnwb9x.png" alt="img"></p>
<blockquote>
<p>如果想希望下一个断点位置是第2句诗句，可能要失望了：</p>
</blockquote>
<p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593539818/640_so81g4.png" alt="img"></p>
<blockquote>
<p>如果想让线程在调试时，想按自己的愿意来，让它停在哪个线程就停在哪个线程，可以在图中3个断点的小红点上右击，</p>
</blockquote>
<p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593539845/640_efqx7c.png" alt="img"></p>
<blockquote>
<p>即：Suspend挂起的条件是按每个线程来，而非All。把这3个断点都这么设置后，再来一发试试</p>
</blockquote>
<p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593539878/640_icm5kx.png" alt="img"></p>
<blockquote>
<p>注意上图中的红框位置，断点停下来时，这个下拉框可以看到各个线程（注：给线程起个容易识别的名字是个好习惯！），我们可以选择线程“天空中的飞鸟”</p>
</blockquote>
<p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593540251/27612-20170415105122517-107387528_xljbze.png" alt="img"></p>
<blockquote>
<p>断点如愿停在了第2句诗。</p>
</blockquote>
<h2 id="远程调试"><a href="#远程调试" class="headerlink" title="远程调试"></a>远程调试</h2><blockquote>
<p>这也是一个装B的利器，本机不用启动项目，只要有源代码，可以在本机直接远程调试服务器上的代码，打开姿势如下：</p>
</blockquote>
<h3 id="项目启动时，先允许远程调试"><a href="#项目启动时，先允许远程调试" class="headerlink" title="项目启动时，先允许远程调试"></a>项目启动时，先允许远程调试</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">java -server -Xms512m -Xmx512m -Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt\_socket,server=y,<span class="built_in">suspend</span>=n,address=9081 -Djava.ext.dirs=. <span class="variable">$&#123;main\_class&#125;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>起作用的就是</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,<span class="built_in">suspend</span>=n,address=9081</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：远程调试从技术上讲，就是在本机与远程建立scoket通讯，所以端口不要冲突，而且本机要允许访问远程端口，另外这一段参数，放要在-jar 或 ${main_class}的前面</p>
</blockquote>
<h3 id="idea中设置远程调试"><a href="#idea中设置远程调试" class="headerlink" title="idea中设置远程调试"></a>idea中设置远程调试</h3><p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593540024/640_bhwihk.png" alt="img"></p>
<blockquote>
<p>然后就可以调试了</p>
</blockquote>
<p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593540052/640_xs7tio.png" alt="img"></p>
<h2 id="临时执行表达式-修改变量的运行值"><a href="#临时执行表达式-修改变量的运行值" class="headerlink" title="临时执行表达式/修改变量的运行值"></a>临时执行表达式/修改变量的运行值</h2><blockquote>
<p>调试时，可以临时执行一些表达式，参考下图：点击这二个图标中的任何1个都可以</p>
</blockquote>
<p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593540081/640_k7lqd7.png" alt="img"></p>
<blockquote>
<p>点击+号后，就可以在新出现的输入框里输入表达式，比如i+5</p>
</blockquote>
<p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593540109/640_myrbws.png" alt="img"></p>
<blockquote>
<p>然后回车，马上就能看到结果</p>
</blockquote>
<p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593540137/640_md8g3e.png" alt="img"></p>
<blockquote>
<p>当然，如果调试时，想动态修改变量的值，也很容易，在变量上右击，然后选择Set Value，剩下的事，地球人都知道。</p>
</blockquote>
<p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593540166/640_fnnxll.png" alt="img"></p>
<blockquote>
<p>善用上述调试技巧，相当大家撸起代码来会更有感觉，祝大家使用愉快！</p>
</blockquote>
]]></content>
      <categories>
        <category>环境配置</category>
      </categories>
      <tags>
        <tag>IntelliJ IDEA</tag>
        <tag>调试技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>String源码分析</title>
    <url>/2020/07/01/String%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<blockquote>
<p>Java中所有的字符串都是String类实例的实现。</p>
</blockquote>
<blockquote>
<p>字符串是常量，所以一旦字符串被创建后，它们的值就不能被更改。 <strong>但字符串缓冲区支持可变字符串</strong></p>
</blockquote>
<blockquote>
<p>正因为String对象不可变，所以他们可以被共享。例如：String str = “abc”; 和 char data[] = {‘a’,’b’,’c’}; String str = new String(data); 这两个str相等。</p>
</blockquote>
<blockquote>
<p>Java对连接运算符(+)提供了特殊的支持，用于其他对象转换为string</p>
</blockquote>
<blockquote>
<p>字符串转换通过Object基类中的<code>toString</code>方法实现</p>
</blockquote>
<h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><h3 id="value"><a href="#value" class="headerlink" title="value"></a>value</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** The value is used for character storage. */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">char</span> value[];</span><br></pre></td></tr></table></figure>

<blockquote>
<p>从注释可以看出，这个value[]是用来实际保存字符串内容的 该变量被修饰为final, 而final修饰数组(引用数据类型)时，该数组本身可以修改，但指向该数组的地址的引用不能修改 但String初始化后可以被修改啊？如：String str = “abc”; str = “123”; 此处的其实并没有修改”abc”的引用，而是str先断开”abc”的引用，再将”123”的引用赋给str</p>
</blockquote>
<h3 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** Cache the hash code for the string */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> hash; <span class="comment">// Default to 0</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>从注释可以看出，hash是字符串的哈希值 【hash的作用】 Java的对象是存储在堆中的，为了提高对象的查询效率使用散列值查找。散列值的使用方式时，定义一个键来映射对象所在的内存地址，当需要查找对象时，可以直接用这个键去查找而不用遍历整个堆中的对象，这个值就是此处的hash</p>
</blockquote>
<h3 id="serialVersionUID"><a href="#serialVersionUID" class="headerlink" title="serialVersionUID"></a>serialVersionUID</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** use serialVersionUID from JDK 1.0.2 for interoperability */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">6849794470754667710L</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class String is special cased within the Serialization Stream Protocol.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * A String instance is written into an ObjectOutputStream according to</span></span><br><span class="line"><span class="comment"> * &lt;a href="&#123;<span class="doctag">@docRoot</span>&#125;/../platform/serialization/spec/output.html"&gt;</span></span><br><span class="line"><span class="comment"> * Object Serialization Specification, Section 6.2, "Stream Elements"&lt;/a&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ObjectStreamField[] serialPersistentFields =</span><br><span class="line">    <span class="keyword">new</span> ObjectStreamField[<span class="number">0</span>];</span><br></pre></td></tr></table></figure>

<blockquote>
<p>String类实现了序列化Serializable接口，在网络传输或固态化对象是，通过序列化的方式实现。 这两个参数就是用来实现序列化和反序列化的。 在JVM的反序列化中，會比較數據流中的serialVersionUID和類中的serialVersionUID是否相等，如果相等，則認爲類沒有變化，可以把數據流加載成實例對象，如果不同則抛出InvalidClassException異常</p>
</blockquote>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><h4 id="无参构造器"><a href="#无参构造器" class="headerlink" title="无参构造器"></a>无参构造器</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.value = <span class="string">""</span>.value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>初始化创建一个新的空字符串的String对象，注意尽量不用这个构造方法，因为会创建不可变的空的字符串对象，会浪费JVM进行GC处理</p>
<p>此处的 <strong>“”.value</strong> 其实就是Object.value，”” 就是这个Object</p>
</blockquote>
<h4 id="字符串参数的构造器"><a href="#字符串参数的构造器" class="headerlink" title="字符串参数的构造器"></a>字符串参数的构造器</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(String original)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.value = original.value;</span><br><span class="line">    <span class="keyword">this</span>.hash = original.hash;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在实现中，直接将字符串内容和hash值赋值给新创建对象的value和hash</p>
</blockquote>
<h4 id="字符数组参数的构造器"><a href="#字符数组参数的构造器" class="headerlink" title="字符数组参数的构造器"></a>字符数组参数的构造器</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">char</span> value[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.value = Arrays.copyOf(value, value.length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">char</span> value[], <span class="keyword">int</span> offset, <span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (offset &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(offset);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (count &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (count &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(count);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (offset &lt;= value.length) &#123;</span><br><span class="line">            <span class="keyword">this</span>.value = <span class="string">""</span>.value;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Note: offset or count might be near -1&gt;&gt;&gt;1.</span></span><br><span class="line">    <span class="keyword">if</span> (offset &gt; value.length - count) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(offset + count);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.value = Arrays.copyOfRange(value, offset, offset+count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>用字符数组创建String类是，会用Arrays类的copyOf或copyOfRange方法，将旧数据复制到新数组返回的</p>
</blockquote>
<h4 id="通过unicode的编码值数组初始化String对象"><a href="#通过unicode的编码值数组初始化String对象" class="headerlink" title="通过unicode的编码值数组初始化String对象"></a>通过unicode的编码值数组初始化String对象</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">int</span>[] codePoints, <span class="keyword">int</span> offset, <span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (offset &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(offset);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (count &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (count &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(count);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (offset &lt;= codePoints.length) &#123;</span><br><span class="line">            <span class="keyword">this</span>.value = <span class="string">""</span>.value;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Note: offset or count might be near -1&gt;&gt;&gt;1.</span></span><br><span class="line">    <span class="keyword">if</span> (offset &gt; codePoints.length - count) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(offset + count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> end = offset + count;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Pass 1: Compute precise size of char[]</span></span><br><span class="line">    <span class="keyword">int</span> n = count;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = offset; i &lt; end; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> c = codePoints[i];</span><br><span class="line">        <span class="keyword">if</span> (Character.isBmpCodePoint(c))</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (Character.isValidCodePoint(c))</span><br><span class="line">            n++;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(Integer.toString(c));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Pass 2: Allocate and fill in char[]</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">char</span>[] v = <span class="keyword">new</span> <span class="keyword">char</span>[n];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = offset, j = <span class="number">0</span>; i &lt; end; i++, j++) &#123;</span><br><span class="line">        <span class="keyword">int</span> c = codePoints[i];</span><br><span class="line">        <span class="keyword">if</span> (Character.isBmpCodePoint(c))</span><br><span class="line">            v[j] = (<span class="keyword">char</span>)c;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            Character.toSurrogates(c, v, j++);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.value = v;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>该方法的前半部分和<em>字符数组参数</em>的实现一样，后面将int数组转换为字符串数组，然后赋值给value</p>
</blockquote>
<h4 id="字节数组参数构造器"><a href="#字节数组参数构造器" class="headerlink" title="字节数组参数构造器"></a>字节数组参数构造器</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">byte</span> bytes[], <span class="keyword">int</span> offset, <span class="keyword">int</span> length, String charsetName)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (charsetName == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"charsetName"</span>);</span><br><span class="line">    checkBounds(bytes, offset, length);</span><br><span class="line">    <span class="keyword">this</span>.value = StringCoding.decode(charsetName, bytes, offset, length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">byte</span> bytes[], <span class="keyword">int</span> offset, <span class="keyword">int</span> length, Charset charset)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (charset == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"charset"</span>);</span><br><span class="line">    checkBounds(bytes, offset, length);</span><br><span class="line">    <span class="keyword">this</span>.value =  StringCoding.decode(charset, bytes, offset, length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">byte</span> bytes[], String charsetName)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(bytes, <span class="number">0</span>, bytes.length, charsetName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">byte</span> bytes[], Charset charset)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(bytes, <span class="number">0</span>, bytes.length, charset);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">byte</span> bytes[], <span class="keyword">int</span> offset, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">    checkBounds(bytes, offset, length);</span><br><span class="line">    <span class="keyword">this</span>.value = StringCoding.decode(bytes, offset, length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">byte</span> bytes[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(bytes, <span class="number">0</span>, bytes.length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Java的String中是按Unicode编码来存储内容的，在网络中Java对象以byte的形式传输，当需要将byte和String之间转换时就需要指定编码方式，具体使用StringCoding的decode的方法解码, 当不传编码方式，如下默认使用ISO-8859-1</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">char</span>[] decode(<span class="keyword">byte</span>[] ba, <span class="keyword">int</span> off, <span class="keyword">int</span> len) &#123;</span><br><span class="line">    String csn = Charset.defaultCharset().name();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// use charset name decode() variant which provides caching.</span></span><br><span class="line">        <span class="keyword">return</span> decode(csn, ba, off, len);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (UnsupportedEncodingException x) &#123;</span><br><span class="line">        warnUnsupportedCharset(csn);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> decode(<span class="string">"ISO-8859-1"</span>, ba, off, len);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (UnsupportedEncodingException x) &#123;</span><br><span class="line">        <span class="comment">// If this code is hit during VM initialization, MessageUtils is</span></span><br><span class="line">        <span class="comment">// the only way we will be able to get any kind of error message.</span></span><br><span class="line">        MessageUtils.err(<span class="string">"ISO-8859-1 charset not available: "</span></span><br><span class="line">                         + x.toString());</span><br><span class="line">        <span class="comment">// If we can not find ISO-8859-1 (a required encoding) then things</span></span><br><span class="line">        <span class="comment">// are seriously wrong with the installation.</span></span><br><span class="line">        System.exit(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="StringBuffer-StringBuilder作为参数的构造器"><a href="#StringBuffer-StringBuilder作为参数的构造器" class="headerlink" title="StringBuffer/StringBuilder作为参数的构造器"></a>StringBuffer/StringBuilder作为参数的构造器</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(StringBuffer buffer)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span>(buffer) &#123;</span><br><span class="line">        <span class="keyword">this</span>.value = Arrays.copyOf(buffer.getValue(), buffer.length());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(StringBuilder builder)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.value = Arrays.copyOf(builder.getValue(), builder.length());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这两种构造方法和char数组的类似，都是调用Arrays的copyOf方法，将旧数据复制到新数组然后返回的方式，但StringBuffer是线程安全的。 这两个估摸着很少用到，直接用StringBuffer/StringBuilder的toString方法更方便</p>
</blockquote>
<h4 id="保护类型的构造方法"><a href="#保护类型的构造方法" class="headerlink" title="保护类型的构造方法"></a>保护类型的构造方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* Package private constructor which shares value array for speed.</span></span><br><span class="line"><span class="comment">* this constructor is always expected to be called with share==true.</span></span><br><span class="line"><span class="comment">* a separate constructor is needed because we already have a public</span></span><br><span class="line"><span class="comment">* String(char[]) constructor that makes a copy of the given char[].</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">String(<span class="keyword">char</span>[] value, <span class="keyword">boolean</span> share) &#123;</span><br><span class="line">    <span class="comment">// assert share : "unshared not supported";</span></span><br><span class="line">    <span class="keyword">this</span>.value = value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>该方法是default类型的、也即Package private类型的方法。和 String(char value[]) 方法相比：</p>
<ol>
<li>多了一个boolean的形参，且”this constructor is always expected to be called with share==true.” share恒为true，且在方法体中没有用到该形参。所以share参数只是为了重载这个构造方法</li>
<li>方法体中的实现不同。 String(char value[])的方法是通过Arrays.copyOf申请新地址，然后将旧内容逐一拷贝到新申请的地址中。 String(char[] value, boolean share)方法是直接将旧的数组引用赋值给新值，也就是新值和旧值同时指向同一个地址。</li>
</ol>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">char</span> value[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.value = Arrays.copyOf(value, value.length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">char</span>[] copyOf(<span class="keyword">char</span>[] original, <span class="keyword">int</span> newLength) &#123;</span><br><span class="line">    <span class="keyword">char</span>[] copy = <span class="keyword">new</span> <span class="keyword">char</span>[newLength];</span><br><span class="line">    System.arraycopy(original, <span class="number">0</span>, copy, <span class="number">0</span>,</span><br><span class="line">                     Math.min(original.length, newLength));</span><br><span class="line">    <span class="keyword">return</span> copy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h3><h4 id="与对象比较-equals"><a href="#与对象比较-equals" class="headerlink" title="与对象比较 equals"></a>与对象比较 equals</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Compares this string to the specified object.  The result is &#123;<span class="doctag">@code</span></span></span><br><span class="line"><span class="comment"> * true&#125; if and only if the argument is not &#123;<span class="doctag">@code</span> null&#125; and is a &#123;<span class="doctag">@code</span></span></span><br><span class="line"><span class="comment"> * String&#125; object that represents the same sequence of characters as this</span></span><br><span class="line"><span class="comment"> * object.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  anObject</span></span><br><span class="line"><span class="comment"> *         The object to compare this &#123;<span class="doctag">@code</span> String&#125; against</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  &#123;<span class="doctag">@code</span> true&#125; if the given object represents a &#123;<span class="doctag">@code</span> String&#125;</span></span><br><span class="line"><span class="comment"> *          equivalent to this string, &#123;<span class="doctag">@code</span> false&#125; otherwise</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>  #compareTo(String)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>  #equalsIgnoreCase(String)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object anObject)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == anObject) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (anObject <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">        String anotherString = (String)anObject;</span><br><span class="line">        <span class="keyword">int</span> n = value.length;</span><br><span class="line">        <span class="keyword">if</span> (n == anotherString.value.length) &#123;</span><br><span class="line">            <span class="keyword">char</span> v1[] = value;</span><br><span class="line">            <span class="keyword">char</span> v2[] = anotherString.value;</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (n-- != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (v1[i] != v2[i])</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>String对equals进行了重写。 在该方法中，逐一对比字符串的每个字符，相同返回true，否则返回false</p>
</blockquote>
<h4 id="与StringBuffer-CharSequence比较-contentEquals"><a href="#与StringBuffer-CharSequence比较-contentEquals" class="headerlink" title="与StringBuffer/CharSequence比较 contentEquals"></a>与StringBuffer/CharSequence比较 contentEquals</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contentEquals</span><span class="params">(StringBuffer sb)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> contentEquals((CharSequence)sb);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">nonSyncContentEquals</span><span class="params">(AbstractStringBuilder sb)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> v1[] = value;</span><br><span class="line">    <span class="keyword">char</span> v2[] = sb.getValue();</span><br><span class="line">    <span class="keyword">int</span> n = v1.length;</span><br><span class="line">    <span class="keyword">if</span> (n != sb.length()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v1[i] != v2[i]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contentEquals</span><span class="params">(CharSequence cs)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Argument is a StringBuffer, StringBuilder</span></span><br><span class="line">    <span class="keyword">if</span> (cs <span class="keyword">instanceof</span> AbstractStringBuilder) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cs <span class="keyword">instanceof</span> StringBuffer) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(cs) &#123;</span><br><span class="line">               <span class="keyword">return</span> nonSyncContentEquals((AbstractStringBuilder)cs);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> nonSyncContentEquals((AbstractStringBuilder)cs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Argument is a String</span></span><br><span class="line">    <span class="keyword">if</span> (cs <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">        <span class="keyword">return</span> equals(cs);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Argument is a generic CharSequence</span></span><br><span class="line">    <span class="keyword">char</span> v1[] = value;</span><br><span class="line">    <span class="keyword">int</span> n = v1.length;</span><br><span class="line">    <span class="keyword">if</span> (n != cs.length()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v1[i] != cs.charAt(i)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="忽略大小写比较字符串对象-equalsIgnoreCase"><a href="#忽略大小写比较字符串对象-equalsIgnoreCase" class="headerlink" title="忽略大小写比较字符串对象 equalsIgnoreCase"></a>忽略大小写比较字符串对象 equalsIgnoreCase</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equalsIgnoreCase</span><span class="params">(String anotherString)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">this</span> == anotherString) ? <span class="keyword">true</span></span><br><span class="line">            : (anotherString != <span class="keyword">null</span>)</span><br><span class="line">            &amp;&amp; (anotherString.value.length == value.length)</span><br><span class="line">            &amp;&amp; regionMatches(<span class="keyword">true</span>, <span class="number">0</span>, anotherString, <span class="number">0</span>, value.length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">regionMatches</span><span class="params">(<span class="keyword">boolean</span> ignoreCase, <span class="keyword">int</span> toffset,</span></span></span><br><span class="line"><span class="function"><span class="params">        String other, <span class="keyword">int</span> ooffset, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ta[] = value;</span><br><span class="line">    <span class="keyword">int</span> to = toffset;</span><br><span class="line">    <span class="keyword">char</span> pa[] = other.value;</span><br><span class="line">    <span class="keyword">int</span> po = ooffset;</span><br><span class="line">    <span class="comment">// Note: toffset, ooffset, or len might be near -1&gt;&gt;&gt;1.</span></span><br><span class="line">    <span class="keyword">if</span> ((ooffset &lt; <span class="number">0</span>) || (toffset &lt; <span class="number">0</span>)</span><br><span class="line">            || (toffset &gt; (<span class="keyword">long</span>)value.length - len)</span><br><span class="line">            || (ooffset &gt; (<span class="keyword">long</span>)other.value.length - len)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (len-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">char</span> c1 = ta[to++];</span><br><span class="line">        <span class="keyword">char</span> c2 = pa[po++];</span><br><span class="line">        <span class="keyword">if</span> (c1 == c2) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ignoreCase) &#123;</span><br><span class="line">            <span class="comment">// If characters don't match but case may be ignored,</span></span><br><span class="line">            <span class="comment">// try converting both characters to uppercase.</span></span><br><span class="line">            <span class="comment">// If the results match, then the comparison scan should</span></span><br><span class="line">            <span class="comment">// continue.</span></span><br><span class="line">            <span class="keyword">char</span> u1 = Character.toUpperCase(c1);</span><br><span class="line">            <span class="keyword">char</span> u2 = Character.toUpperCase(c2);</span><br><span class="line">            <span class="keyword">if</span> (u1 == u2) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Unfortunately, conversion to uppercase does not work properly</span></span><br><span class="line">            <span class="comment">// for the Georgian alphabet, which has strange rules about case</span></span><br><span class="line">            <span class="comment">// conversion.  So we need to make one last check before</span></span><br><span class="line">            <span class="comment">// exiting.</span></span><br><span class="line">            <span class="keyword">if</span> (Character.toLowerCase(u1) == Character.toLowerCase(u2)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>此处用三目运算符，如果完全相等直接返回，否则将字符逐一转成大/小写判断是否相等</p>
</blockquote>
<h4 id="比较字符串-compareTo"><a href="#比较字符串-compareTo" class="headerlink" title="比较字符串 compareTo"></a>比较字符串 compareTo</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(String anotherString)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len1 = value.length;</span><br><span class="line">    <span class="keyword">int</span> len2 = anotherString.value.length;</span><br><span class="line">    <span class="keyword">int</span> lim = Math.min(len1, len2);</span><br><span class="line">    <span class="keyword">char</span> v1[] = value;</span><br><span class="line">    <span class="keyword">char</span> v2[] = anotherString.value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (k &lt; lim) &#123;</span><br><span class="line">        <span class="keyword">char</span> c1 = v1[k];</span><br><span class="line">        <span class="keyword">char</span> c2 = v2[k];</span><br><span class="line">        <span class="keyword">if</span> (c1 != c2) &#123;</span><br><span class="line">            <span class="keyword">return</span> c1 - c2;</span><br><span class="line">        &#125;</span><br><span class="line">        k++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> len1 - len2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>逐一比较两字符串的每个字符，长度为两字符串间的最小值，若不相等则返回不相等的两字符的ASCII码差值；若两个字符串长度不等则返回他们的长度差；若相等返回0</p>
</blockquote>
<h4 id="字符串局部匹配相等-regionMatches"><a href="#字符串局部匹配相等-regionMatches" class="headerlink" title="字符串局部匹配相等 regionMatches"></a>字符串局部匹配相等 regionMatches</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">regionMatches</span><span class="params">(<span class="keyword">int</span> toffset, String other, <span class="keyword">int</span> ooffset,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ta[] = value;</span><br><span class="line">    <span class="keyword">int</span> to = toffset;</span><br><span class="line">    <span class="keyword">char</span> pa[] = other.value;</span><br><span class="line">    <span class="keyword">int</span> po = ooffset;</span><br><span class="line">    <span class="comment">// Note: toffset, ooffset, or len might be near -1&gt;&gt;&gt;1.</span></span><br><span class="line">    <span class="keyword">if</span> ((ooffset &lt; <span class="number">0</span>) || (toffset &lt; <span class="number">0</span>)</span><br><span class="line">            || (toffset &gt; (<span class="keyword">long</span>)value.length - len)</span><br><span class="line">            || (ooffset &gt; (<span class="keyword">long</span>)other.value.length - len)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (len-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ta[to++] != pa[po++]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">regionMatches</span><span class="params">(<span class="keyword">boolean</span> ignoreCase, <span class="keyword">int</span> toffset,</span></span></span><br><span class="line"><span class="function"><span class="params">        String other, <span class="keyword">int</span> ooffset, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ta[] = value;</span><br><span class="line">    <span class="keyword">int</span> to = toffset;</span><br><span class="line">    <span class="keyword">char</span> pa[] = other.value;</span><br><span class="line">    <span class="keyword">int</span> po = ooffset;</span><br><span class="line">    <span class="comment">// Note: toffset, ooffset, or len might be near -1&gt;&gt;&gt;1.</span></span><br><span class="line">    <span class="keyword">if</span> ((ooffset &lt; <span class="number">0</span>) || (toffset &lt; <span class="number">0</span>)</span><br><span class="line">            || (toffset &gt; (<span class="keyword">long</span>)value.length - len)</span><br><span class="line">            || (ooffset &gt; (<span class="keyword">long</span>)other.value.length - len)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (len-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">char</span> c1 = ta[to++];</span><br><span class="line">        <span class="keyword">char</span> c2 = pa[po++];</span><br><span class="line">        <span class="keyword">if</span> (c1 == c2) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ignoreCase) &#123;</span><br><span class="line">            <span class="comment">// If characters don't match but case may be ignored,</span></span><br><span class="line">            <span class="comment">// try converting both characters to uppercase.</span></span><br><span class="line">            <span class="comment">// If the results match, then the comparison scan should</span></span><br><span class="line">            <span class="comment">// continue.</span></span><br><span class="line">            <span class="keyword">char</span> u1 = Character.toUpperCase(c1);</span><br><span class="line">            <span class="keyword">char</span> u2 = Character.toUpperCase(c2);</span><br><span class="line">            <span class="keyword">if</span> (u1 == u2) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Unfortunately, conversion to uppercase does not work properly</span></span><br><span class="line">            <span class="comment">// for the Georgian alphabet, which has strange rules about case</span></span><br><span class="line">            <span class="comment">// conversion.  So we need to make one last check before</span></span><br><span class="line">            <span class="comment">// exiting.</span></span><br><span class="line">            <span class="keyword">if</span> (Character.toLowerCase(u1) == Character.toLowerCase(u2)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="字符串搜索"><a href="#字符串搜索" class="headerlink" title="字符串搜索"></a>字符串搜索</h3><h4 id="正则匹配"><a href="#正则匹配" class="headerlink" title="正则匹配"></a>正则匹配</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(String regex)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Pattern.matches(regex, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="字符串包含"><a href="#字符串包含" class="headerlink" title="字符串包含"></a>字符串包含</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns true if and only if this string contains the specified</span></span><br><span class="line"><span class="comment"> * sequence of char values.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> s the sequence to search for</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> true if this string contains &#123;<span class="doctag">@code</span> s&#125;, false otherwise</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.5</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(CharSequence s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> indexOf(s.toString()) &gt; -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="指定字符在字符串中出现的位置"><a href="#指定字符在字符串中出现的位置" class="headerlink" title="指定字符在字符串中出现的位置"></a>指定字符在字符串中出现的位置</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(<span class="keyword">int</span> ch)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> indexOf(ch, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lastIndexOf</span><span class="params">(<span class="keyword">int</span> ch)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> lastIndexOf(ch, length() - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lastIndexOf</span><span class="params">(<span class="keyword">int</span> ch, <span class="keyword">int</span> fromIndex)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> isLatin1() ? StringLatin1.lastIndexOf(value, ch, fromIndex) : StringUTF16.lastIndexOf(value, ch, fromIndex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="字符串截取"><a href="#字符串截取" class="headerlink" title="字符串截取"></a>字符串截取</h3><h4 id="substring"><a href="#substring" class="headerlink" title="substring"></a>substring</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> beginIndex)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (beginIndex &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(beginIndex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> subLen = value.length - beginIndex;</span><br><span class="line">    <span class="keyword">if</span> (subLen &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(subLen);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (beginIndex == <span class="number">0</span>) ? <span class="keyword">this</span> : <span class="keyword">new</span> String(value, beginIndex, subLen);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> beginIndex, <span class="keyword">int</span> endIndex)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (beginIndex &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(beginIndex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (endIndex &gt; value.length) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(endIndex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> subLen = endIndex - beginIndex;</span><br><span class="line">    <span class="keyword">if</span> (subLen &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(subLen);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ((beginIndex == <span class="number">0</span>) &amp;&amp; (endIndex == value.length)) ? <span class="keyword">this</span></span><br><span class="line">            : <span class="keyword">new</span> String(value, beginIndex, subLen);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这两个重载方法中，如果截取本身则直接返回，否则调用构造方法，用Arrays.copyOfRange的方法申请内存复制返回新字符串</p>
</blockquote>
<h3 id="字符串替换"><a href="#字符串替换" class="headerlink" title="字符串替换"></a>字符串替换</h3><h4 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Replaces each substring of this string that matches the literal target</span></span><br><span class="line"><span class="comment"> * sequence with the specified literal replacement sequence. The</span></span><br><span class="line"><span class="comment"> * replacement proceeds from the beginning of the string to the end, for</span></span><br><span class="line"><span class="comment"> * example, replacing "aa" with "b" in the string "aaa" will result in</span></span><br><span class="line"><span class="comment"> * "ba" rather than "ab".</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  target The sequence of char values to be replaced</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  replacement The replacement sequence of char values</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  The resulting string</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.5</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">replace</span><span class="params">(CharSequence target, CharSequence replacement)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Pattern.compile(target.toString(), Pattern.LITERAL).matcher(</span><br><span class="line">            <span class="keyword">this</span>).replaceAll(Matcher.quoteReplacement(replacement.toString()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>替换字符串子串是通过从前往后匹配父字符串来实现的。 比如，将aaa替换成b，替换后应该时ba，而不是ab</p>
</blockquote>
<h3 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h3><h4 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Concatenates the specified string to the end of this string.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * If the length of the argument string is &#123;<span class="doctag">@code</span> 0&#125;, then this</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> String&#125; object is returned. Otherwise, a</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> String&#125; object is returned that represents a character</span></span><br><span class="line"><span class="comment"> * sequence that is the concatenation of the character sequence</span></span><br><span class="line"><span class="comment"> * represented by this &#123;<span class="doctag">@code</span> String&#125; object and the character</span></span><br><span class="line"><span class="comment"> * sequence represented by the argument string.&lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Examples:</span></span><br><span class="line"><span class="comment"> * &lt;blockquote&gt;&lt;pre&gt;</span></span><br><span class="line"><span class="comment"> * "cares".concat("s") returns "caress"</span></span><br><span class="line"><span class="comment"> * "to".concat("get").concat("her") returns "together"</span></span><br><span class="line"><span class="comment"> * &lt;/pre&gt;&lt;/blockquote&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>   str   the &#123;<span class="doctag">@code</span> String&#125; that is concatenated to the end</span></span><br><span class="line"><span class="comment"> *                of this &#123;<span class="doctag">@code</span> String&#125;.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  a string that represents the concatenation of this object's</span></span><br><span class="line"><span class="comment"> *          characters followed by the string argument's characters.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">concat</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> otherLen = str.length();</span><br><span class="line">    <span class="keyword">if</span> (otherLen == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> len = value.length;</span><br><span class="line">    <span class="keyword">char</span> buf[] = Arrays.copyOf(value, len + otherLen);</span><br><span class="line">    str.getChars(buf, len);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> String(buf, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>该方法是通过重新申请一块内存，然后把新旧字符串拷贝到新内容中，并返回新String类的方式实现的</p>
</blockquote>
<h3 id="字符串转换"><a href="#字符串转换" class="headerlink" title="字符串转换"></a>字符串转换</h3><h4 id="Bytes转换"><a href="#Bytes转换" class="headerlink" title="Bytes转换"></a>Bytes转换</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">byte</span>[] getBytes() &#123;</span><br><span class="line">    <span class="keyword">return</span> StringCoding.encode(value, <span class="number">0</span>, value.length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">byte</span>[] getBytes(String charsetName)</span><br><span class="line">        <span class="keyword">throws</span> UnsupportedEncodingException &#123;</span><br><span class="line">    <span class="keyword">if</span> (charsetName == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    <span class="keyword">return</span> StringCoding.encode(charsetName, value, <span class="number">0</span>, value.length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">byte</span>[] getBytes(Charset charset) &#123;</span><br><span class="line">    <span class="keyword">if</span> (charset == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    <span class="keyword">return</span> StringCoding.encode(charset, value, <span class="number">0</span>, value.length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>若不指定字符集，默认编码方式为ISO-8859-1</p>
</blockquote>
<h4 id="转化为字符数组"><a href="#转化为字符数组" class="headerlink" title="转化为字符数组"></a>转化为字符数组</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">char</span>[] toCharArray() &#123;</span><br><span class="line">    <span class="comment">// Cannot use Arrays.copyOf because of class initialization order issues</span></span><br><span class="line">    <span class="keyword">char</span> result[] = <span class="keyword">new</span> <span class="keyword">char</span>[value.length];</span><br><span class="line">    System.arraycopy(value, <span class="number">0</span>, result, <span class="number">0</span>, value.length);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>通过申请新的物理地址，拷贝旧文件实现复制</p>
</blockquote>
<h4 id="大小写转换"><a href="#大小写转换" class="headerlink" title="大小写转换"></a>大小写转换</h4><h5 id="toUpperCase"><a href="#toUpperCase" class="headerlink" title="toUpperCase"></a>toUpperCase</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toUpperCase</span><span class="params">(Locale locale)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (locale == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> firstLower;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> len = value.length;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Now check if there are any characters that need to be changed. */</span></span><br><span class="line">    scan: &#123;</span><br><span class="line">        <span class="keyword">for</span> (firstLower = <span class="number">0</span> ; firstLower &lt; len; ) &#123;</span><br><span class="line">            <span class="keyword">int</span> c = (<span class="keyword">int</span>)value[firstLower];</span><br><span class="line">            <span class="keyword">int</span> srcCount;</span><br><span class="line">            <span class="keyword">if</span> ((c &gt;= Character.MIN_HIGH_SURROGATE)</span><br><span class="line">                    &amp;&amp; (c &lt;= Character.MAX_HIGH_SURROGATE)) &#123;</span><br><span class="line">                c = codePointAt(firstLower);</span><br><span class="line">                srcCount = Character.charCount(c);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                srcCount = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> upperCaseChar = Character.toUpperCaseEx(c);</span><br><span class="line">            <span class="keyword">if</span> ((upperCaseChar == Character.ERROR)</span><br><span class="line">                    || (c != upperCaseChar)) &#123;</span><br><span class="line">                <span class="keyword">break</span> scan;</span><br><span class="line">            &#125;</span><br><span class="line">            firstLower += srcCount;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* result may grow, so i+resultOffset is the write location in result */</span></span><br><span class="line">    <span class="keyword">int</span> resultOffset = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span>[] result = <span class="keyword">new</span> <span class="keyword">char</span>[len]; <span class="comment">/* may grow */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Just copy the first few upperCase characters. */</span></span><br><span class="line">    System.arraycopy(value, <span class="number">0</span>, result, <span class="number">0</span>, firstLower);</span><br><span class="line"></span><br><span class="line">    String lang = locale.getLanguage();</span><br><span class="line">    <span class="keyword">boolean</span> localeDependent =</span><br><span class="line">            (lang == <span class="string">"tr"</span> || lang == <span class="string">"az"</span> || lang == <span class="string">"lt"</span>);</span><br><span class="line">    <span class="keyword">char</span>[] upperCharArray;</span><br><span class="line">    <span class="keyword">int</span> upperChar;</span><br><span class="line">    <span class="keyword">int</span> srcChar;</span><br><span class="line">    <span class="keyword">int</span> srcCount;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = firstLower; i &lt; len; i += srcCount) &#123;</span><br><span class="line">        srcChar = (<span class="keyword">int</span>)value[i];</span><br><span class="line">        <span class="keyword">if</span> ((<span class="keyword">char</span>)srcChar &gt;= Character.MIN_HIGH_SURROGATE &amp;&amp;</span><br><span class="line">            (<span class="keyword">char</span>)srcChar &lt;= Character.MAX_HIGH_SURROGATE) &#123;</span><br><span class="line">            srcChar = codePointAt(i);</span><br><span class="line">            srcCount = Character.charCount(srcChar);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            srcCount = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (localeDependent) &#123;</span><br><span class="line">            upperChar = ConditionalSpecialCasing.toUpperCaseEx(<span class="keyword">this</span>, i, locale);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            upperChar = Character.toUpperCaseEx(srcChar);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((upperChar == Character.ERROR)</span><br><span class="line">                || (upperChar &gt;= Character.MIN_SUPPLEMENTARY_CODE_POINT)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (upperChar == Character.ERROR) &#123;</span><br><span class="line">                <span class="keyword">if</span> (localeDependent) &#123;</span><br><span class="line">                    upperCharArray =</span><br><span class="line">                            ConditionalSpecialCasing.toUpperCaseCharArray(<span class="keyword">this</span>, i, locale);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    upperCharArray = Character.toUpperCaseCharArray(srcChar);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (srcCount == <span class="number">2</span>) &#123;</span><br><span class="line">                resultOffset += Character.toChars(upperChar, result, i + resultOffset) - srcCount;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                upperCharArray = Character.toChars(upperChar);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* Grow result if needed */</span></span><br><span class="line">            <span class="keyword">int</span> mapLen = upperCharArray.length;</span><br><span class="line">            <span class="keyword">if</span> (mapLen &gt; srcCount) &#123;</span><br><span class="line">                <span class="keyword">char</span>[] result2 = <span class="keyword">new</span> <span class="keyword">char</span>[result.length + mapLen - srcCount];</span><br><span class="line">                System.arraycopy(result, <span class="number">0</span>, result2, <span class="number">0</span>, i + resultOffset);</span><br><span class="line">                result = result2;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; mapLen; ++x) &#123;</span><br><span class="line">                result[i + resultOffset + x] = upperCharArray[x];</span><br><span class="line">            &#125;</span><br><span class="line">            resultOffset += (mapLen - srcCount);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result[i + resultOffset] = (<span class="keyword">char</span>)upperChar;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> String(result, <span class="number">0</span>, len + resultOffset);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="toLowerCase"><a href="#toLowerCase" class="headerlink" title="toLowerCase"></a>toLowerCase</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toLowerCase</span><span class="params">(Locale locale)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (locale == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> firstUpper;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> len = value.length;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Now check if there are any characters that need to be changed. */</span></span><br><span class="line">    scan: &#123;</span><br><span class="line">        <span class="keyword">for</span> (firstUpper = <span class="number">0</span> ; firstUpper &lt; len; ) &#123;</span><br><span class="line">            <span class="keyword">char</span> c = value[firstUpper];</span><br><span class="line">            <span class="keyword">if</span> ((c &gt;= Character.MIN_HIGH_SURROGATE)</span><br><span class="line">                    &amp;&amp; (c &lt;= Character.MAX_HIGH_SURROGATE)) &#123;</span><br><span class="line">                <span class="keyword">int</span> supplChar = codePointAt(firstUpper);</span><br><span class="line">                <span class="keyword">if</span> (supplChar != Character.toLowerCase(supplChar)) &#123;</span><br><span class="line">                    <span class="keyword">break</span> scan;</span><br><span class="line">                &#125;</span><br><span class="line">                firstUpper += Character.charCount(supplChar);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (c != Character.toLowerCase(c)) &#123;</span><br><span class="line">                    <span class="keyword">break</span> scan;</span><br><span class="line">                &#125;</span><br><span class="line">                firstUpper++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span>[] result = <span class="keyword">new</span> <span class="keyword">char</span>[len];</span><br><span class="line">    <span class="keyword">int</span> resultOffset = <span class="number">0</span>;  <span class="comment">/* result may grow, so i+resultOffset</span></span><br><span class="line"><span class="comment">                            * is the write location in result */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Just copy the first few lowerCase characters. */</span></span><br><span class="line">    System.arraycopy(value, <span class="number">0</span>, result, <span class="number">0</span>, firstUpper);</span><br><span class="line"></span><br><span class="line">    String lang = locale.getLanguage();</span><br><span class="line">    <span class="keyword">boolean</span> localeDependent =</span><br><span class="line">            (lang == <span class="string">"tr"</span> || lang == <span class="string">"az"</span> || lang == <span class="string">"lt"</span>);</span><br><span class="line">    <span class="keyword">char</span>[] lowerCharArray;</span><br><span class="line">    <span class="keyword">int</span> lowerChar;</span><br><span class="line">    <span class="keyword">int</span> srcChar;</span><br><span class="line">    <span class="keyword">int</span> srcCount;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = firstUpper; i &lt; len; i += srcCount) &#123;</span><br><span class="line">        srcChar = (<span class="keyword">int</span>)value[i];</span><br><span class="line">        <span class="keyword">if</span> ((<span class="keyword">char</span>)srcChar &gt;= Character.MIN_HIGH_SURROGATE</span><br><span class="line">                &amp;&amp; (<span class="keyword">char</span>)srcChar &lt;= Character.MAX_HIGH_SURROGATE) &#123;</span><br><span class="line">            srcChar = codePointAt(i);</span><br><span class="line">            srcCount = Character.charCount(srcChar);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            srcCount = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (localeDependent ||</span><br><span class="line">            srcChar == <span class="string">'\u03A3'</span> || <span class="comment">// GREEK CAPITAL LETTER SIGMA</span></span><br><span class="line">            srcChar == <span class="string">'\u0130'</span>) &#123; <span class="comment">// LATIN CAPITAL LETTER I WITH DOT ABOVE</span></span><br><span class="line">            lowerChar = ConditionalSpecialCasing.toLowerCaseEx(<span class="keyword">this</span>, i, locale);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            lowerChar = Character.toLowerCase(srcChar);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((lowerChar == Character.ERROR)</span><br><span class="line">                || (lowerChar &gt;= Character.MIN_SUPPLEMENTARY_CODE_POINT)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (lowerChar == Character.ERROR) &#123;</span><br><span class="line">                lowerCharArray =</span><br><span class="line">                        ConditionalSpecialCasing.toLowerCaseCharArray(<span class="keyword">this</span>, i, locale);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (srcCount == <span class="number">2</span>) &#123;</span><br><span class="line">                resultOffset += Character.toChars(lowerChar, result, i + resultOffset) - srcCount;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                lowerCharArray = Character.toChars(lowerChar);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* Grow result if needed */</span></span><br><span class="line">            <span class="keyword">int</span> mapLen = lowerCharArray.length;</span><br><span class="line">            <span class="keyword">if</span> (mapLen &gt; srcCount) &#123;</span><br><span class="line">                <span class="keyword">char</span>[] result2 = <span class="keyword">new</span> <span class="keyword">char</span>[result.length + mapLen - srcCount];</span><br><span class="line">                System.arraycopy(result, <span class="number">0</span>, result2, <span class="number">0</span>, i + resultOffset);</span><br><span class="line">                result = result2;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; mapLen; ++x) &#123;</span><br><span class="line">                result[i + resultOffset + x] = lowerCharArray[x];</span><br><span class="line">            &#125;</span><br><span class="line">            resultOffset += (mapLen - srcCount);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result[i + resultOffset] = (<span class="keyword">char</span>)lowerChar;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> String(result, <span class="number">0</span>, len + resultOffset);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h3><h4 id="length"><a href="#length" class="headerlink" title="length"></a>length</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">length</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value.length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="isEmpty"><a href="#isEmpty" class="headerlink" title="isEmpty"></a>isEmpty</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value.length == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="charAt"><a href="#charAt" class="headerlink" title="charAt"></a>charAt</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">charAt</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((index &lt; <span class="number">0</span>) || (index &gt;= value.length)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(index);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value[index];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="字符串指定索引的字符码点"><a href="#字符串指定索引的字符码点" class="headerlink" title="字符串指定索引的字符码点"></a>字符串指定索引的字符码点</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">codePointAt</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((index &lt; <span class="number">0</span>) || (index &gt;= value.length)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(index);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Character.codePointAtImpl(value, index, value.length);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">codePointBefore</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = index - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> ((i &lt; <span class="number">0</span>) || (i &gt;= value.length)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(index);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Character.codePointBeforeImpl(value, index, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">codePointCount</span><span class="params">(<span class="keyword">int</span> beginIndex, <span class="keyword">int</span> endIndex)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (beginIndex &lt; <span class="number">0</span> || endIndex &gt; value.length || beginIndex &gt; endIndex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Character.codePointCountImpl(value, beginIndex, endIndex - beginIndex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">offsetByCodePoints</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">int</span> codePointOffset)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; value.length) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Character.offsetByCodePointsImpl(value, <span class="number">0</span>, value.length,</span><br><span class="line">            index, codePointOffset);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="trim"><a href="#trim" class="headerlink" title="trim"></a>trim</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns a string whose value is this string, with any leading and trailing</span></span><br><span class="line"><span class="comment"> * whitespace removed.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * If this &#123;<span class="doctag">@code</span> String&#125; object represents an empty character</span></span><br><span class="line"><span class="comment"> * sequence, or the first and last characters of character sequence</span></span><br><span class="line"><span class="comment"> * represented by this &#123;<span class="doctag">@code</span> String&#125; object both have codes</span></span><br><span class="line"><span class="comment"> * greater than &#123;<span class="doctag">@code</span> '\u005Cu0020'&#125; (the space character), then a</span></span><br><span class="line"><span class="comment"> * reference to this &#123;<span class="doctag">@code</span> String&#125; object is returned.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Otherwise, if there is no character with a code greater than</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> '\u005Cu0020'&#125; in the string, then a</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> String&#125; object representing an empty string is</span></span><br><span class="line"><span class="comment"> * returned.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Otherwise, let &lt;i&gt;k&lt;/i&gt; be the index of the first character in the</span></span><br><span class="line"><span class="comment"> * string whose code is greater than &#123;<span class="doctag">@code</span> '\u005Cu0020'&#125;, and let</span></span><br><span class="line"><span class="comment"> * &lt;i&gt;m&lt;/i&gt; be the index of the last character in the string whose code</span></span><br><span class="line"><span class="comment"> * is greater than &#123;<span class="doctag">@code</span> '\u005Cu0020'&#125;. A &#123;<span class="doctag">@code</span> String&#125;</span></span><br><span class="line"><span class="comment"> * object is returned, representing the substring of this string that</span></span><br><span class="line"><span class="comment"> * begins with the character at index &lt;i&gt;k&lt;/i&gt; and ends with the</span></span><br><span class="line"><span class="comment"> * character at index &lt;i&gt;m&lt;/i&gt;-that is, the result of</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> this.substring(k, m + 1)&#125;.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * This method may be used to trim whitespace (as defined above) from</span></span><br><span class="line"><span class="comment"> * the beginning and end of a string.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  A string whose value is this string, with any leading and trailing white</span></span><br><span class="line"><span class="comment"> *          space removed, or this string if it has no leading or</span></span><br><span class="line"><span class="comment"> *          trailing white space.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">trim</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = value.length;</span><br><span class="line">    <span class="keyword">int</span> st = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span>[] val = value;    <span class="comment">/* avoid getfield opcode */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ((st &lt; len) &amp;&amp; (val[st] &lt;= <span class="string">' '</span>)) &#123;</span><br><span class="line">        st++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ((st &lt; len) &amp;&amp; (val[len - <span class="number">1</span>] &lt;= <span class="string">' '</span>)) &#123;</span><br><span class="line">        len--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ((st &gt; <span class="number">0</span>) || (len &lt; value.length)) ? substring(st, len) : <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="hasCode"><a href="#hasCode" class="headerlink" title="hasCode"></a>hasCode</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns a hash code for this string. The hash code for a</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> String&#125; object is computed as</span></span><br><span class="line"><span class="comment"> * &lt;blockquote&gt;&lt;pre&gt;</span></span><br><span class="line"><span class="comment"> * s[0]*31^(n-1) + s[1]*31^(n-2) + ... + s[n-1]</span></span><br><span class="line"><span class="comment"> * &lt;/pre&gt;&lt;/blockquote&gt;</span></span><br><span class="line"><span class="comment"> * using &#123;<span class="doctag">@code</span> int&#125; arithmetic, where &#123;<span class="doctag">@code</span> s[i]&#125; is the</span></span><br><span class="line"><span class="comment"> * &lt;i&gt;i&lt;/i&gt;th character of the string, &#123;<span class="doctag">@code</span> n&#125; is the length of</span></span><br><span class="line"><span class="comment"> * the string, and &#123;<span class="doctag">@code</span> ^&#125; indicates exponentiation.</span></span><br><span class="line"><span class="comment"> * (The hash value of the empty string is zero.)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  a hash code value for this object.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h = hash;</span><br><span class="line">    <span class="keyword">if</span> (h == <span class="number">0</span> &amp;&amp; value.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">char</span> val[] = value;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; value.length; i++) &#123;</span><br><span class="line">            h = <span class="number">31</span> * h + val[i];</span><br><span class="line">        &#125;</span><br><span class="line">        hash = h;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> h;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>该方法返回字符串的哈希值，该hash值的计算方式为： s[0]<em>31^(n-1) + s[1]</em>31^(n-2) + … + s[n-1] hash冲突？</p>
</blockquote>
<h4 id="String-Pool"><a href="#String-Pool" class="headerlink" title="String Pool"></a>String Pool</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns a canonical representation for the string object.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * A pool of strings, initially empty, is maintained privately by the</span></span><br><span class="line"><span class="comment"> * class &#123;<span class="doctag">@code</span> String&#125;.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * When the intern method is invoked, if the pool already contains a</span></span><br><span class="line"><span class="comment"> * string equal to this &#123;<span class="doctag">@code</span> String&#125; object as determined by</span></span><br><span class="line"><span class="comment"> * the &#123;<span class="doctag">@link</span> #equals(Object)&#125; method, then the string from the pool is</span></span><br><span class="line"><span class="comment"> * returned. Otherwise, this &#123;<span class="doctag">@code</span> String&#125; object is added to the</span></span><br><span class="line"><span class="comment"> * pool and a reference to this &#123;<span class="doctag">@code</span> String&#125; object is returned.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * It follows that for any two strings &#123;<span class="doctag">@code</span> s&#125; and &#123;<span class="doctag">@code</span> t&#125;,</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> s.intern() == t.intern()&#125; is &#123;<span class="doctag">@code</span> true&#125;</span></span><br><span class="line"><span class="comment"> * if and only if &#123;<span class="doctag">@code</span> s.equals(t)&#125; is &#123;<span class="doctag">@code</span> true&#125;.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * All literal strings and string-valued constant expressions are</span></span><br><span class="line"><span class="comment"> * interned. String literals are defined in section 3.10.5 of the</span></span><br><span class="line"><span class="comment"> * &lt;cite&gt;The Java&amp;trade; Language Specification&lt;/cite&gt;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  a string that has the same contents as this string, but is</span></span><br><span class="line"><span class="comment"> *          guaranteed to be from a pool of unique strings.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">intern</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>String类维护了一个初始为空的String Pool 在调用intern方法时，如果String池中已经包含了一个相等的字符串对象，则直接返回String池中的该实例</p>
</blockquote>
<h2 id="QA"><a href="#QA" class="headerlink" title="QA"></a>QA</h2><h3 id="String类为什么是final"><a href="#String类为什么是final" class="headerlink" title="String类为什么是final"></a>String类为什么是final</h3><h3 id="value为什么是private"><a href="#value为什么是private" class="headerlink" title="value为什么是private"></a>value为什么是private</h3><h3 id="value为什么是final"><a href="#value为什么是final" class="headerlink" title="value为什么是final"></a>value为什么是final</h3><blockquote>
<ul>
<li>String类设计成final主要是给String做了阉割，不让String有子类，防止子类重载破坏String类的原有设计</li>
<li>value设计成final，第一是为了实现String Pool，不论在哪或者怎么样使用String，都保证了value有初始值、第二是value在String类的很多方法里作为形参传递(对象本质上是传引用，而final修饰的数组，这是这个数组引用不能变，数组本身能够被改变)，防止value被更改</li>
<li>private是为了只能让value属性在本String类中可用，如果为package private和protected的话，就会暴露在String的包下</li>
</ul>
</blockquote>
<h3 id="为什么要实现String-Pool"><a href="#为什么要实现String-Pool" class="headerlink" title="为什么要实现String Pool"></a>为什么要实现String Pool</h3><blockquote>
<ul>
<li>Java中字符串是最常用的数据结构，String池可以让同一个字符串的引用只占用堆中的一块地址，节省内存空间</li>
<li>让Java的String可以不冲突的共享</li>
</ul>
</blockquote>
<h3 id="子面值赋值-String-str-“123”-是如何实现的"><a href="#子面值赋值-String-str-“123”-是如何实现的" class="headerlink" title="子面值赋值(String str = “123”;)是如何实现的"></a>子面值赋值(String str = “123”;)是如何实现的</h3><blockquote>
<p>子面值赋值时，JVM会直接去String Pool中找是否存在”123”，存在则返回”123”这个对象的引用地址；如果不存在就先在String Pool中创建”123”这个对象，然后再返回</p>
</blockquote>
<h3 id="子面值赋值和new-String-“123”-字符串对象有什么区别"><a href="#子面值赋值和new-String-“123”-字符串对象有什么区别" class="headerlink" title="子面值赋值和new String(“123”)字符串对象有什么区别"></a>子面值赋值和new String(“123”)字符串对象有什么区别</h3><blockquote>
<p>子面值赋值流程如上；</p>
<p>new实例化String时，JVM会先在String Pool中查找是否有”123”这个对象，如果有则不再在String Pool中创建”123”了，而是直接在堆中创建”123”字符串对象，然后将堆中的”123”对象的引用地址返回；如果没有，则现在String Pool中创建”123”字符串对象，然后再在堆中创建”123”对象，最后将堆中的这个”123”对象的引用地址返回</p>
</blockquote>
]]></content>
      <categories>
        <category>源码分析</category>
      </categories>
      <tags>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis规范与设计</title>
    <url>/2020/06/27/Redis%E8%A7%84%E8%8C%83%E4%B8%8E%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<h2 id="Redis数据结构及使用场景"><a href="#Redis数据结构及使用场景" class="headerlink" title="Redis数据结构及使用场景"></a>Redis数据结构及使用场景</h2><h3 id="string"><a href="#string" class="headerlink" title="string"></a>string</h3><blockquote>
<p>可以包含任何数据，比如jpg图像或者序列化的对象，一个键最大能储存512M</p>
</blockquote>
<h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><blockquote>
<p>本质是链表而不是数组，这意味着list的增删效率高，时间复杂度为O(1)；但索引定位很慢，时间复杂度为O(n) 使用场景： 消息队列、TimeLine</p>
</blockquote>
<h3 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h3><blockquote>
<p>在实现上和java中的hashmap一致，是数组+链表的二维结构。 hash的值只能是字符串 使用场景： 存储对象</p>
</blockquote>
<h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><blockquote>
<p>相当于Java中的HashSet，它内部的键值对是无序唯一的。 使用场景： </p>
<ol>
<li>集合的交集、差集：共同好友、好友推荐</li>
<li>唯一性： 统计访问网站的所有IP</li>
</ol>
</blockquote>
<h3 id="sortedSet"><a href="#sortedSet" class="headerlink" title="sortedSet"></a>sortedSet</h3><blockquote>
<p>类似于Java的SortedSet和HashMap的结合体，和set相比，增加了权重参数score 使用场景： 排行榜</p>
</blockquote>
<h2 id="Redis规范"><a href="#Redis规范" class="headerlink" title="Redis规范"></a>Redis规范</h2><h3 id="KEY-VALUE规范"><a href="#KEY-VALUE规范" class="headerlink" title="KEY-VALUE规范"></a>KEY-VALUE规范</h3><h4 id="KEY"><a href="#KEY" class="headerlink" title="KEY"></a>KEY</h4><h5 id="可读性和可管理性"><a href="#可读性和可管理性" class="headerlink" title="可读性和可管理性"></a>可读性和可管理性</h5><blockquote>
<p>以服务名及数据库表名称作为前缀，用冒号分割。如：服务名:表名:ID</p>
</blockquote>
<h5 id="简洁性"><a href="#简洁性" class="headerlink" title="简洁性"></a>简洁性</h5><blockquote>
<p>在保证key语义和防冲突的前提下，控制key长度，当大量key存在时，key也占很大的内存空间。</p>
</blockquote>
<h5 id="不包含特殊字符"><a href="#不包含特殊字符" class="headerlink" title="不包含特殊字符"></a>不包含特殊字符</h5><blockquote>
<p>key中不能包含特殊字符，如空格、\n、引号及其他</p>
</blockquote>
<h4 id="VALUE"><a href="#VALUE" class="headerlink" title="VALUE"></a>VALUE</h4><h5 id="拒绝数据量大的key-bigkey"><a href="#拒绝数据量大的key-bigkey" class="headerlink" title="拒绝数据量大的key(bigkey)"></a>拒绝数据量大的key(bigkey)</h5><blockquote>
<p>string类型不超过10KB，hash、list、set、zset元素个数不能超过5000个</p>
</blockquote>
<h5 id="选择合适的数据类型"><a href="#选择合适的数据类型" class="headerlink" title="选择合适的数据类型"></a>选择合适的数据类型</h5><blockquote>
<p>根据实际情况，合理使用数据结果，平衡内存和性能</p>
</blockquote>
<h5 id="控制key的生命周期"><a href="#控制key的生命周期" class="headerlink" title="控制key的生命周期"></a>控制key的生命周期</h5><blockquote>
<p>使用 expire 设置过期时间(打散过期时间，防止集中过期造成的雪崩) 不过期数据重点关注idletime</p>
</blockquote>
<h3 id="REDIS命令规范"><a href="#REDIS命令规范" class="headerlink" title="REDIS命令规范"></a>REDIS命令规范</h3><h4 id="O-N-关注N的数量"><a href="#O-N-关注N的数量" class="headerlink" title="O(N)关注N的数量"></a>O(N)关注N的数量</h4><blockquote>
<p>例如hgetall、lrange、smembers、zrange、sinter等并非不能使用，但需要明确N的值 有遍历需求时可以使用hscan、sscan、zscan等代替</p>
</blockquote>
<h4 id="禁用命令"><a href="#禁用命令" class="headerlink" title="禁用命令"></a>禁用命令</h4><blockquote>
<p>禁止线上使用keys、flushall、flushdb等，通过redis的rename机制禁掉命令，或者使用scan的方式渐进式处理</p>
</blockquote>
<h4 id="合理使用select"><a href="#合理使用select" class="headerlink" title="合理使用select"></a>合理使用select</h4><blockquote>
<p>redis的多数据库支持较弱，客户端支持较差。同时多业务用多数据库在底层实际还是单线程处理，并且会有干扰</p>
</blockquote>
<h4 id="使用批处理提高效率"><a href="#使用批处理提高效率" class="headerlink" title="使用批处理提高效率"></a>使用批处理提高效率</h4><blockquote>
<p>使用非原生命令pipeline替代mget、mset提高效率； 但要控制一次批量操作的元素个数（实际也和元素字节数有关）</p>
</blockquote>
<h4 id="不推荐过多使用redis事务"><a href="#不推荐过多使用redis事务" class="headerlink" title="不推荐过多使用redis事务"></a>不推荐过多使用redis事务</h4><blockquote>
<p>redis事务不支持回滚</p>
</blockquote>
<h3 id="客户端规范"><a href="#客户端规范" class="headerlink" title="客户端规范"></a>客户端规范</h3><h4 id="避免多应用使用同一个redis实例"><a href="#避免多应用使用同一个redis实例" class="headerlink" title="避免多应用使用同一个redis实例"></a>避免多应用使用同一个redis实例</h4><blockquote>
<p>不相干的业务拆分，公共数据做服务化</p>
</blockquote>
<h4 id="使用-redis连接池，有效控制连接的同时提高效率"><a href="#使用-redis连接池，有效控制连接的同时提高效率" class="headerlink" title="使用 redis连接池，有效控制连接的同时提高效率"></a>使用 redis连接池，有效控制连接的同时提高效率</h4><blockquote>
<p>使用Jedis等连接池操作redis</p>
</blockquote>
<h4 id="高并发下建议客户端添加熔断功能"><a href="#高并发下建议客户端添加熔断功能" class="headerlink" title="高并发下建议客户端添加熔断功能"></a>高并发下建议客户端添加熔断功能</h4><blockquote>
<p>例如：netflix hystrix</p>
</blockquote>
<h4 id="设置合理的密码，如果有必要使用SSL加密访问"><a href="#设置合理的密码，如果有必要使用SSL加密访问" class="headerlink" title="设置合理的密码，如果有必要使用SSL加密访问"></a>设置合理的密码，如果有必要使用SSL加密访问</h4><blockquote>
<p>设置合理的密码</p>
</blockquote>
<h4 id="根据业务类型，选择合适的内存淘汰策略，并设置好过期实际"><a href="#根据业务类型，选择合适的内存淘汰策略，并设置好过期实际" class="headerlink" title="根据业务类型，选择合适的内存淘汰策略，并设置好过期实际"></a>根据业务类型，选择合适的内存淘汰策略，并设置好过期实际</h4><blockquote>
<p>edis默认策略为volatile-lru，根据实际业务更改</p>
</blockquote>
<h2 id="REDIS相关工具"><a href="#REDIS相关工具" class="headerlink" title="REDIS相关工具"></a>REDIS相关工具</h2><h3 id="数据同步"><a href="#数据同步" class="headerlink" title="数据同步"></a>数据同步</h3><blockquote>
<p>redis-port</p>
</blockquote>
<h3 id="BIG-KEY-搜索"><a href="#BIG-KEY-搜索" class="headerlink" title="BIG KEY 搜索"></a>BIG KEY 搜索</h3><blockquote>
<p><a href="https://yq.aliyun.com/articles/117042?spm=a2c4e.11153940.0.0.fdaf744aWFvoW0" target="_blank" rel="noopener">https://yq.aliyun.com/articles/117042?spm=a2c4e.11153940.0.0.fdaf744aWFvoW0</a></p>
</blockquote>
<h3 id="HOT-KEY-搜索"><a href="#HOT-KEY-搜索" class="headerlink" title="HOT KEY 搜索"></a>HOT KEY 搜索</h3><blockquote>
<p><a href="https://yq.aliyun.com/go/articleRenderRedirect?spm=a2c4e.11153940.0.0.fdaf744aWFvoW0&url=https%3A%2F%2Fgithub.com%2Ffacebookarchive%2Fredis-faina" target="_blank" rel="noopener">redis-faina</a></p>
</blockquote>
<h2 id="Redis设计方案"><a href="#Redis设计方案" class="headerlink" title="Redis设计方案"></a>Redis设计方案</h2><h3 id="KEY-VALUE设计"><a href="#KEY-VALUE设计" class="headerlink" title="KEY-VALUE设计"></a>KEY-VALUE设计</h3><h4 id="实体"><a href="#实体" class="headerlink" title="实体"></a>实体</h4><blockquote>
<p>【KEY】: 服务名:表名:{entityId}</p>
<p>【VALUE】：(string) entityString</p>
<p>如: ucenter:user:{userId} VALUE:</p>
<ol>
<li>将实体对象转成map，然后存储到hash结构中</li>
<li>将实体对象存储到string结构中</li>
</ol>
</blockquote>
<h4 id="热搜词"><a href="#热搜词" class="headerlink" title="热搜词"></a>热搜词</h4><blockquote>
<p>【KEY】: 服务名:{业务类型}:keyword:hot</p>
<p>【VALUE】：clickNum keyword</p>
<p>如: media:{type}:keyword:hot VALUE: [sortedSet] 1199 “zhangsan” (点击数 keywords)</p>
</blockquote>
<h4 id="热榜"><a href="#热榜" class="headerlink" title="热榜"></a>热榜</h4><blockquote>
<p>【KEY】: 服务名:{业务类型}:read:hot</p>
<p>【VALUE】：(sortedSet) clickNum entityId</p>
<p>如: media:{type}:read:hot VALUE: [sortedSet] 234 98 (点击数 实体Id)</p>
</blockquote>
<h4 id="计数器"><a href="#计数器" class="headerlink" title="计数器"></a>计数器</h4><h5 id="PV"><a href="#PV" class="headerlink" title="PV"></a>PV</h5><blockquote>
<p>【KEY】: 服务名:pv:{entityType}:{entityId} </p>
<p>【VALUE】：(string) pvNum    </p>
<p>如: ass:pv:{entityType}:{entityId} VALUE: [string] 99</p>
</blockquote>
<h5 id="UV"><a href="#UV" class="headerlink" title="UV"></a>UV</h5><blockquote>
<p>【KEY】: 服务名:uv:{entityType}:{entityId}</p>
<p>【VALUE】：(string) uvNum     </p>
<p>如: ass:uv:{entityType}:{entityId} VALUE: [string] 124</p>
</blockquote>
<h4 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h4><blockquote>
<p>【KEY】:  服务名:表名:page:{pageNo}:{orderType}</p>
<p>【VALUE】: (zset) 实体ID（score: 实体ID）</p>
</blockquote>
<h4 id="浏览"><a href="#浏览" class="headerlink" title="浏览"></a>浏览</h4><blockquote>
<p>【KEY】: 服务名:表名:{uid}:browser</p>
<p>【VALUE】：(sortedSet) orderNum entityType+entityId</p>
<p>如: ucenter:user:{uid}:browser VALUE: [sortedSet] 1587029692 “{}” (排序 entityType和entityId组成的json)</p>
</blockquote>
<h4 id="评论"><a href="#评论" class="headerlink" title="评论"></a>评论</h4><blockquote>
<p>【KEY】: 服务名:{topicId}:{parentId}:comment</p>
<p>【VALUE】：(sortedSet) sort 实体ID (score: sort，value：实体ID)</p>
</blockquote>
<h4 id="实体赞"><a href="#实体赞" class="headerlink" title="实体赞"></a>实体赞</h4><blockquote>
<p>【KEY】: 服务名:行为:实体类型:实体ID</p>
<p>【VALUE】：(string) 行为Num</p>
<p>如: media:like:{entityType}:{entityId} VALUE: [string]    21</p>
</blockquote>
<h4 id="点赞"><a href="#点赞" class="headerlink" title="点赞"></a>点赞</h4><blockquote>
<p>【KEY】: 服务名:表名:{uid}:行为</p>
<p>【VALUE】：(sortedSet) 行为发生时间 entitiyType+entityId</p>
<p>如: ucenter:user:{uid}:like VALUE: [sortedSet]     1587029692 “{}” (排序 entityType和entityId组成的json)</p>
</blockquote>
<h4 id="收藏"><a href="#收藏" class="headerlink" title="收藏"></a>收藏</h4><blockquote>
<p>【KEY】: 服务名:表名:{uid}:行为</p>
<p>【VALUE】：(sortedSet) 行为发生时间 entityType+entityId</p>
<p>如: ucenter:user:{uid}:favorite VALUE: [sortedSet]    1587029692 “{}” (排序 entityType和entityId组成的json)</p>
</blockquote>
<h4 id="关注"><a href="#关注" class="headerlink" title="关注"></a>关注</h4><blockquote>
<p>【KEY】: 服务名:表名:{uid}:行为</p>
<p>【VALUE】：行为发生时间 entityType+entityId</p>
<p>如: ucenter:user:{uid}:follow VALUE: [sortedSet]    1587029692 “{}” (排序 entityType和entityId组成的json，此处的entity不指政策法规，指用户、主题这类)</p>
</blockquote>
<h4 id="在线用户"><a href="#在线用户" class="headerlink" title="在线用户"></a>在线用户</h4><blockquote>
<p>【KEY】: 服务名:行为:表名</p>
<p>【VALUE】：(list) uid</p>
<p>如: ass:active:user VALUE: [list]     uid</p>
</blockquote>
<h4 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h4><h4 id="延时队列"><a href="#延时队列" class="headerlink" title="延时队列"></a>延时队列</h4><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="Jedis异常总结"><a href="#Jedis异常总结" class="headerlink" title="Jedis异常总结"></a><a href="https://yq.aliyun.com/articles/236384?spm=a2c4e.11153940.0.0.fdaf744aWFvoW0" target="_blank" rel="noopener">Jedis异常总结</a></h3><h3 id="JedisPool资源池优化"><a href="#JedisPool资源池优化" class="headerlink" title="JedisPool资源池优化"></a><a href="https://yq.aliyun.com/articles/236383?spm=a2c4e.11153940.0.0.fdaf744aWFvoW0" target="_blank" rel="noopener">JedisPool资源池优化</a></h3><h3 id="Redis设计与实现"><a href="#Redis设计与实现" class="headerlink" title="Redis设计与实现"></a><a href="https://redisbook.readthedocs.io/en/latest/index.html" target="_blank" rel="noopener">Redis设计与实现</a></h3>]]></content>
      <categories>
        <category>Cache</category>
      </categories>
      <tags>
        <tag>Redis规范</tag>
        <tag>Redis Key</tag>
        <tag>Redis Value</tag>
      </tags>
  </entry>
  <entry>
    <title>mybatis-plus-generator源码分析</title>
    <url>/2020/06/27/Mybatis-Plus-Generator%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h2 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h2><h3 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@startuml</span><br><span class="line">left to right direction</span><br><span class="line"></span><br><span class="line">actor Application as app</span><br><span class="line">note left of app: 外部应用</span><br><span class="line"></span><br><span class="line">rectangle mybatis-plus-generator as mpg &#123;</span><br><span class="line">&#125;</span><br><span class="line">note bottom of mpg: mybatis-plus代码生成工具</span><br><span class="line"></span><br><span class="line">rectangle mybatis-plus-core as mpc &#123;</span><br><span class="line">&#125;</span><br><span class="line">note right of mpc: mybatis-plus核心代码</span><br><span class="line"></span><br><span class="line">rectangle mybatis-plus-annotation as mpa &#123;</span><br><span class="line">&#125;</span><br><span class="line">note right of mpa: mybatis-plus注释封装</span><br><span class="line"></span><br><span class="line">rectangle mybatis-plus-extension as mpe &#123;</span><br><span class="line">&#125;</span><br><span class="line">note right of mpe: mybatis-plus扩展</span><br><span class="line"></span><br><span class="line">app --&gt; mpg</span><br><span class="line">mpg &lt;-- mpc</span><br><span class="line">mpg &lt;-- mpa</span><br><span class="line">mpg &lt;-- mpe</span><br><span class="line"></span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure>

<h3 id="Containers"><a href="#Containers" class="headerlink" title="Containers"></a>Containers</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@startuml</span><br><span class="line"></span><br><span class="line">left to right direction</span><br><span class="line"></span><br><span class="line">actor Application as app</span><br><span class="line">note left of app: 外部应用</span><br><span class="line"></span><br><span class="line">rectangle mybatis-plus-generator &#123;</span><br><span class="line">  rectangle AutoGenerator as ag &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  note top of ag: 自动生成入口</span><br><span class="line"></span><br><span class="line">  rectangle ConfigBuilder as cb &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  note bottom of cb: 构建配置类</span><br><span class="line"></span><br><span class="line">  rectangle GlobalConfig as gc &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  note right of gc: 全局配置</span><br><span class="line"></span><br><span class="line">  rectangle DataSourceConfig as dc &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  note right of dc: 数据源配置</span><br><span class="line"></span><br><span class="line">  rectangle PackageConfig as pc &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  note right of pc: 包配置</span><br><span class="line"></span><br><span class="line">  rectangle TemplateConfig as tc &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  note right of tc: 模板配置</span><br><span class="line"></span><br><span class="line">  rectangle StrategyConfig as sc &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  note right of sc: 策略配置</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app --&gt; ag</span><br><span class="line">ag -- cb</span><br><span class="line">app ..&gt; gc</span><br><span class="line">app ..&gt; dc</span><br><span class="line">app ..&gt; pc</span><br><span class="line">app ..&gt; tc</span><br><span class="line">app ..&gt; sc</span><br><span class="line">cb &lt;-- gc: init GlobalConfig</span><br><span class="line">cb &lt;-- dc: init DataSourceConfig</span><br><span class="line">cb &lt;-- pc: init PackageConfig</span><br><span class="line">cb &lt;-- tc: init TemplateConfig</span><br><span class="line">cb &lt;-- sc: init StrategyConfig</span><br><span class="line"></span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure>

<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@startuml</span><br><span class="line"></span><br><span class="line">package generator &#123;</span><br><span class="line"></span><br><span class="line">  AutoGenerator *--&gt; ConfigBuilder</span><br><span class="line">  AutoGenerator *--&gt; InjectionConfig</span><br><span class="line">  AutoGenerator *--&gt; DataSourceConfig</span><br><span class="line">  AutoGenerator *--&gt; StrategyConfig</span><br><span class="line">  AutoGenerator *--&gt; PackageConfig</span><br><span class="line">  AutoGenerator *--&gt; TemplateConfig</span><br><span class="line">  AutoGenerator *--&gt; GlobalConfig</span><br><span class="line">  AutoGenerator *--&gt; AbstractTemplateEngine</span><br><span class="line">  AutoGenerator --&gt; TableInfo</span><br><span class="line"></span><br><span class="line">  InjectionConfig *--&gt; ConfigBuilder</span><br><span class="line">  InjectionConfig --&gt; FileOutConfig</span><br><span class="line">  InjectionConfig --&gt; IFileCreate</span><br><span class="line"></span><br><span class="line">  package config &#123;</span><br><span class="line">    interface ConstVal</span><br><span class="line"></span><br><span class="line">    DataSourceConfig *--&gt; IDbQuery</span><br><span class="line">    DataSourceConfig *--&gt; DbType</span><br><span class="line">    DataSourceConfig *--&gt; ITypeConvert</span><br><span class="line">    DataSourceConfig *--&gt; Connection</span><br><span class="line"></span><br><span class="line">    FileOutConfig --&gt; TableInfo</span><br><span class="line"></span><br><span class="line">    GlobalConfig *--&gt; DateType</span><br><span class="line">    GlobalConfig *--&gt; IdType</span><br><span class="line"></span><br><span class="line">    IDbQuery --&gt; DbType</span><br><span class="line">    IDbQuery --&gt; ResultSet</span><br><span class="line"></span><br><span class="line">    IFileCreate --&gt; ConfigBuilder</span><br><span class="line">    IFileCreate --&gt; FileType</span><br><span class="line"></span><br><span class="line">    INameConvert --&gt; TableInfo</span><br><span class="line">    INameConvert --&gt; TableField</span><br><span class="line"></span><br><span class="line">    ITypeConvert --&gt; GlobalConfig</span><br><span class="line">    ITypeConvert --&gt; TableField</span><br><span class="line">    ITypeConvert --&gt; IColumnType</span><br><span class="line"></span><br><span class="line">    Class PackageConfig</span><br><span class="line"></span><br><span class="line">    StrategyConfig *--&gt; INameConvert</span><br><span class="line">    StrategyConfig *--&gt; NamingStrategy</span><br><span class="line">    StrategyConfig *--&gt; TableFill</span><br><span class="line"></span><br><span class="line">    TemplateConfig --&gt; TemplateType</span><br><span class="line">    TemplateConfig --&gt; TemplateConfig</span><br><span class="line"></span><br><span class="line">    package builder &#123;</span><br><span class="line">      ConfigBuilder *--&gt; TemplateConfig</span><br><span class="line">      ConfigBuilder *--&gt;DataSourceConfig</span><br><span class="line">      ConfigBuilder *--&gt; Connection</span><br><span class="line">      ConfigBuilder *--&gt; IDbQuery</span><br><span class="line">      ConfigBuilder *--&gt; TableInfo</span><br><span class="line">      ConfigBuilder *--&gt; StrategyConfig</span><br><span class="line">      ConfigBuilder *--&gt; GlobalConfig</span><br><span class="line">      ConfigBuilder *--&gt; InjectionConfig</span><br><span class="line">      ConfigBuilder *--&gt; PackageConfig</span><br><span class="line">      ConfigBuilder *--&gt; TemplateConfig</span><br><span class="line">      ConfigBuilder *--&gt; TableInfo</span><br><span class="line">      ConfigBuilder *--&gt; NamingStrategy</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    package converts &#123;</span><br><span class="line">      DB2TypeConvert --&gt; GlobalConfig</span><br><span class="line">      ITypeConvert &lt;|-- DB2TypeConvert</span><br><span class="line"></span><br><span class="line">      DmTypeConvert --&gt; GlobalConfig</span><br><span class="line">      DmTypeConvert --&gt; IColumnType</span><br><span class="line">      ITypeConvert &lt;|-- DmTypeConvert</span><br><span class="line"></span><br><span class="line">      MySqlTypeConvert --&gt; GlobalConfig</span><br><span class="line">      MySqlTypeConvert --&gt; IColumnType</span><br><span class="line">      ITypeConvert &lt;|-- MySqlTypeConvert</span><br><span class="line"></span><br><span class="line">      OracleTypeConvert --&gt; GlobalConfig</span><br><span class="line">      OracleTypeConvert --&gt; IColumnType</span><br><span class="line">      ITypeConvert &lt;|-- OracleTypeConvert</span><br><span class="line"></span><br><span class="line">      PostgreSqlTypeConvert --&gt; GlobalConfig</span><br><span class="line">      PostgreSqlTypeConvert --&gt; IColumnType</span><br><span class="line">      ITypeConvert &lt;|-- PostgreSqlTypeConvert</span><br><span class="line"></span><br><span class="line">      SqlServerTypeConvert --&gt;GlobalConfig</span><br><span class="line">      SqlServerTypeConvert --&gt; IColumnType</span><br><span class="line">      ITypeConvert &lt;|-- SqlServerTypeConvert</span><br><span class="line"></span><br><span class="line">      SqliteTypeConvert --&gt; GlobalConfig</span><br><span class="line">      SqliteTypeConvert --&gt; IColumnType</span><br><span class="line">      ITypeConvert &lt;|-- SqliteTypeConvert</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    package po &#123;</span><br><span class="line">      TableField *--&gt; IColumnType</span><br><span class="line">      TableField *--&gt; StrategyConfig</span><br><span class="line"></span><br><span class="line">      class FieldFill</span><br><span class="line"></span><br><span class="line">      TableInfo *--&gt; TableField</span><br><span class="line">      TableInfo *--&gt; StrategyConfig</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    package querys &#123;</span><br><span class="line">      AbstractDbQuery --&gt; ResultSet</span><br><span class="line">      DB2Query --|&gt; AbstractDbQuery</span><br><span class="line">      DMQuery --|&gt; AbstractDbQuery</span><br><span class="line">      H2Query --|&gt; AbstractDbQuery</span><br><span class="line">      MariadbQuery --|&gt; AbstractDbQuery</span><br><span class="line">      MySqlQuery --|&gt; AbstractDbQuery</span><br><span class="line">      OracleQuery --|&gt; AbstractDbQuery</span><br><span class="line">      PostgreSqlQuery --|&gt; AbstractDbQuery</span><br><span class="line">      SqlServerQuery --|&gt; AbstractDbQuery</span><br><span class="line">      SqliteQuery --|&gt; AbstractDbQuery</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    package rules &#123;</span><br><span class="line">      enum DateType</span><br><span class="line">      DbColumnType --|&gt; IColumnType</span><br><span class="line">      enum FileType </span><br><span class="line">      interface IColumnType </span><br><span class="line">      enum NamingStrategy</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  package engine &#123;</span><br><span class="line">    AbstractTemplateEngine *--&gt; ConfigBuilder </span><br><span class="line"></span><br><span class="line">    BeetlTemplateEngine --|&gt; AbstractTemplateEngine</span><br><span class="line">    BeetlTemplateEngine *--&gt; ConfigBuilder</span><br><span class="line"></span><br><span class="line">    FreemarkerTemplateEngine --|&gt; AbstractTemplateEngine</span><br><span class="line">    FreemarkerTemplateEngine *--&gt; ConfigBuilder</span><br><span class="line"></span><br><span class="line">    VelocityTemplateEngine --|&gt; AbstractTemplateEngine</span><br><span class="line">    VelocityTemplateEngine *--&gt; ConfigBuilder</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class AutoGenerator &#123;</span><br><span class="line">  # config:ConfigBuilder</span><br><span class="line">  # injectionConfig:InjectionConfig</span><br><span class="line">  - dataSource:DataSourceConfig</span><br><span class="line">  - strategy:StrategyConfig</span><br><span class="line">  - packageInfo:PackageConfig</span><br><span class="line">  - template:TemplateConfig</span><br><span class="line">  - globalConfig:GlobalConfig </span><br><span class="line">  - templateEngine:AbstractTemplateEngine</span><br><span class="line">  + execute():void</span><br><span class="line">  # getAllTableInfoList(config:ConfigBuilder):List&lt;TableInfo&gt;</span><br><span class="line">  # pretreatmentConfigBuilder(config:ConfigBuilder):ConfigBuilder</span><br><span class="line">  + getCfg():InjectionConfig</span><br><span class="line">  + setCfg(injectionConfig:InjectionConfig):AutoGenerator</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface InjectionConfig &#123;</span><br><span class="line">  - config:ConfigBuilder</span><br><span class="line">  - fileOutConfigList:List&lt;FileOutConfig&gt;</span><br><span class="line">  - fileCreate:IFileCreate</span><br><span class="line">  + initMap():abstract void</span><br><span class="line">  + prepareObjectMap(objectMap:Map&lt;String,Object&gt;):Map&lt;String,Object&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface ConstVal &#123;</span><br><span class="line">  MODULE_NAME:String</span><br><span class="line">  ENTITY:String</span><br><span class="line">  SERVICE:String</span><br><span class="line">  SERVICE_IMPL:String</span><br><span class="line">  MAPPER:String</span><br><span class="line">  XML:String</span><br><span class="line">  CONTROLLER:String</span><br><span class="line">  ENTITY_PATH:String</span><br><span class="line">  SERVICE_PATH:String</span><br><span class="line">  SERVICE_IMPL_PATH:String</span><br><span class="line">  MAPPER_PATH:String</span><br><span class="line">  XML_PATH:String</span><br><span class="line">  CONTROLLER_PATH:String</span><br><span class="line">  JAVA_TMPDIR:String</span><br><span class="line">  UTF8:String</span><br><span class="line">  UNDERLINE:String</span><br><span class="line">  JAVA_SUFFIX:String</span><br><span class="line">  KT_SUFFIX:String</span><br><span class="line">  XML_SUFFIX:String</span><br><span class="line">  TEMPLATE_ENTITY_JAVA:String</span><br><span class="line">  TEMPLATE_ENTITY_KT:String</span><br><span class="line">  TEMPLATE_MAPPER:String</span><br><span class="line">  TEMPLATE_XML:String</span><br><span class="line">  TEMPLATE_SERVICE:String</span><br><span class="line">  TEMPLATE_SERVICE_IMPL:String</span><br><span class="line">  TEMPLATE_CONTROLLER:String</span><br><span class="line">  VM_LOAD_PATH_KEY:String</span><br><span class="line">  VM_LOAD_PATH_VALUE:String</span><br><span class="line">  SUPER_MAPPER_CLASS:String</span><br><span class="line">  SUPER_SERVICE_CLASS:String</span><br><span class="line">  SUPER_SERVICE_IMPL_CLASS:String</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class DataSourceConfig &#123;</span><br><span class="line">  - dbQuery:IDbQuery;</span><br><span class="line">  - dbType:DbType;</span><br><span class="line">  - schemaName:String;</span><br><span class="line">  - typeConvert:ITypeConvert;</span><br><span class="line">  - url:String;</span><br><span class="line">  - driverName:String</span><br><span class="line">  - username:String</span><br><span class="line">  - password:String</span><br><span class="line">  + getDbQuery():IDbQuery</span><br><span class="line">  + getDbType():DbType</span><br><span class="line">  - getDbType(str:String):DbType</span><br><span class="line">  + getTypeConvert():ITypeConvert</span><br><span class="line">  + getConn():Connection</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">abstract class FileOutConfig &#123;</span><br><span class="line">  - templatePath:String</span><br><span class="line">  + FileOutConfig()</span><br><span class="line">  + FileOutConfig(templatePath:String)</span><br><span class="line">  + outputFile(tableInfo:TableInfo):abstract String</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class GlobalConfig &#123;</span><br><span class="line">  - outputDir:String</span><br><span class="line">  - fileOverride:boolean</span><br><span class="line">  - open:boolean</span><br><span class="line">  - enableCache:boolean</span><br><span class="line">  - author:String</span><br><span class="line">  - kotlin:booealn</span><br><span class="line">  - swagger2:boolean</span><br><span class="line">  - activeRecord:boolean</span><br><span class="line">  - baseResultMap:boolean</span><br><span class="line">  - dateType:DateType</span><br><span class="line">  - baseColumnList:boolean</span><br><span class="line">  - entityName:String</span><br><span class="line">  - mapperName:String</span><br><span class="line">  - xmlName:String</span><br><span class="line">  - serviceName:String</span><br><span class="line">  - serviceImplName:String</span><br><span class="line">  - controllerName:String</span><br><span class="line">  - idType:IdType</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface IDbQuery &#123;</span><br><span class="line">  dbType():DbType</span><br><span class="line">  tablesSql():String</span><br><span class="line">  tableFieldsSql():String</span><br><span class="line">  tableName():String</span><br><span class="line">  tableComment():String</span><br><span class="line">  fieldName():String</span><br><span class="line">  fieldType():String</span><br><span class="line">  fieldComment():String</span><br><span class="line">  fieldKey():String</span><br><span class="line">  isKeyIdentity(results:ResultSet) throws SQLException:boolean</span><br><span class="line">  fieldCustom():String[]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface IFileCreate &#123;</span><br><span class="line">  isCreate(configBuilder:ConfigBuilder, fileType:FileType, filePath:String):boolean</span><br><span class="line">  checkDir(filePath:String):void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface INameConvert  &#123;</span><br><span class="line">  entityNameConvert(tableInfo:TableInfo):String</span><br><span class="line">  propertyNameConvert(field:TableField):void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface ITypeConvert &#123;</span><br><span class="line">  processTypeConvert(globalConfig:GlobalConfig, tableField:TableField):IColumnType</span><br><span class="line">  processTypeConvert(globalConfig:GlobalConfig, fieldType:String):IColumnType</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class PackageConfig &#123;</span><br><span class="line">  - parent:String</span><br><span class="line">  - moduleName:String</span><br><span class="line">  - entity:String</span><br><span class="line">  - service:String</span><br><span class="line">  - serviceImpl:String</span><br><span class="line">  - mapper:String</span><br><span class="line">  - xml:String</span><br><span class="line">  - controller:String</span><br><span class="line">  - pathInfo:Map&lt;String, String&gt;</span><br><span class="line">  + getParent():String</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class StrategyConfig &#123;</span><br><span class="line">  - isCapitalMode:boolean</span><br><span class="line">  - skipView:boolean</span><br><span class="line">  - nameConvert:INameConvert</span><br><span class="line">  - naming:NamingStrategy</span><br><span class="line">  - columnNaming:NamingStrategy</span><br><span class="line">  - tablePrefix:String[]</span><br><span class="line">  - fieldPrefix:String[]</span><br><span class="line">  - superEntityClass:String</span><br><span class="line">  - superEntityColumns:String[]</span><br><span class="line">  - superMapperClass:String</span><br><span class="line">  - superServiceClass:String</span><br><span class="line">  - superServiceImplClass:String</span><br><span class="line">  - superControllerClass:String</span><br><span class="line">  - include:String[]</span><br><span class="line">  - exclude:String[]</span><br><span class="line">  - entitySerialVersionUID:boolean</span><br><span class="line">  - entityColumnConstant:boolean</span><br><span class="line">  - entityBuilderModel:boolean</span><br><span class="line">  - entityLombokModel:boolean</span><br><span class="line">  - entityBooleanColumnRemoveIsPrefix:boolean</span><br><span class="line">  - restControllerStyle:boolean</span><br><span class="line">  - controllerMappingHyphenStyle:boolean</span><br><span class="line">  - entityTableFieldAnnotationEnable:boolean</span><br><span class="line">  - versionFieldName:String</span><br><span class="line">  - logicDeleteFieldName:String</span><br><span class="line">  - tableFillList:List&lt;TableFill&gt;</span><br><span class="line">  + isCapitalModeNaming(word:String):boolean</span><br><span class="line">  + containsTablePrefix(tableName:String):boolean</span><br><span class="line">  + getColumnNaming():NamingStrategy</span><br><span class="line">  + setTablePrefix():StrategyConfig </span><br><span class="line">  + includeSuperEntityColumns(fieldName:String):boolean</span><br><span class="line">  + setSuperEntityColumns(superEntityColumns:String...):StrategyConfig</span><br><span class="line">  + setInclude(include:String...):StrategyConfig </span><br><span class="line">  + setExclude(exclude:String...):StrategyConfig</span><br><span class="line">  + setFieldPrefix(fieldPrefixs:String...):StrategyConfig</span><br><span class="line">  + setSuperEntityClass(superEntityClass:String):StrategyConfig </span><br><span class="line">  + setSuperEntityClass(clazz:Class&lt;?&gt;):StrategyConfig</span><br><span class="line">  + setSuperEntityClass(clazz:Class&lt;?&gt;, columnNaming:NamingStrategy):StrategyConfig</span><br><span class="line">  # convertSuperEntityColumns(clazz:Class&lt;?&gt;):void</span><br><span class="line">  + entityTableFieldAnnotationEnable(isEnableAnnotation:boolean):StrategyConfig</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">class ConfigBuilder &#123;</span><br><span class="line">  - template:final TemplateConfig</span><br><span class="line">  - dataSourceConfig:final DataSourceConfig</span><br><span class="line">  - connection:Connection</span><br><span class="line">  - dbQuery:IDbQuery</span><br><span class="line">  - superEntityClass:String</span><br><span class="line">  - superMapperClass:String</span><br><span class="line">  - superServiceClass:String</span><br><span class="line">  - superServiceImplClass:String</span><br><span class="line">  - superServiceImplClass:String</span><br><span class="line">  - tableInfoList:List&lt;TableInfo&gt;</span><br><span class="line">  - packageInfo:Map&lt;String, String&gt;</span><br><span class="line">  - pathInfo:Map&lt;String, String&gt;</span><br><span class="line">  - strategyConfig:StrategyConfig</span><br><span class="line">  - globalConfig:GlobalConfig</span><br><span class="line">  - injectionConfig:InjectionConfig</span><br><span class="line">  - commentSupported:boolean</span><br><span class="line">  + ConfigBuilder(packageConfig:PackageConfig, dataSourceConfig:DataSourceConfig, strategyConfig:StrategyConfig, template:TemplateConfig, globalConfig:GlobalConfig)</span><br><span class="line">  + getPackageInfo():Map&lt;String, String&gt;</span><br><span class="line">  + getPathInfo():Map&lt;String, String&gt;</span><br><span class="line">  + getSuperEntityClass():String</span><br><span class="line">  + getSuperMapperClass():String</span><br><span class="line">  + getSuperServiceClass():String</span><br><span class="line">  + getSuperServiceImplClass():String</span><br><span class="line">  + getSuperControllerClass():String</span><br><span class="line">  + getTableInfoList():List&lt;TableInfo&gt;</span><br><span class="line">  + setTableInfoList(tableInfoList:List&lt;TableInfo&gt;):ConfigBuilder</span><br><span class="line">  + getTemplate():TemplateConfig</span><br><span class="line">  - handlerPackage(template:TemplateConfig, outputDir:String, config:PackageConfig):void</span><br><span class="line">  - setPathInfo(pathInfo:Map&lt;String,String&gt;, template:String, template:String, path:String, module:String):void</span><br><span class="line">  - handlerDataSource(config:DataSourceConfig):void</span><br><span class="line">  - handlerStrategy(config:StrategyConfig):void</span><br><span class="line">  - processTypes(config:StrategyConfig):void</span><br><span class="line">  - processTable(tableList:List&lt;TableInfo&gt;, strategy:NamingStrategy, config:StrategyConfig):List&lt;TableInfo&gt;</span><br><span class="line">  - checkImportPackages(tableInfo:TableInfo):void</span><br><span class="line">  - getTablesInfo(config:StrategyConfig):List&lt;TableInfo&gt;</span><br><span class="line">  - tableNameMatches(setTableName:String, dbTableName:String):boolean</span><br><span class="line">  - convertTableFields(tableInfo:TableInfo, config:StrategyConfig):TableInfo</span><br><span class="line">  - joinPath(parentDir:String, packageName:String):String</span><br><span class="line">  - joinPackage(parent:String, subPackage:String):String</span><br><span class="line">  - processName(name:String, strategy:NamingStrategy):String</span><br><span class="line">  - processName(name:String, strategy:NamingStrategy, prefix:String[]):String</span><br><span class="line">  + getStrategyConfig():StrategyConfig</span><br><span class="line">  + setStrategyConfig(strategyConfig:StrategyConfig):ConfigBuilder</span><br><span class="line">  + getGlobalConfig():GlobalConfig</span><br><span class="line">  + setGlobalConfig(globalConfig:GlobalConfig):ConfigBuilder</span><br><span class="line">  + getInjectionConfig():InjectionConfig</span><br><span class="line">  + setInjectionConfig(injectionConfig:InjectionConfig):ConfigBuilder</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class DB2TypeConvert &#123;</span><br><span class="line">  + processTypeConvert(globalConfig:GlobalConfig, fieldType:String):GlobalConfig</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class DmTypeConvert &#123;</span><br><span class="line">  + processTypeConvert(globalConfig:GlobalConfig, fieldType:String):IColumnType</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class MySqlTypeConvert &#123;</span><br><span class="line">  + processTypeConvert(globalConfig:GlobalConfig, fieldType:String):IColumnType</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class OracleTypeConvert &#123;</span><br><span class="line">  + processTypeConvert(globalConfig:ClobalConfig, fieldType:String):IColumnType</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class PostgreSqlTypeConvert &#123;</span><br><span class="line">  + processTypeConvert(globalConfig:GlobalConfig, fieldType:String):IColumnType</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class SqlServerTypeConvert &#123;</span><br><span class="line">  + processTypeConvert(globalConfig:GlobalConfig, fieldType:String):IColumnType</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class SqliteTypeConvert &#123;</span><br><span class="line">  + processTypeConvert(globalConfig:GlobalConfig, fieldType:String):IColumnType</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class TableField &#123;</span><br><span class="line">  - keyIdentityFlag:boolean</span><br><span class="line">  - name:String</span><br><span class="line">  - type:String</span><br><span class="line">  - propertyName:String</span><br><span class="line">  - columnType:IColumnType</span><br><span class="line">  - comment:String</span><br><span class="line">  - fill:String</span><br><span class="line">  - customMap:Map&lt;String, Object&gt;</span><br><span class="line">  + setConvert(boolean convert):TableField</span><br><span class="line">  # setConvert(strategyConfig:StrategyConfig):TableField</span><br><span class="line">  + setProperty(strategyConfig:StrategyConfig, propertyName:String):TableField</span><br><span class="line">  + getPropertyType():String</span><br><span class="line">  + getCapitalName():String</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class TableFill &#123;</span><br><span class="line">  - fieldName:String</span><br><span class="line">  - fieldFill:String</span><br><span class="line">  + TableFill(fieldName:String, ignore:FieldFill)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class TableInfo &#123;</span><br><span class="line">  - importPackages:final Set&lt;String&gt;</span><br><span class="line">  - convert:boolean</span><br><span class="line">  - name:String</span><br><span class="line">  - comment:String</span><br><span class="line">  - entityName:String</span><br><span class="line">  - mapperName:String</span><br><span class="line">  - xmlName:String</span><br><span class="line">  - serviceName:String</span><br><span class="line">  - serviceImplName:String</span><br><span class="line">  - controllerName:String</span><br><span class="line">  - fields:List&lt;TableField&gt;</span><br><span class="line">  - commonFields:List&lt;TableField&gt;</span><br><span class="line">  - fieldName:String</span><br><span class="line">  + setConvert(convert:boolean):TableInfo</span><br><span class="line">  # setConvert(strategyConfig:StrategyConfig):TableInfo</span><br><span class="line">  + getEntityPath(): String</span><br><span class="line">  + setEntityName(strategyConfig:StrategyConfig, entityName:String):TableInfo</span><br><span class="line">  + setFields(fields:List&lt;TableField&gt;):TableIInfo</span><br><span class="line">  + setImportPackages(pkg:String):TableInfo</span><br><span class="line">  + getFieldNames():String</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class AbstractDbQuery &#123;</span><br><span class="line">  + isKeyIdentity(results:ResultSet)throws SQLException:boolean</span><br><span class="line">  + fieldCustom():String[]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class DB2Query &#123;</span><br><span class="line">  + dbType(): DbType</span><br><span class="line">  + tableSql():String</span><br><span class="line">  + tableFieldsSql():String</span><br><span class="line">  + tableName():String</span><br><span class="line">  + tableComment():String</span><br><span class="line">  + fieldName():String</span><br><span class="line">  + fieldType():String</span><br><span class="line">  + fieldComment():String</span><br><span class="line">  + fieldKey():String</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class DMQuery &#123;</span><br><span class="line">  + dbType():DbType</span><br><span class="line">  + tablesSql():Striing</span><br><span class="line">  + tableFiieldsSql():String</span><br><span class="line">  + tableName():String</span><br><span class="line">  + tableComment():String</span><br><span class="line">  + fieldName():String</span><br><span class="line">  + fieldType():String</span><br><span class="line">  + fieldComment():String</span><br><span class="line">  + fieldKey():String</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class H2Query &#123;</span><br><span class="line">  + dbType():DbType</span><br><span class="line">  + tablesSql():String</span><br><span class="line">  + tableFieldsSql():String</span><br><span class="line">  + tableName():String</span><br><span class="line">  + tableComment():String</span><br><span class="line">  + fieldName():String</span><br><span class="line">  + fieldType():String</span><br><span class="line">  + fieldComment():String</span><br><span class="line">  + fieldKey():String</span><br><span class="line">  + iskeyIdentity(results:ResultSet)throws SQLException:boolean</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class MariadbQuery &#123;</span><br><span class="line">  + dbType():DbType</span><br><span class="line">  + tablesSql():String</span><br><span class="line">  + tableFieldsSql():String</span><br><span class="line">  + tableName():String</span><br><span class="line">  + tableComment():String</span><br><span class="line">  + fieldName():String</span><br><span class="line">  + fieldType():String</span><br><span class="line">  + fieldComment():Striing</span><br><span class="line">  + fieldKey():String</span><br><span class="line">  + isKeyIdentity()throws SQLException:boolean</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class MySqlQuery &#123;</span><br><span class="line">  + dbType():DbType</span><br><span class="line">  + tablesSql():String</span><br><span class="line">  + tableFieldsSql():String</span><br><span class="line">  + tableName():String</span><br><span class="line">  + tableComment():String</span><br><span class="line">  + fieldName():String</span><br><span class="line">  + fieldType():String</span><br><span class="line">  + fieldComment():Striing</span><br><span class="line">  + fieldKey():String</span><br><span class="line">  + isKeyIdentity()throws SQLException:boolean</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class OracleQuery &#123;</span><br><span class="line">  + dbType():DbType</span><br><span class="line">  + tablesSql():String</span><br><span class="line">  + tableFieldsSql():String</span><br><span class="line">  + tableName():String</span><br><span class="line">  + tableComment():String</span><br><span class="line">  + fieldName():String</span><br><span class="line">  + fieldType():String</span><br><span class="line">  + fieldComment():Striing</span><br><span class="line">  + fieldKey():String</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class PostgreSqlQuery &#123;</span><br><span class="line">  + dbType():DbType</span><br><span class="line">  + tablesSql():String</span><br><span class="line">  + tableFieldsSql():String</span><br><span class="line">  + tableName():String</span><br><span class="line">  + tableComment():String</span><br><span class="line">  + fieldName():String</span><br><span class="line">  + fieldType():String</span><br><span class="line">  + fieldComment():Striing</span><br><span class="line">  + fieldKey():String</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class SqlServerQuery &#123;</span><br><span class="line">  + dbType():DbType</span><br><span class="line">  + tablesSql():String</span><br><span class="line">  + tableFieldsSql():String</span><br><span class="line">  + tableName():String</span><br><span class="line">  + tableComment():String</span><br><span class="line">  + fieldName():String</span><br><span class="line">  + fieldType():String</span><br><span class="line">  + fieldComment():Striing</span><br><span class="line">  + fieldKey():String</span><br><span class="line">  + isKeyIdentity()throws SQLException:boolean</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class SqliteQuery &#123;</span><br><span class="line">  + dbType():DbType</span><br><span class="line">  + tablesSql():String</span><br><span class="line">  + tableFieldsSql():String</span><br><span class="line">  + tableName():String</span><br><span class="line">  + tableComment():String</span><br><span class="line">  + fieldName():String</span><br><span class="line">  + fieldType():String</span><br><span class="line">  + fieldComment():Striing</span><br><span class="line">  + fieldKey():String</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">enum DateType &#123;</span><br><span class="line">  ONLY_DATE</span><br><span class="line">  SQL_PACK</span><br><span class="line">  TIME_PACK</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">enum DbColumnType &#123;</span><br><span class="line">  BASE_BYTE</span><br><span class="line">  BASE_SHORT</span><br><span class="line">  BASE_CHAR</span><br><span class="line">  BASE_INT</span><br><span class="line">  BASE_LONG</span><br><span class="line">  BASE_FLOAT</span><br><span class="line">  BASE_DOUBLE</span><br><span class="line">  BASE_BOOLEAN</span><br><span class="line">  BYTE</span><br><span class="line">  SHORT</span><br><span class="line">  CHARACTER</span><br><span class="line">  INTEGER</span><br><span class="line">  LONG</span><br><span class="line">  FLOAT</span><br><span class="line">  DOUBLE</span><br><span class="line">  BOOLEAN</span><br><span class="line">  STRING</span><br><span class="line">  DATA_SQL</span><br><span class="line">  TIME</span><br><span class="line">  TIMESTAMP</span><br><span class="line">  BLOB</span><br><span class="line">  CLOB</span><br><span class="line">  LOCAL_DATE</span><br><span class="line">  LOCAL_TIME</span><br><span class="line">  YEAR</span><br><span class="line">  YEAR_MONTH</span><br><span class="line">  LOCAL_DATE_TIME</span><br><span class="line">  INSTANT</span><br><span class="line">  BYTE_ARRAY</span><br><span class="line">  OBJECT</span><br><span class="line">  DATE</span><br><span class="line">  BIG_INTEGER</span><br><span class="line">  BIG_DECIMAL</span><br><span class="line">  - type:final String</span><br><span class="line">  - pkg:final String</span><br><span class="line">  DbColumnType(type:finalString, pkg:final String)</span><br><span class="line">  + getType():String</span><br><span class="line">  + getPkg():String</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">enum FileType &#123;</span><br><span class="line">  ENTITY</span><br><span class="line">  MAPPER</span><br><span class="line">  XML</span><br><span class="line">  SERVICE</span><br><span class="line">  SERVICE_IMPL</span><br><span class="line">  CONTROLLER</span><br><span class="line">  OTHER</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface IColumnType &#123;</span><br><span class="line">  getType():Striing</span><br><span class="line">  getPkg():Striing</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">enum NamingStrategy &#123;</span><br><span class="line">  + underlineToCamel(name:String):static String</span><br><span class="line">  + removePrefix(name:String, prefix:String...):static String</span><br><span class="line">  + isPrefixContained(name:String, prefix:String...):static boolean</span><br><span class="line">  + removePrefixAndCamel(name:String, tablePrefix:String[]):static String</span><br><span class="line">  + capitalFirst(name:String):static String</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class TemplateConfig &#123;</span><br><span class="line">  - entity:String</span><br><span class="line">  - entityKt:String</span><br><span class="line">  - service:String</span><br><span class="line">  - serviceImpl:String</span><br><span class="line">  - mapper:String</span><br><span class="line">  - xml:String</span><br><span class="line">  - controller:String</span><br><span class="line">  + getEntity(kotlin:boolean):String</span><br><span class="line">  + disable(templateTypes:TemplateType...):TemplateConfig</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure>



<h2 id="ConfigBuilder类"><a href="#ConfigBuilder类" class="headerlink" title="ConfigBuilder类"></a>ConfigBuilder类</h2><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><h4 id="TableField类"><a href="#TableField类" class="headerlink" title="TableField类"></a>TableField类</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@startuml</span><br><span class="line">class TableField &#123;</span><br><span class="line">  - keyIdentityFlag:boolean</span><br><span class="line">  - name:String</span><br><span class="line">  - type:String</span><br><span class="line">  - propertyName:String</span><br><span class="line">  - columnType:IColumnType</span><br><span class="line">  - comment:String</span><br><span class="line">  - fill:String</span><br><span class="line">  - customMap:Map&lt;String, Object&gt;</span><br><span class="line">  + setConvert(boolean convert):TableField</span><br><span class="line">  # setConvert(strategyConfig:StrategyConfig):TableField</span><br><span class="line">  + setProperty(strategyConfig:StrategyConfig, propertyName:String):TableField</span><br><span class="line">  + getPropertyType():String</span><br><span class="line">  + getCapitalName():String</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface IColumnType &#123;</span><br><span class="line">  getType():Striing</span><br><span class="line">  getPkg():Striing</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TableField ..&gt; IColumnType</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure>

<blockquote>
<p>该类封装了DB表字段的信息：</p>
<ul>
<li>keyIdentityFlag:boolean： 主键是否为自增类型</li>
<li>name：字段名</li>
<li>columnType：字段类型</li>
<li>customMap：自定义查询字段列表</li>
</ul>
</blockquote>
<h4 id="TableInfo类"><a href="#TableInfo类" class="headerlink" title="TableInfo类"></a>TableInfo类</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@startuml</span><br><span class="line">class TableInfo &#123;</span><br><span class="line">  - importPackages:final Set&lt;String&gt;</span><br><span class="line">  - convert:boolean</span><br><span class="line">  - name:String</span><br><span class="line">  - comment:String</span><br><span class="line">  - entityName:String</span><br><span class="line">  - mapperName:String</span><br><span class="line">  - xmlName:String</span><br><span class="line">  - serviceName:String</span><br><span class="line">  - serviceImplName:String</span><br><span class="line">  - controllerName:String</span><br><span class="line">  - fields:List&lt;TableField&gt;</span><br><span class="line">  - commonFields:List&lt;TableField&gt;</span><br><span class="line">  - fieldName:String</span><br><span class="line">  + setConvert(convert:boolean):TableInfo</span><br><span class="line">  # setConvert(strategyConfig:StrategyConfig):TableInfo</span><br><span class="line">  + getEntityPath(): String</span><br><span class="line">  + setEntityName(strategyConfig:StrategyConfig, entityName:String):TableInfo</span><br><span class="line">  + setFields(fields:List&lt;TableField&gt;):TableIInfo</span><br><span class="line">  + setImportPackages(pkg:String):TableInfo</span><br><span class="line">  + getFieldNames():String</span><br><span class="line">&#125;</span><br><span class="line">class TableField &#123;</span><br><span class="line">&#125;</span><br><span class="line">TableInfo ..&gt; TableField</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure>

<blockquote>
<p>该类是表信息对应的JaveBean，用来封装DB表对应生成的Controller/Service等的名称，和TableField对应</p>
<ul>
<li>importPackages：使用时候应该导入表</li>
<li>entityName：生成的实体的名称</li>
<li>mapperName：生成的Mapper类的名称</li>
<li>xmlName：生成的XML的名称</li>
<li>serviceName/serviceImplName：生成的service相关的名称</li>
<li>controllerName：生成的控制器的名称</li>
</ul>
</blockquote>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@startuml</span><br><span class="line">class ConfigBuilder &#123;</span><br><span class="line">  - template: TemplateConfig</span><br><span class="line">  - dataSourceConfig: DataSourceConfig</span><br><span class="line">  - connection: Connection</span><br><span class="line">  - dbQuery: IDbQuery</span><br><span class="line">  - superEntityClass: String</span><br><span class="line">  - superMapperClass: String</span><br><span class="line">  - superServiceClass: String</span><br><span class="line">  - superServiceImplClass: String</span><br><span class="line">  - superControllerClass: String</span><br><span class="line">  - superParamClass: String</span><br><span class="line">  - superPatterClass: String</span><br><span class="line">  - tableInfoList: List&lt;TableInfo&gt;</span><br><span class="line">  - packageInfo: Map</span><br><span class="line">  - pathInfo: Map</span><br><span class="line">  - strategyConfig: StrategyConfig</span><br><span class="line">  - globalConfig: GlobalConfig</span><br><span class="line">  - commentSupported: boolean</span><br><span class="line">  + ConfigBuilder(packageConfig, dataSourceConfig, strategyConfig, template, globalConfig)</span><br><span class="line">  - handlerPackage(templateConfig, outputDir, packageConfig)</span><br><span class="line">  - handlerDataSource(dataSourceConfig)</span><br><span class="line">  - handlerStrategy(strategyConfig)</span><br><span class="line">  - processTypes(strategyConfig)</span><br><span class="line">  - getTablesInfo(strategyConfig): List&lt;TableInfo&gt;</span><br><span class="line">  - processTable(tableList, namingStrategy, strategyConfig): List&lt;TableInfo&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ConfigBuilder ..&gt; TemplateConfig</span><br><span class="line">ConfigBuilder ..&gt; DataSourceConfig</span><br><span class="line">ConfigBuilder ..&gt; TableInfo</span><br><span class="line">ConfigBuilder ..&gt; StrategyConfig</span><br><span class="line">ConfigBuilder ..&gt; GlobalConfig</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure>

<blockquote>
<p>方法说明：</p>
<ul>
<li>handlerPackage：该方法通过TemplateConfig类，设置entity/xml/service/controller等包的名称，再根据这些包名，设置各自的路径信息</li>
<li>handlerDataSource：该方法根据DB驱动设置DB的数据源，并且根据DB的种类，设置DB的查询语句(dbQuery)</li>
<li>handlerStrategy：该方法调用 processTypes 和 getTablesInfo方法，分类设置entity/mapper/service/controller等的超类，并且根据dbQuery填充TableInfo类</li>
<li>processTypes： 设置超类</li>
<li>getTablesInfo：通过dbQuery和jdbc组装SQL查询表信息，然后通过 processTable 将结果集和TableInfo对应</li>
<li>processTable： 把从DB中查询出的表/字段信息对应到TableInfo中</li>
</ul>
<p>在用ConfigBuilder的具有四个形参的构造方法实例化该类时，会在内部依次调用上面的6个方法。该构造方法在AutoGenerator的execute方法里调用。具体实时调用情况如下面时序图</p>
</blockquote>
<h2 id="AutoGenerator类"><a href="#AutoGenerator类" class="headerlink" title="AutoGenerator类"></a>AutoGenerator类</h2><h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@startuml</span><br><span class="line">class AutoGenerator &#123;</span><br><span class="line">  # config:ConfigBuilder</span><br><span class="line">  # injectionConfig:InjectionConfig</span><br><span class="line">  - dataSource:DataSourceConfig</span><br><span class="line">  - strategy:StrategyConfig</span><br><span class="line">  - packageInfo:PackageConfig</span><br><span class="line">  - template:TemplateConfig</span><br><span class="line">  - globalConfig:GlobalConfig </span><br><span class="line">  - templateEngine:AbstractTemplateEngine</span><br><span class="line">  + execute():void</span><br><span class="line">  # getAllTableInfoList(config:ConfigBuilder):List&lt;TableInfo&gt;</span><br><span class="line">  # pretreatmentConfigBuilder(config:ConfigBuilder):ConfigBuilder</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">abstract class AbstractTemplateEngine &#123;</span><br><span class="line">  - configBuilder: ConfigBuilder</span><br><span class="line">  + init(configBuilder): AbstractTemplateEngine</span><br><span class="line">  + batchOutput(): AbstractTemplateEngine</span><br><span class="line">  + writer()</span><br><span class="line">  + mkdirs()</span><br><span class="line">  + open()</span><br><span class="line">  + getObjectMap(tableInfo)</span><br><span class="line">  + isCreate(fileType, filePath)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class FreemarkerTemplateEngine &#123;</span><br><span class="line">  - configuration: Configuration</span><br><span class="line">  + init(configBuilder): FreemarkerTemplateEngine</span><br><span class="line">  + writer()</span><br><span class="line">&#125;</span><br><span class="line">AutoGenerator --&gt; AbstractTemplateEngine</span><br><span class="line">AbstractTemplateEngine &lt;|-- FreemarkerTemplateEngine</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure>

<blockquote>
<p>AbstractTemplateEngine方法说明：</p>
<ul>
<li>init：初始化模板引擎</li>
<li>mkdirs：创建目录</li>
<li>batchOutput：判断是否生成entity/mapper/service/controller目录，如已经生成则调用 FreemarkerTemplateEngine 类的 write 方法使用模板引擎生成代码文件</li>
<li>open：打开文件输出目录</li>
</ul>
<p>AutoGenerator类的execute方法为该类的入口函数，外部的Application调用该方法。</p>
<p>execute：该方法中，初始化ConfigBuilder配置类，并调用模板引擎类生成代码</p>
</blockquote>
<h3 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@startuml</span><br><span class="line">actor Application</span><br><span class="line"></span><br><span class="line">Application -&gt; AutoGenerator ++: execute</span><br><span class="line"></span><br><span class="line">AutoGenerator -&gt; ConfigBuilder ++: ConfigBuilder</span><br><span class="line"></span><br><span class="line">ConfigBuilder -&gt; AbstractTemplateEngine ++: init</span><br><span class="line"></span><br><span class="line">AbstractTemplateEngine -&gt; AbstractTemplateEngine ++: mkdir</span><br><span class="line"></span><br><span class="line">AbstractTemplateEngine -&gt; AbstractTemplateEngine ++: batch</span><br><span class="line"></span><br><span class="line">AbstractTemplateEngine -&gt; FreemarkerTemplateEngine ++: writer</span><br><span class="line"></span><br><span class="line">FreemarkerTemplateEngine -&gt; Template ++: process</span><br><span class="line"></span><br><span class="line">return processDone</span><br><span class="line"></span><br><span class="line">return write success</span><br><span class="line"></span><br><span class="line">return batch done</span><br><span class="line"></span><br><span class="line">return mkdir success</span><br><span class="line"></span><br><span class="line">return init done</span><br><span class="line"></span><br><span class="line">return done</span><br><span class="line"></span><br><span class="line">return success</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>源码分析</category>
      </categories>
      <tags>
        <tag>mybatis-plus-generator</tag>
        <tag>mybatis-plus</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins自动化部署</title>
    <url>/2020/06/25/Jenkins%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h2 id="Docker环境部署"><a href="#Docker环境部署" class="headerlink" title="Docker环境部署"></a>Docker环境部署</h2><blockquote>
<p><a href="https://github.com/tg10020617/autodeploy" target="_blank" rel="noopener">Jenkins &amp; Nexus容器</a></p>
</blockquote>
<h3 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"2"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">        <span class="attr">jenkins:</span></span><br><span class="line">                <span class="attr">build:</span> <span class="string">./jenkins/jenkins</span></span><br><span class="line">                <span class="comment">#image: jenkins</span></span><br><span class="line">                <span class="comment">#restart: unless-stopped</span></span><br><span class="line">                <span class="attr">ports:</span></span><br><span class="line">                        <span class="bullet">-</span> <span class="string">"8080:8080"</span></span><br><span class="line">                <span class="attr">volumes:</span></span><br><span class="line">                        <span class="bullet">-</span> <span class="string">"./data/jenkins/jenkins:/var/jenkins_home"</span></span><br><span class="line">                        <span class="bullet">-</span> <span class="string">"./data/jenkins/apache-maven:/usr/local/apache-maven"</span></span><br><span class="line">                <span class="attr">container_name:</span> <span class="string">cservice-jenkins-1</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">nexus3:</span></span><br><span class="line">                <span class="comment">#build: ./nexus/nexus3</span></span><br><span class="line">                <span class="attr">image:</span> <span class="string">sonatype/nexus3</span></span><br><span class="line">                <span class="comment">#restart: unless-stopped</span></span><br><span class="line">                <span class="attr">volumes:</span></span><br><span class="line">                        <span class="bullet">-</span> <span class="string">"./data/nexus/nexus3:/nexus-data"</span></span><br><span class="line">                <span class="attr">ports:</span></span><br><span class="line">                        <span class="bullet">-</span> <span class="string">"8081:8081"</span></span><br><span class="line">                <span class="attr">container_name:</span> <span class="string">cservice-nexus3-1</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>/nexus-data : nexus私服仓库位置</p>
<p>/usr/local/apache-maven : jenkins容器中的maven安装目录，自动化部署时在jenkins容器中执行mvn install</p>
<p>/var/jenkins_home : jenkins根目录，/var/jenkins_home/workspace目录放各微服务</p>
</blockquote>
<h3 id="容器启动"><a href="#容器启动" class="headerlink" title="容器启动"></a>容器启动</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/autodeploy</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>



<h2 id="Nexus私服配置"><a href="#Nexus私服配置" class="headerlink" title="Nexus私服配置"></a>Nexus私服配置</h2><h3 id="帐号配置"><a href="#帐号配置" class="headerlink" title="帐号配置"></a>帐号配置</h3><h4 id="查看初始admin用户密码"><a href="#查看初始admin用户密码" class="headerlink" title="查看初始admin用户密码"></a>查看初始admin用户密码</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it cservice-nexus3-1 /bin/bash</span><br><span class="line">cat /nexus-data/admin.password</span><br><span class="line">bash-4.4$ 02e49f43-9e45-4ab2-ac04-27200dbb69e2</span><br></pre></td></tr></table></figure>

<h4 id="登录admin帐号重置密码"><a href="#登录admin帐号重置密码" class="headerlink" title="登录admin帐号重置密码"></a>登录admin帐号重置密码</h4><blockquote>
<p>访问Nexus：<a href="http://127.0.0.1:8081/" target="_blank" rel="noopener">http://127.0.0.1:8081/</a></p>
<p>登录admin账户 &amp; 重置密码</p>
</blockquote>
<p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593075345/image-20200625125610062_jb1rtg.png" alt="image-20200625125610062"></p>
<h3 id="私服配置"><a href="#私服配置" class="headerlink" title="私服配置"></a>私服配置</h3><h4 id="配置Blob-可不配"><a href="#配置Blob-可不配" class="headerlink" title="配置Blob(可不配)"></a>配置Blob(可不配)</h4><p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593075344/image-20200625134005364_glcsr9.png" alt="image-20200625134005364"></p>
<h4 id="配置仓库"><a href="#配置仓库" class="headerlink" title="配置仓库"></a>配置仓库</h4><h5 id="aliyun-proxy"><a href="#aliyun-proxy" class="headerlink" title="aliyun-proxy"></a>aliyun-proxy</h5><p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593075346/image-20200625131724463_pb2oap.png" alt="image-20200625131724463"></p>
<h5 id="test-releases"><a href="#test-releases" class="headerlink" title="test-releases"></a>test-releases</h5><p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593075344/image-20200625132015890_bpcunw.png" alt="image-20200625132015890"></p>
<h5 id="test-snapshots"><a href="#test-snapshots" class="headerlink" title="test-snapshots"></a>test-snapshots</h5><p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593075343/image-20200625133223900_t0fekc.png" alt="image-20200625133223900"></p>
<h5 id="test-public"><a href="#test-public" class="headerlink" title="test-public"></a>test-public</h5><p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593075346/image-20200625133428642_r64rnf.png" alt="img"></p>
<h3 id="Maven本地配置"><a href="#Maven本地配置" class="headerlink" title="Maven本地配置"></a>Maven本地配置</h3><h4 id="apache-maven-3-5-3安装"><a href="#apache-maven-3-5-3安装" class="headerlink" title="apache-maven-3.5.3安装"></a>apache-maven-3.5.3安装</h4><blockquote>
<p>略</p>
</blockquote>
<h4 id="配置settings-xml"><a href="#配置settings-xml" class="headerlink" title="配置settings.xml"></a>配置settings.xml</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">Licensed to the Apache Software Foundation (ASF) under one</span></span><br><span class="line"><span class="comment">or more contributor license agreements.  See the NOTICE file</span></span><br><span class="line"><span class="comment">distributed with this work for additional information</span></span><br><span class="line"><span class="comment">regarding copyright ownership.  The ASF licenses this file</span></span><br><span class="line"><span class="comment">to you under the Apache License, Version 2.0 (the</span></span><br><span class="line"><span class="comment">"License"); you may not use this file except in compliance</span></span><br><span class="line"><span class="comment">with the License.  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Unless required by applicable law or agreed to in writing,</span></span><br><span class="line"><span class="comment">software distributed under the License is distributed on an</span></span><br><span class="line"><span class="comment">"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY</span></span><br><span class="line"><span class="comment">KIND, either express or implied.  See the License for the</span></span><br><span class="line"><span class="comment">specific language governing permissions and limitations</span></span><br><span class="line"><span class="comment">under the License.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"> | This is the configuration file for Maven. It can be specified at two levels:</span></span><br><span class="line"><span class="comment"> |</span></span><br><span class="line"><span class="comment"> |  1. User Level. This settings.xml file provides configuration for a single user,</span></span><br><span class="line"><span class="comment"> |                 and is normally provided in $&#123;user.home&#125;/.m2/settings.xml.</span></span><br><span class="line"><span class="comment"> |</span></span><br><span class="line"><span class="comment"> |                 <span class="doctag">NOTE:</span> This location can be overridden with the CLI option:</span></span><br><span class="line"><span class="comment"> |</span></span><br><span class="line"><span class="comment"> |                 -s /path/to/user/settings.xml</span></span><br><span class="line"><span class="comment"> |</span></span><br><span class="line"><span class="comment"> |  2. Global Level. This settings.xml file provides configuration for all Maven</span></span><br><span class="line"><span class="comment"> |                 users on a machine (assuming they're all using the same Maven</span></span><br><span class="line"><span class="comment"> |                 installation). It's normally provided in</span></span><br><span class="line"><span class="comment"> |                 $&#123;maven.conf&#125;/settings.xml.</span></span><br><span class="line"><span class="comment"> |</span></span><br><span class="line"><span class="comment"> |                 <span class="doctag">NOTE:</span> This location can be overridden with the CLI option:</span></span><br><span class="line"><span class="comment"> |</span></span><br><span class="line"><span class="comment"> |                 -gs /path/to/global/settings.xml</span></span><br><span class="line"><span class="comment"> |</span></span><br><span class="line"><span class="comment"> | The sections in this sample file are intended to give you a running start at</span></span><br><span class="line"><span class="comment"> | getting the most out of your Maven installation. Where appropriate, the default</span></span><br><span class="line"><span class="comment"> | values (values used when the setting is not specified) are provided.</span></span><br><span class="line"><span class="comment"> |</span></span><br><span class="line"><span class="comment"> |--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/SETTINGS/1.0.0"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- localRepository--&gt;</span></span><br><span class="line">   | The path to the local repository maven will use to store artifacts.</span><br><span class="line">   |</span><br><span class="line">   | Default: $&#123;user.home&#125;/.m2/repository</span><br><span class="line">   <span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>/Users/username/data/work/test/maven-libs<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- interactiveMode</span></span><br><span class="line"><span class="comment">   | This will determine whether maven prompts you when it needs input. If set to false,</span></span><br><span class="line"><span class="comment">   | maven will use a sensible default value, perhaps based on some other setting, for</span></span><br><span class="line"><span class="comment">   | the parameter in question.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   | Default: true</span></span><br><span class="line"><span class="comment">  &lt;interactiveMode&gt;true&lt;/interactiveMode&gt;</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- offline</span></span><br><span class="line"><span class="comment">   | Determines whether maven should attempt to connect to the network when executing a build.</span></span><br><span class="line"><span class="comment">   | This will have an effect on artifact downloads, artifact deployment, and others.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   | Default: false</span></span><br><span class="line"><span class="comment">  &lt;offline&gt;false&lt;/offline&gt;</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- pluginGroups</span></span><br><span class="line"><span class="comment">   | This is a list of additional group identifiers that will be searched when resolving plugins by their prefix, i.e.</span></span><br><span class="line"><span class="comment">   | when invoking a command line like "mvn prefix:goal". Maven will automatically add the group identifiers</span></span><br><span class="line"><span class="comment">   | "org.apache.maven.plugins" and "org.codehaus.mojo" if these are not already contained in the list.</span></span><br><span class="line"><span class="comment">   |--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">pluginGroups</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- pluginGroup</span></span><br><span class="line"><span class="comment">     | Specifies a further group identifier to use for plugin lookup.</span></span><br><span class="line"><span class="comment">    &lt;pluginGroup&gt;com.your.plugins&lt;/pluginGroup&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">pluginGroups</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- proxies</span></span><br><span class="line"><span class="comment">   | This is a list of proxies which can be used on this machine to connect to the network.</span></span><br><span class="line"><span class="comment">   | Unless otherwise specified (by system property or command-line switch), the first proxy</span></span><br><span class="line"><span class="comment">   | specification in this list marked as active will be used.</span></span><br><span class="line"><span class="comment">   |--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">proxies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- proxy</span></span><br><span class="line"><span class="comment">     | Specification for one proxy, to be used in connecting to the network.</span></span><br><span class="line"><span class="comment">     |</span></span><br><span class="line"><span class="comment">    &lt;proxy&gt;</span></span><br><span class="line"><span class="comment">      &lt;id&gt;optional&lt;/id&gt;</span></span><br><span class="line"><span class="comment">      &lt;active&gt;true&lt;/active&gt;</span></span><br><span class="line"><span class="comment">      &lt;protocol&gt;http&lt;/protocol&gt;</span></span><br><span class="line"><span class="comment">      &lt;username&gt;proxyuser&lt;/username&gt;</span></span><br><span class="line"><span class="comment">      &lt;password&gt;proxypass&lt;/password&gt;</span></span><br><span class="line"><span class="comment">      &lt;host&gt;proxy.host.net&lt;/host&gt;</span></span><br><span class="line"><span class="comment">      &lt;port&gt;80&lt;/port&gt;</span></span><br><span class="line"><span class="comment">      &lt;nonProxyHosts&gt;local.net|some.host.com&lt;/nonProxyHosts&gt;</span></span><br><span class="line"><span class="comment">    &lt;/proxy&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">proxies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- servers</span></span><br><span class="line"><span class="comment">   | This is a list of authentication profiles, keyed by the server-id used within the system.</span></span><br><span class="line"><span class="comment">   | Authentication profiles can be used whenever maven must make a connection to a remote server.</span></span><br><span class="line"><span class="comment">   |--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servers</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- server</span></span><br><span class="line"><span class="comment">     | Specifies the authentication information to use when connecting to a particular server, identified by</span></span><br><span class="line"><span class="comment">     | a unique name within the system (referred to by the 'id' attribute below).</span></span><br><span class="line"><span class="comment">     |</span></span><br><span class="line"><span class="comment">     | <span class="doctag">NOTE:</span> You should either specify username/password OR privateKey/passphrase, since these pairings are</span></span><br><span class="line"><span class="comment">     |       used together.</span></span><br><span class="line"><span class="comment">     |</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>test-releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">password</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>test-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">password</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Another sample, using keys to authenticate.</span></span><br><span class="line"><span class="comment">    &lt;server&gt;</span></span><br><span class="line"><span class="comment">      &lt;id&gt;siteServer&lt;/id&gt;</span></span><br><span class="line"><span class="comment">      &lt;privateKey&gt;/path/to/private/key&lt;/privateKey&gt;</span></span><br><span class="line"><span class="comment">      &lt;passphrase&gt;optional; leave empty if not used.&lt;/passphrase&gt;</span></span><br><span class="line"><span class="comment">    &lt;/server&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servers</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- mirrors</span></span><br><span class="line"><span class="comment">   | This is a list of mirrors to be used in downloading artifacts from remote repositories.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   | It works like this: a POM may declare a repository to use in resolving certain artifacts.</span></span><br><span class="line"><span class="comment">   | However, this repository may have problems with heavy traffic at times, so people have mirrored</span></span><br><span class="line"><span class="comment">   | it to several places.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   | That repository definition will have a unique id, so we can create a mirror reference for that</span></span><br><span class="line"><span class="comment">   | repository, to be used as an alternate download site. The mirror site will be the preferred</span></span><br><span class="line"><span class="comment">   | server for that repository.</span></span><br><span class="line"><span class="comment">   |--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- mirror</span></span><br><span class="line"><span class="comment">     | Specifies a repository mirror site to use instead of a given repository. The repository that</span></span><br><span class="line"><span class="comment">     | this mirror serves has an ID that matches the mirrorOf element of this mirror. IDs are used</span></span><br><span class="line"><span class="comment">     | for inheritance and direct lookup purposes, and must be unique across the set of mirrors.</span></span><br><span class="line"><span class="comment">     |</span></span><br><span class="line"><span class="comment">    &lt;mirror&gt;</span></span><br><span class="line"><span class="comment">      &lt;id&gt;mirrorId&lt;/id&gt;</span></span><br><span class="line"><span class="comment">      &lt;mirrorOf&gt;repositoryId&lt;/mirrorOf&gt;</span></span><br><span class="line"><span class="comment">      &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt;</span></span><br><span class="line"><span class="comment">      &lt;url&gt;http://my.repository.com/repo/path&lt;/url&gt;</span></span><br><span class="line"><span class="comment">    &lt;/mirror&gt;</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- profiles</span></span><br><span class="line"><span class="comment">   | This is a list of profiles which can be activated in a variety of ways, and which can modify</span></span><br><span class="line"><span class="comment">   | the build process. Profiles provided in the settings.xml are intended to provide local machine-</span></span><br><span class="line"><span class="comment">   | specific paths and repository locations which allow the build to work in the local environment.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   | For example, if you have an integration testing plugin - like cactus - that needs to know where</span></span><br><span class="line"><span class="comment">   | your Tomcat instance is installed, you can provide a variable here such that the variable is</span></span><br><span class="line"><span class="comment">   | dereferenced during the build process to configure the cactus plugin.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   | As noted above, profiles can be activated in a variety of ways. One way - the activeProfiles</span></span><br><span class="line"><span class="comment">   | section of this document (settings.xml) - will be discussed later. Another way essentially</span></span><br><span class="line"><span class="comment">   | relies on the detection of a system property, either matching a particular value for the property,</span></span><br><span class="line"><span class="comment">   | or merely testing its existence. Profiles can also be activated by JDK version prefix, where a</span></span><br><span class="line"><span class="comment">   | value of '1.4' might activate a profile when the build is executed on a JDK version of '1.4.2_07'.</span></span><br><span class="line"><span class="comment">   | Finally, the list of active profiles can be specified directly from the command line.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   | <span class="doctag">NOTE:</span> For profiles defined in the settings.xml, you are restricted to specifying only artifact</span></span><br><span class="line"><span class="comment">   |       repositories, plugin repositories, and free-form properties to be used as configuration</span></span><br><span class="line"><span class="comment">   |       variables for plugins in the POM.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   |--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- profile</span></span><br><span class="line"><span class="comment">     | Specifies a set of introductions to the build process, to be activated using one or more of the</span></span><br><span class="line"><span class="comment">     | mechanisms described above. For inheritance purposes, and to activate profiles via &lt;activatedProfiles/&gt;</span></span><br><span class="line"><span class="comment">     | or the command line, profiles have to have an ID that is unique.</span></span><br><span class="line"><span class="comment">     |</span></span><br><span class="line"><span class="comment">     | An encouraged best practice for profile identification is to use a consistent naming convention</span></span><br><span class="line"><span class="comment">     | for profiles, such as 'env-dev', 'env-test', 'env-production', 'user-jdcasey', 'user-brett', etc.</span></span><br><span class="line"><span class="comment">     | This will make it more intuitive to understand what the set of introduced profiles is attempting</span></span><br><span class="line"><span class="comment">     | to accomplish, particularly when you only have a list of profile id's for debug.</span></span><br><span class="line"><span class="comment">     |</span></span><br><span class="line"><span class="comment">     | This profile example uses the JDK version to trigger activation, and provides a JDK-specific repo.</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">id</span>&gt;</span>cservice-public<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">name</span>&gt;</span>cservice-public<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://127.0.0.1:8081/repository/test-public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">layout</span>&gt;</span>default<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">activeProfiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activeProfile</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">activeProfile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">activeProfiles</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="Jenkins配置"><a href="#Jenkins配置" class="headerlink" title="Jenkins配置"></a>Jenkins配置</h2><h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><h4 id="查看初始用户密码"><a href="#查看初始用户密码" class="headerlink" title="查看初始用户密码"></a>查看初始用户密码</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it cservice-jenkins-1 /bin/bash</span><br><span class="line"></span><br><span class="line">jenkins@1c12e86f9789:/$ cat /var/jenkins_home/secrets/initialAdminPassword</span><br><span class="line">2a67d2e0c7ff4a90bf39aa4b6652cf32</span><br><span class="line">jenkins@1c12e86f9789:/$</span><br></pre></td></tr></table></figure>

<h4 id="解锁Jenkins分配管理员帐号"><a href="#解锁Jenkins分配管理员帐号" class="headerlink" title="解锁Jenkins分配管理员帐号"></a>解锁Jenkins分配管理员帐号</h4><p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593075366/image-20200625135411994_qs6wkp.png" alt="image-20200625135411994"></p>
<h4 id="安装社区推荐插件"><a href="#安装社区推荐插件" class="headerlink" title="安装社区推荐插件"></a>安装社区推荐插件</h4><blockquote>
<p>略</p>
</blockquote>
<h4 id="创建管理员用户"><a href="#创建管理员用户" class="headerlink" title="创建管理员用户"></a>创建管理员用户</h4><p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593075355/image-20200625142052619_lcl2db.png" alt="img"></p>
<h3 id="配置jenkins容器的maven程序"><a href="#配置jenkins容器的maven程序" class="headerlink" title="配置jenkins容器的maven程序"></a>配置jenkins容器的maven程序</h3><h4 id="设置maven-amp-jenkins目录权限"><a href="#设置maven-amp-jenkins目录权限" class="headerlink" title="设置maven &amp; jenkins目录权限"></a>设置maven &amp; jenkins目录权限</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/autodeploy/data/jenkins</span><br><span class="line">chmod 777 apache-maven</span><br><span class="line">chmod 777 jenkins</span><br></pre></td></tr></table></figure>

<h4 id="配置容器maven"><a href="#配置容器maven" class="headerlink" title="配置容器maven"></a>配置容器maven</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/autodeploy/data/jenkins/apache-maven</span><br><span class="line">cp -rf ~/apache-maven-3.5.3 ./</span><br><span class="line">mkdir maven-libs</span><br><span class="line">chmod 777 maven-libs</span><br></pre></td></tr></table></figure>

<blockquote>
<p>jenkins中的Dockfile中自定义了如下maven_home，故重启jenkins容器使之生效</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vim ~/autodeploy/jenkins/jenkins/Dockerfile</span><br><span class="line"></span><br><span class="line"><span class="comment">################## Custom Settings ##################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># change root password</span></span><br><span class="line">RUN <span class="built_in">echo</span> <span class="string">"root:123456"</span>|chpasswd</span><br><span class="line"></span><br><span class="line"><span class="comment"># mkdir &amp;&amp; chmod apache-maven</span></span><br><span class="line">RUN mkdir /usr/<span class="built_in">local</span>/apache-maven \</span><br><span class="line">  &amp;&amp; chmod 777 /usr/<span class="built_in">local</span>/apache-maven</span><br><span class="line"><span class="comment"># add maven home into PATH</span></span><br><span class="line">ENV MAVEN_HOME /usr/<span class="built_in">local</span>/apache-maven/apache-maven-3.5.3</span><br><span class="line">ENV PATH <span class="variable">$MAVEN_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="comment">#RUN export MAVEN_HOME=/usr/local/apache-maven/apache-maven-3.5.3 \</span></span><br><span class="line"><span class="comment">#  &amp;&amp; PATH=$PATH:$MAVEN_HOME/bin \</span></span><br><span class="line"><span class="comment">#  &amp;&amp; export PATH</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################## Custom Settings ##################</span></span><br><span class="line">docker-compose down</span><br><span class="line">docker-compose up -d</span><br><span class="line">docker <span class="built_in">exec</span> -it cservice-jenkins-1 /bin/bash</span><br><span class="line"></span><br><span class="line">jenkins@64098a741648:/$ whereis mvn</span><br><span class="line">mvn: /usr/<span class="built_in">local</span>/apache-maven/apache-maven-3.5.3/bin/mvn.cmd /usr/<span class="built_in">local</span>/apache-maven/apache-maven-3.5.3/bin/mvn</span><br><span class="line">jenkins@64098a741648:/$</span><br></pre></td></tr></table></figure>



<h3 id="微服务部署配置"><a href="#微服务部署配置" class="headerlink" title="微服务部署配置"></a>微服务部署配置</h3><h4 id="基本配置-1"><a href="#基本配置-1" class="headerlink" title="基本配置"></a>基本配置</h4><p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593075355/image-20200625145929374_z7859n.png" alt="img"></p>
<h4 id="gitlab代码拉取配置"><a href="#gitlab代码拉取配置" class="headerlink" title="gitlab代码拉取配置"></a>gitlab代码拉取配置</h4><p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593075355/image-20200625150200456_ibmnp0.png" alt="image-20200625150200456"></p>
<h4 id="构建触发器"><a href="#构建触发器" class="headerlink" title="构建触发器"></a>构建触发器</h4><p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593075357/image-20200625152101974_rctsmw.png" alt="image-20200625152101974"></p>
<blockquote>
<p>复制改处生成的webHook密码，并复制到gitee的webHooks</p>
</blockquote>
<p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593075368/image-20200625152821376_m49p4r.png" alt="image-20200625152821376"></p>
<p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593075371/image-20200625152729294_u2hh9i.png" alt="image-20200625152729294"></p>
<h4 id="Pre-Steps"><a href="#Pre-Steps" class="headerlink" title="Pre Steps"></a>Pre Steps</h4><p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593075364/image-20200625152953593_b1agcc.png" alt="image-20200625152953593"></p>
<h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h4><p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593075362/image-20200625153030506_ci3zp1.png" alt="img"></p>
<h4 id="配置发布服务器SSH"><a href="#配置发布服务器SSH" class="headerlink" title="配置发布服务器SSH"></a>配置发布服务器SSH</h4><blockquote>
<p>【系统管理】-&gt;【系统配置】-&gt;【Publish over SSH】</p>
</blockquote>
<p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593075368/image-20200625155411205_mykrlf.png" alt="img"></p>
<h4 id="编译成功后将jar包上传到发布服务器"><a href="#编译成功后将jar包上传到发布服务器" class="headerlink" title="编译成功后将jar包上传到发布服务器"></a>编译成功后将jar包上传到发布服务器</h4><blockquote>
<p>将 【Source files】的jar包上传到远程的【Remote directory】目录，然后执行发布服务器的【Exec command】脚本</p>
</blockquote>
<p><img src="https://res.cloudinary.com/djy7jydp5/image/upload/v1593075365/image-20200625153359258_vl9mhc.png" alt="image-20200625153359258"></p>
<blockquote>
<p>server-start.sh 重启服务脚本</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从eureka 下线该服务</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"下线服务"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"下线服务完成"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止对应容器</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"停止对应容器"</span></span><br><span class="line">docker stop -t=60 cservice-sms-server-1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除对应服务容器和镜像</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"删除sms服务"</span></span><br><span class="line">docker rm cservice-sms-server-1</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"删除sms镜像"</span></span><br><span class="line">docker rmi sms-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># build 容器</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"正在build服务"</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/cservice/cservice-server/sms</span><br><span class="line">docker build -t sms-server .</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"容器build成功"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动该服务的docker容器</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"正在启动服务..."</span></span><br><span class="line"><span class="comment">#docker run -it -d -p 8231:8231 --net=host --name=cservice-sms-server-1 sms-server</span></span><br><span class="line">docker run -it -d -p 8231:8231 --name=cservice-sms-server-1 sms-server</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"服务已启动"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>环境配置</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>nexus</tag>
        <tag>jenkins</tag>
        <tag>gitlab</tag>
      </tags>
  </entry>
  <entry>
    <title>C4Model</title>
    <url>/2020/06/23/C4Model/</url>
    <content><![CDATA[<blockquote>
<p>虽然C4Model主要是针对软件架构师和软件开发人员的，但它为开发团队提供了一种高效沟通软件结构的方法。该方法进行了不同级别的详细说明。</p>
</blockquote>
<h2 id="抽象概念"><a href="#抽象概念" class="headerlink" title="抽象概念"></a>抽象概念</h2><blockquote>
<p>C4Model分为以下几个部分:</p>
<ul>
<li>系统上下文Context</li>
<li>容器Containers</li>
<li>组件Components</li>
<li>代码Code</li>
</ul>
</blockquote>
<h3 id="Person"><a href="#Person" class="headerlink" title="Person"></a>Person</h3><blockquote>
<p>一个人代表人类是你的系统的使用者之一（也可能是参与者、角色等）</p>
</blockquote>
<p><img src="https://c4model.com/img/notation-person.png" alt="Person"></p>
<h3 id="Software-System"><a href="#Software-System" class="headerlink" title="Software System"></a>Software System</h3><blockquote>
<p>软件系统是最高级别的抽象，它描述了一些可以为用户带来价值的东西 </p>
</blockquote>
<p><img src="https://c4model.com/img/notation-software-system.png" alt="Software System"></p>
<h3 id="Container"><a href="#Container" class="headerlink" title="Container"></a>Container</h3><blockquote>
<p>这儿的容器不是指docker. 在C4Model中，容器代表应用程序或数据存储。为了整个软件系统正常工作，必须运行一个容器，而则会个容器是web应用程序、客户端网络应用程序、客户端桌面应用程序、微服务、无服务功能、服务器端控制的应用程序、文件系统、shell脚本 容器本身是一个上下文或边界，在其中执行代码或存储数据，每个容器都是一个可单独部署/运行的运行时环境</p>
</blockquote>
<p><img src="https://c4model.com/img/notation-container.png" alt="Container"></p>
<h3 id="Components"><a href="#Components" class="headerlink" title="Components"></a>Components</h3><blockquote>
<p>组件时封装在定义良好的接口后面的一组相关功能 </p>
</blockquote>
<p><img src="https://c4model.com/img/notation-component.png" alt="Components"></p>
<h2 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h2><blockquote>
<p>【范围】: 单个软件系统 </p>
<p>【主要元素】: 软件系统内的 </p>
<p>【支持元素】: 在范围内直接连接到系统的人员和系统软件 </p>
<p>【目标受众】: 技术团队内部人员和外部人员、包括技术人员和非技术人员</p>
</blockquote>
<p><img src="https://c4model.com/img/bigbankplc-SystemContext.png" alt="Context"></p>
<h2 id="Containers"><a href="#Containers" class="headerlink" title="Containers"></a>Containers</h2><blockquote>
<p>容器图显示了软件体系结构的高层架构以及如何其间的分配职责</p>
</blockquote>
<blockquote>
<p>【范围】: 单个软件系统 </p>
<p>【主要元素】: 软件系统范围内的容器 </p>
<p>【支持元素】: 在范围内直接连接到系统的人员和系统软件 </p>
<p>【目标受众】: 技术团队内部人员和外部技术人员；包括架构师、开发人员、运营/技术支持人员</p>
</blockquote>
<p><img src="https://c4model.com/img/bigbankplc-Containers.png" alt="Containers"></p>
<h2 id="Components-1"><a href="#Components-1" class="headerlink" title="Components"></a>Components</h2><blockquote>
<p>【范围】: 单个容器 </p>
<p>【主要元素】: Container范围内的组件</p>
<p>【支持元素】: 容易、直接连接到组件的人员和软件系统 </p>
<p>【目标受众】: 软件架构师和开发人员</p>
</blockquote>
<p><img src="https://c4model.com/img/bigbankplc-Components.png" alt="Components"></p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><blockquote>
<p>【范围】: 单个组件 </p>
<p>【主要元素】: Components范围内的代码元素(例如类、接口、对象、方法、DB表等等) </p>
<p>【支持元素】: 容易、直接连接到组件的人员和软件系统 </p>
<p>【目标受众】: 软件架构师和开发人员</p>
</blockquote>
<p><img src="https://c4model.com/img/bigbankplc-Classes.png" alt="Code"></p>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="C4Model官网"><a href="#C4Model官网" class="headerlink" title="C4Model官网"></a><a href="https://c4model.com/" target="_blank" rel="noopener">C4Model官网</a></h3><h3 id="中文翻译"><a href="#中文翻译" class="headerlink" title="中文翻译"></a><a href="https://www.infoq.cn/article/C4-architecture-model/" target="_blank" rel="noopener">中文翻译</a></h3>]]></content>
      <categories>
        <category>架构</category>
      </categories>
      <tags>
        <tag>UML建模</tag>
        <tag>c4model</tag>
      </tags>
  </entry>
  <entry>
    <title>UML建模基础</title>
    <url>/2020/06/23/UML%E5%BB%BA%E6%A8%A1%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<blockquote>
<p>UML是一种可视化、文档化的语言，UML为所有软件开发人员提供了一种图形化表达、标准化的建模语言</p>
</blockquote>
<h2 id="时序图（Sequence）"><a href="#时序图（Sequence）" class="headerlink" title="时序图（Sequence）"></a>时序图（Sequence）</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote>
<p>是一种UML交互图。它通过描述对象之间发送消息的时间顺序显示多个对象（类、组件、子系统、参与者）之间的动态协作</p>
</blockquote>
<h3 id="元素"><a href="#元素" class="headerlink" title="元素"></a>元素</h3><blockquote>
<ul>
<li>角色(Actor)</li>
<li>对象(Object)</li>
<li>生命线(LifeLine)</li>
<li>控制焦点(Activation)</li>
<li>消息(Message)</li>
<li>自关联消息</li>
<li>组合片段</li>
</ul>
</blockquote>
<h4 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h4><blockquote>
<p>系统角色。 可以是人、其他系统、 子系统。 <strong>用小人图标表示</strong></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@startuml</span><br><span class="line">actor Role</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure>

<h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><blockquote>
<p>对象位于时序图的顶部，<strong>用一个矩形表示</strong></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@startuml</span><br><span class="line">Object1 -&gt; Object2</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure>

<h4 id="生命线"><a href="#生命线" class="headerlink" title="生命线"></a>生命线</h4><blockquote>
<p>时序图中每个对象和底部中心的一条<strong>垂直的虚线</strong>。 <strong>用一条虚线表示</strong></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@startuml</span><br><span class="line">Object1 -&gt; Object2</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure>

<h4 id="控制焦点"><a href="#控制焦点" class="headerlink" title="控制焦点"></a>控制焦点</h4><blockquote>
<p>时序图中，在对象生命线上某段时间执行的操作。 <strong>用一个很窄的矩形表示</strong></p>
</blockquote>
<h4 id="消息"><a href="#消息" class="headerlink" title="消息"></a>消息</h4><blockquote>
<p>代表对象之间发送的消息。消息分为三类：</p>
<ol>
<li><em>同步消息</em> ： 消息的发送者把消息传递给消息的接收者，然后停止活动，等待消息的接收者放弃或者返回控制；<strong>用来表示同步的意思。 用一条实线和实心箭头表示</strong></li>
<li><em>异步消息</em> : 消息的发送者把消的传递给消息的接收者，然后继续自己的活动，不等待。 <strong>用一条实线和大于号表示</strong></li>
<li><em>返回消息</em> : 表示从过程调用返回。 <strong>用小于号和虚线表示</strong></li>
</ol>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@startuml</span><br><span class="line">A -&gt; B: 同步消息</span><br><span class="line"></span><br><span class="line">C -\ D: 异步消息</span><br><span class="line"></span><br><span class="line">E --&gt;&gt; F: 返回消息</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure>

<h4 id="自关联消息"><a href="#自关联消息" class="headerlink" title="自关联消息"></a>自关联消息</h4><blockquote>
<p>表示方法的自身调用或者一个对象内的一个方法调用另外一个方法。 <strong>用半闭形的长方形和下方实心箭头表示</strong></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@startuml</span><br><span class="line">Object1 -&gt; Object2</span><br><span class="line"></span><br><span class="line">Object2 -&gt; Object2: 自关联消息</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure>

<h4 id="组合片段"><a href="#组合片段" class="headerlink" title="组合片段"></a>组合片段</h4><blockquote>
<p>组合片段用来解决交互中的执行的条件，它的作用是在时序图中直接表示逻辑组件。 组合片段工13种</p>
</blockquote>
<table>
<thead>
<tr>
<th>片段类型</th>
<th>名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>opt</td>
<td>选项</td>
<td>表示一个可选的行为</td>
</tr>
<tr>
<td>alt</td>
<td>抉择</td>
<td>在一组行为中根据特定的条件选择某个交互；</td>
</tr>
<tr>
<td>loop</td>
<td>循环</td>
<td>说明交互片段会被重复执行</td>
</tr>
<tr>
<td>break</td>
<td>中断</td>
<td>提供了和编程语言中的break类拟的机制</td>
</tr>
<tr>
<td>par</td>
<td>并行</td>
<td>支持交互片段的并发执行</td>
</tr>
<tr>
<td>region</td>
<td></td>
<td>标志在组合片段中先于其他交互片断发生的交互</td>
</tr>
<tr>
<td>seq</td>
<td>弱顺序</td>
<td>强迫交互按照特定的顺序执行</td>
</tr>
<tr>
<td>strict</td>
<td>强顺序</td>
<td>明确定义了一组交互片段的执行顺序</td>
</tr>
<tr>
<td>consider</td>
<td>考虑</td>
<td>明确标志了应该被处理的消息</td>
</tr>
<tr>
<td>ignore</td>
<td>忽略</td>
<td>明确定义了交互片段不应该响应的消息</td>
</tr>
<tr>
<td>assert</td>
<td>断言</td>
<td>标志了在交互片段中作为事件唯一的合法继续者的操作数</td>
</tr>
<tr>
<td>neg</td>
<td>否定</td>
<td>用来标志不应该发生的交互</td>
</tr>
<tr>
<td>ref</td>
<td></td>
<td>引用其他地方定义的组合片段</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@startuml</span><br><span class="line">Object1 -&gt; Object2</span><br><span class="line"></span><br><span class="line">alt successful case</span><br><span class="line"></span><br><span class="line">  Object2 -&gt; Object1: 成功</span><br><span class="line">    </span><br><span class="line">else some kind of failure</span><br><span class="line"></span><br><span class="line">  Object2 -&gt; Object1: 失败</span><br><span class="line">   </span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure>



<h2 id="用例图（Use-Case）"><a href="#用例图（Use-Case）" class="headerlink" title="用例图（Use Case）"></a>用例图（Use Case）</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><blockquote>
<p>用例图主要是用来描述角色与角色、角色与用例之间的连接关系的。 表明<strong>谁要使用系统，及使用该系统可以做些什么</strong></p>
</blockquote>
<h3 id="元素-1"><a href="#元素-1" class="headerlink" title="元素"></a>元素</h3><blockquote>
<ul>
<li>参与者(Actor)</li>
<li>用例(Use Case)</li>
<li>子系统(SubSystem)</li>
</ul>
</blockquote>
<h4 id="参与者"><a href="#参与者" class="headerlink" title="参与者"></a>参与者</h4><blockquote>
<p>与应用程序或者系统进行交互的用户、组织、外部系统。 <strong>用一个小人表示</strong></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@startuml</span><br><span class="line">actor 参与者</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure>

<h4 id="用例"><a href="#用例" class="headerlink" title="用例"></a>用例</h4><blockquote>
<p>用例就是外部可见的系统功能，对系统提供的服务进行描述。 <strong>用椭圆表示</strong></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@startuml</span><br><span class="line">(这是个用例)</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure>

<h4 id="子系统"><a href="#子系统" class="headerlink" title="子系统"></a>子系统</h4><blockquote>
<p>用来展示系统的一部分功能，这部分功能联系紧密</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@startuml</span><br><span class="line">left to right direction</span><br><span class="line"></span><br><span class="line">Actor 张三 as stu</span><br><span class="line"></span><br><span class="line">package 学校 &#123;</span><br><span class="line">	usecase 学语文 as ch</span><br><span class="line">    usecase 学数学 as math</span><br><span class="line">    usecase 学体育 as pe</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">stu --&gt; ch</span><br><span class="line">stu --&gt; math</span><br><span class="line">stu --&gt; pe</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure>

<h3 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h3><table>
<thead>
<tr>
<th>关系类型</th>
<th>符号</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>关联</td>
<td>【无箭头的实线】</td>
<td>参与者与用例之间的关系</td>
</tr>
<tr>
<td>泛化</td>
<td>【指向父用例的实线箭头】</td>
<td>参与者之间 或 用例之间 的关系</td>
</tr>
<tr>
<td>包含</td>
<td>【指向分解出来的功能用例的虚线箭头】</td>
<td>用例之间的关系</td>
</tr>
<tr>
<td>扩展</td>
<td>【指向基础用例的虚线】</td>
<td>用例之间的关系</td>
</tr>
</tbody></table>
<h4 id="关联"><a href="#关联" class="headerlink" title="关联"></a>关联</h4><blockquote>
<p>表示参与者与用例之间的通信，任何一方都可以发送或接受信息</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@startuml</span><br><span class="line">left to right direction</span><br><span class="line"></span><br><span class="line">Actor 李小龙 as stu</span><br><span class="line">stu -- (幻雨阁)</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure>

<h4 id="泛化"><a href="#泛化" class="headerlink" title="泛化"></a>泛化</h4><blockquote>
<p>就是继承关系，子用例继承父用例所有的机构、行为、关系； 子用例可以使用父用例的一段行为，也可以重载这个行为。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@startuml</span><br><span class="line">Actor &quot;徐骁&quot; as p</span><br><span class="line">Actor &quot;徐凤年&quot; as c1</span><br><span class="line">Actor &quot;徐龙象&quot; as c2</span><br><span class="line">p &lt;-- c1</span><br><span class="line">p &lt;-- c2</span><br><span class="line"></span><br><span class="line">(订票) &lt;-- (网上订票)</span><br><span class="line">(订票) &lt;-- (电话订票)</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure>

<h4 id="包含"><a href="#包含" class="headerlink" title="包含"></a>包含</h4><blockquote>
<p>包含关系用来把一个较复杂的用例所表示的功能分解成较小的步骤</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@startuml</span><br><span class="line">(订单系统) &lt;.. (增加订单): 包含关系</span><br><span class="line">(订单系统) &lt;.. (修改订单): 包含关系</span><br><span class="line">(订单系统) &lt;.. (删除订单): 包含关系</span><br><span class="line">(订单系统) &lt;.. (订单详情): 包含关系</span><br><span class="line">(订单系统) &lt;.. (订单列表): 包含关系</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure>

<h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><blockquote>
<p>扩展关系是指用例功能的延申，相当于为基础用例提供一个附加功能</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@startuml</span><br><span class="line">(mybatis-plus) ..&gt; (mybatis-plus-generator): mybatis-plus附加了代码生成程序</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure>



<h2 id="类图（Class）"><a href="#类图（Class）" class="headerlink" title="类图（Class）"></a>类图（Class）</h2><h3 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h3><blockquote>
<p>通过UML类图可以详细的描述系统中的对象和他们的关系</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class DataSourceConfig &#123;</span><br><span class="line">	- dbQuery:IDbQuery;</span><br><span class="line">	- dbType:DbType;</span><br><span class="line">	- schemaName:String;</span><br><span class="line">	- typeConvert:ITypeConvert;</span><br><span class="line">	- url:String;</span><br><span class="line">	- driverName:String</span><br><span class="line">	- username:String</span><br><span class="line">	- password:String</span><br><span class="line">	+ getDbQuery():IDbQuery</span><br><span class="line">	+ getDbType():DbType</span><br><span class="line">	- getDbType(str:String):DbType</span><br><span class="line">	+ getTypeConvert():ITypeConvert</span><br><span class="line">	+ getConn():Connection</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th><strong>Character</strong></th>
<th><strong>Icon for field</strong></th>
<th><strong>Icon for method</strong></th>
<th><strong>Visibility</strong></th>
</tr>
</thead>
<tbody><tr>
<td><code>-</code></td>
<td><img src="https://s.plantuml.com/img/private-field.png" alt="img"></td>
<td><img src="https://s.plantuml.com/img/private-method.png" alt="img"></td>
<td>private</td>
</tr>
<tr>
<td><code>#</code></td>
<td><img src="https://s.plantuml.com/img/protected-field.png" alt="img"></td>
<td><img src="https://s.plantuml.com/img/protected-method.png" alt="img"></td>
<td>protected</td>
</tr>
<tr>
<td><code>~</code></td>
<td><img src="https://s.plantuml.com/img/package-private-field.png" alt="img"></td>
<td><img src="https://s.plantuml.com/img/package-private-method.png" alt="img"></td>
<td>package private</td>
</tr>
<tr>
<td><code>+</code></td>
<td><img src="https://s.plantuml.com/img/public-field.png" alt="img"></td>
<td><img src="https://s.plantuml.com/img/public-method.png" alt="img"></td>
<td>public</td>
</tr>
</tbody></table>
<h3 id="组成-amp-属性"><a href="#组成-amp-属性" class="headerlink" title="组成 &amp; 属性"></a>组成 &amp; 属性</h3><blockquote>
<p>UML类图包括：</p>
<ul>
<li>类和对象</li>
<li>类之间的关系</li>
<li>类之间的多重性</li>
</ul>
</blockquote>
<h4 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h4><blockquote>
<p>对象是描述客观世界中某个具体的实体 类是对一类具有相同特征的对象的描述； 对象是类的实例</p>
</blockquote>
<h3 id="关系-1"><a href="#关系-1" class="headerlink" title="关系"></a>关系</h3><h4 id="泛化关系"><a href="#泛化关系" class="headerlink" title="泛化关系"></a>泛化关系</h4><blockquote>
<p>表示 类与类之间的继承关系、 接口与接口之间的继承关系、 接口对类的实现关系 。 泛化关系有三个条件：</p>
<ul>
<li>父类具有的属性、操作、关系， 子类都具有 </li>
<li>子类包含额外的信息</li>
<li>可以使用父类的地方，也能使用子类</li>
</ul>
</blockquote>
<h5 id="继承关系"><a href="#继承关系" class="headerlink" title="继承关系"></a>继承关系</h5><blockquote>
<p>继承 表示一个类继承另一个类的功能，并可以增加它自己新功能的能力 用 空心三角形+实线 表示</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@startuml</span><br><span class="line">动物 &lt;|-- 人</span><br><span class="line"></span><br><span class="line">class 动物 &#123;</span><br><span class="line">	# 种类</span><br><span class="line">    + 呼吸</span><br><span class="line">&#125;</span><br><span class="line">class 人 &#123;</span><br><span class="line">	- 名字</span><br><span class="line">    + papapa</span><br><span class="line">&#125;</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure>

<h5 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h5><blockquote>
<p>【解释】  实现 表示一个class类实现interface接口的功能 </p>
<p>【箭头】 用 空心三角形+虚线 或 实线 表示</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@startuml</span><br><span class="line">动物 &lt;|.. 人</span><br><span class="line"></span><br><span class="line">interface 动物 &#123;</span><br><span class="line">    + 呼吸</span><br><span class="line">&#125;</span><br><span class="line">class 人 &#123;</span><br><span class="line">	- 名字</span><br><span class="line">    + papapa</span><br><span class="line">&#125;</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure>

<h4 id="关联-1"><a href="#关联-1" class="headerlink" title="关联"></a>关联</h4><blockquote>
<p>【解释】 对于两个相对独立的对象，当一个对象的实例与另一个对象的一些特定实例存在固定的对应关系时，这两个对象为关联关系 </p>
<p>【表现】 成员变量 </p>
<p>【箭头】 用 实线箭头 表示</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@startuml</span><br><span class="line">老师 - 学生</span><br><span class="line">学生 - 课程</span><br><span class="line"></span><br><span class="line">class 老师 &#123;&#125;</span><br><span class="line">class 学生 &#123;&#125;</span><br><span class="line">class 课程 &#123;&#125;</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure>

<h4 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h4><blockquote>
<p>【解释】 表示一种弱的拥有关系，两个对象具有各自的生命周期 </p>
<p>【表现】 成员变量 </p>
<p>【箭头】 用 空心的菱形+实现箭头 表示</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@startuml</span><br><span class="line">汽车 o--&gt; 引擎</span><br><span class="line">汽车 o--&gt; 轮胎</span><br><span class="line"></span><br><span class="line">class 汽车 &#123;</span><br><span class="line">	- 引擎</span><br><span class="line">    - 轮胎</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class 引擎 &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">class 轮胎 &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure>

<h4 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h4><blockquote>
<p>【解释】 组合是一种强拥有关系，是严格的部分和整体的关系，部分和整体的生命周期一样 </p>
<p>【表现】 成员变量 </p>
<p>【箭头】 用 实心的菱形+实现箭头 表示</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@startuml</span><br><span class="line">公司 *--&gt; 产品部门</span><br><span class="line">公司 *--&gt; 技术部门</span><br><span class="line"></span><br><span class="line">class 公司 &#123;</span><br><span class="line">	- 产品部门</span><br><span class="line">    - 技术部门</span><br><span class="line">&#125;</span><br><span class="line">class 产品部门 &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">class 技术部门 &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure>

<h4 id="依赖关系"><a href="#依赖关系" class="headerlink" title="依赖关系"></a>依赖关系</h4><blockquote>
<p>【解释】 对于两个相对独立的对象，当一个对象负责构造另一个对象的实例，或者依赖另一个对象的服务时，这两个对象之间主要体现为依赖关系 </p>
<p>【表现】 局部变量、方法的参数或者对静态方法的调用 </p>
<p>【箭头】 用 虚线箭头 表示</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@startuml</span><br><span class="line">动物 ..&gt; 氧气</span><br><span class="line">动物 ..&gt; 水</span><br><span class="line"></span><br><span class="line">class 动物 &#123;</span><br><span class="line">	+ 活着(氧气, 水)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class 氧气 &#123;&#125;</span><br><span class="line">class 水 &#123;&#125;</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure>

<h2 id="活动图（Activity）"><a href="#活动图（Activity）" class="headerlink" title="活动图（Activity）"></a>活动图（Activity）</h2><blockquote>
<p>略</p>
</blockquote>
<h2 id="组件图（Component）"><a href="#组件图（Component）" class="headerlink" title="组件图（Component）"></a>组件图（Component）</h2><h3 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h3><blockquote>
<p>组件图是用来描述组件与组件之间关系的一种UML图；组件图在宏观层面上显示了构成系统某一个特定方面的实现结构</p>
</blockquote>
<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><blockquote>
<p>组件图可以明确系统的设计，如果按照面向对象方式设计系统和子系统的话，通常可以保证低耦合、提供可重用性</p>
</blockquote>
<h3 id="组成-amp-元素"><a href="#组成-amp-元素" class="headerlink" title="组成 &amp; 元素"></a>组成 &amp; 元素</h3><blockquote>
<ul>
<li>组件</li>
<li>接口</li>
<li>关系</li>
</ul>
</blockquote>
<h4 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h4><blockquote>
<p>组件 是系统设计的一个模块化部分，它隐藏了内部的实现，对外提供了一组接口。  它是一个封装完好的物理实现单元，具有自己的身份标识和定义明确的接口。 [images] 组件在系统中一般分为三类：部署组件、 工作产品组件、执行组件</p>
<ul>
<li>配置组件 是构成系统时必要的组件，是运行系统时需要配置的组件</li>
<li>工作产品组件 主要是开发过程的产物，是形成配置组件和可执行文件之前必要的工作产品，是部署组件的来源。工作产品组件并不直接参与到可执行系统中，而是用来产生系统的中间产品</li>
<li>执行组件 是可运行的系统最终运行产生的运行结果</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@startuml</span><br><span class="line">[First component]</span><br><span class="line">[Another component] as Comp2</span><br><span class="line">component Comp3</span><br><span class="line">component [Last\ncomponent] as Comp4</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure>

<h4 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h4><blockquote>
<p>对于一个组件而言，它有两类接口：提供接口、 需求接口</p>
<ul>
<li>提供接口 是组件为其他组件提供服务的操作的集合</li>
<li>需求接口 是组件向其他组件请求响应服务时要遵循的接口</li>
</ul>
</blockquote>
<h4 id="关系-2"><a href="#关系-2" class="headerlink" title="关系"></a>关系</h4><h5 id="依赖关系-1"><a href="#依赖关系-1" class="headerlink" title="依赖关系"></a>依赖关系</h5><blockquote>
<ul>
<li>组件与需求接口之间建立依赖关系</li>
<li>组件与组件之间建立依赖关系：说明在运行过程中A在某些行为上依靠组件B来支持</li>
</ul>
</blockquote>
<h5 id="实现关系"><a href="#实现关系" class="headerlink" title="实现关系"></a>实现关系</h5><blockquote>
<p>组件与提供接口之间建立实现关系</p>
</blockquote>
<h2 id="状态图（State）"><a href="#状态图（State）" class="headerlink" title="状态图（State）"></a>状态图（State）</h2><blockquote>
<p>状态图 是描述一个对象的所有状态和状态之间的转换的UML图</p>
</blockquote>
<h3 id="状态机"><a href="#状态机" class="headerlink" title="状态机"></a>状态机</h3><blockquote>
<p>了解状态图前先了解状态机，状态机是展示状态与状态转换的图</p>
</blockquote>
<h4 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h4><blockquote>
<p>一个模型在其生存期内的状况，如满足某些条件、执行某些操作或等待某些事件</p>
</blockquote>
<h4 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h4><blockquote>
<p>两个不同状态之间的联系，事件可以触发状态之间的转换</p>
</blockquote>
<h4 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h4><blockquote>
<p>在某个时间产生的，可以触发状态转换的部分，如信号、对象的创建和销毁、超时和条件的改变</p>
</blockquote>
<h4 id="动作"><a href="#动作" class="headerlink" title="动作"></a>动作</h4><blockquote>
<p>是在状态机中进行的一个非原子的执行，由一系列动作组成</p>
</blockquote>
<h4 id="活动"><a href="#活动" class="headerlink" title="活动"></a>活动</h4><blockquote>
<p>是一个可执行的原子计算，它导致状态的变更或返回一个值</p>
</blockquote>
<h3 id="状态图的状态"><a href="#状态图的状态" class="headerlink" title="状态图的状态"></a>状态图的状态</h3><blockquote>
<p>状态 描述了状态机所在对象动态行为的运行所产生的结果。 在图形上，用一个圆角矩形表示一个状态。 一个完整的状态有5个组成部分：</p>
<ul>
<li>名字： 由一个字符串构成，用以标识不同的状态。状态可以时没有名字的 </li>
<li>入口/出口动作： 进入/退出这个状态所执行的动作</li>
<li>内部转换： 是不会引起状态变化的转换</li>
<li>延迟事件： 该状态下暂不处理，但将推迟到该对象的另一个状态下事件的处理队列</li>
<li>子状态： 顺序子状态/并发子状态</li>
</ul>
</blockquote>
<h3 id="状态图的转换"><a href="#状态图的转换" class="headerlink" title="状态图的转换"></a>状态图的转换</h3><blockquote>
<p>转换 是状态间的关联。 当某实体在第一个状态中运行一定的动作，并在某个特定事情发生且某特定条件满足时进入下一状态，转换也有5部分：</p>
<ul>
<li>源状态： 在转换被激活之前，对象所处的状态就是转换的源状态</li>
<li>目标状态： 转换完成后，对象状态发生了变化，这时对象所处的状态就是转换的目标状态</li>
<li>触发事件： 引起转变的事件</li>
<li>监护条件： 被放在触发事件的后面，可以引用对象的属性值和触发事件的参数</li>
<li>动作： 操作调用</li>
</ul>
</blockquote>
<h2 id="对象图（Object）"><a href="#对象图（Object）" class="headerlink" title="对象图（Object）"></a>对象图（Object）</h2><blockquote>
<p>略</p>
</blockquote>
<h2 id="部署图（Deployment）"><a href="#部署图（Deployment）" class="headerlink" title="部署图（Deployment）"></a>部署图（Deployment）</h2><h3 id="简介-4"><a href="#简介-4" class="headerlink" title="简介"></a>简介</h3><blockquote>
<p>部署图 表达了在实际应用中软件和它的运行环境的关系，并且描述了软件部署在硬件上的具体方式</p>
</blockquote>
<h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><blockquote>
<p>节点、部署图中的关系</p>
</blockquote>
<h4 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h4><blockquote>
<p>节点是运行时的物理对象，代表一个计算资源</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@startuml</span><br><span class="line"></span><br><span class="line">node node1</span><br><span class="line">node node2</span><br><span class="line">node node3</span><br><span class="line">node node4</span><br><span class="line">node node5</span><br><span class="line">node1 -- node2</span><br><span class="line">node1 .. node3</span><br><span class="line">node1 ~~ node4</span><br><span class="line">node1 &#x3D;&#x3D; node5</span><br><span class="line"></span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure>

<h4 id="部署图中的关系"><a href="#部署图中的关系" class="headerlink" title="部署图中的关系"></a>部署图中的关系</h4><blockquote>
<p>部署图的节点之间使用关联关系来表示节点之间的通信路径，称为连接 一般对关联关系不进行命名，使用构造型来区分不同类型的通信路径或通信的实现方式，例如&lt;<Ethernet>&gt;、&lt;&lt;TCP/IP&gt;&gt;、&lt;<HTTP>&gt;等能表示通信协议或网络类型的内容</p>
</blockquote>
]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>UML建模</tag>
        <tag>时序图</tag>
        <tag>类图</tag>
        <tag>用例图</tag>
        <tag>状态图</tag>
      </tags>
  </entry>
  <entry>
    <title>源码阅读方法论</title>
    <url>/2020/06/12/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E6%96%B9%E6%B3%95%E8%AE%BA/</url>
    <content><![CDATA[<h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><blockquote>
<p>在阅读源码之前，明确一下目的，这样有助于控制时间。</p>
</blockquote>
<blockquote>
<p>对于阅读目的，可分为：</p>
<ul>
<li>学习编程思想</li>
<li>解决编程中遇到的问题</li>
<li>私有化开源代码</li>
</ul>
</blockquote>
<h2 id="浏览"><a href="#浏览" class="headerlink" title="浏览"></a>浏览</h2><blockquote>
<p><strong>读注解，略实现，明目的 -&gt; 画架构</strong></p>
</blockquote>
<blockquote>
<p>读注解 是通过阅读源码的官方文档、源码中的注解、Isuue、以及别人对改源码的整体分析，对每个模块主要是干什么的有个大概了解。</p>
<p>但对于很大的开源项目，像spring系列的官方文档、使用文档太多，逐一阅读会很花费时间，所以需要把文档和代码调试结合到一起，提升阅读效率。</p>
<p>在读的过程中，不要深究具体实现，只需知道每块是做什么的，也就是设计这个模块的目的。通过粗略浏览画出改源码对应的架构草图。</p>
</blockquote>
<h2 id="精读"><a href="#精读" class="headerlink" title="精读"></a>精读</h2><blockquote>
<p><strong>分部分，底向上，深实现</strong></p>
</blockquote>
<blockquote>
<p>精读 的时候，根据架构草图把系统划分为各个小部分。然后逐一自底（<strong>数据结构</strong>）向上的阅读各个小部分，弄明白这部分具体是怎么做的，为什么要这么做，有更好的实现方式吗等问题。</p>
</blockquote>
<h3 id="核心API"><a href="#核心API" class="headerlink" title="核心API"></a>核心API</h3><blockquote>
<p>在精读时，找到各个小部分的核心API，使用UML中的类图建立静态结构，分析出类与类之间的关系（继承、组合、实现、依赖、关联等），可按照以下方式进行：</p>
</blockquote>
<h3 id="IDE调试"><a href="#IDE调试" class="headerlink" title="IDE调试"></a>IDE调试</h3><blockquote>
<p>通过IDE的debug功能，改变函数功能、参数、运行环境等，追溯到内存堆栈、函数执行顺序等。</p>
</blockquote>
<h3 id="Google"><a href="#Google" class="headerlink" title="Google"></a>Google</h3><blockquote>
<p>遇到问题后，在思考无果的情况下，Google查一下相关答案。</p>
</blockquote>
<h2 id="复盘"><a href="#复盘" class="headerlink" title="复盘"></a>复盘</h2><blockquote>
<p><strong>修架构，做复盘，放共用</strong></p>
</blockquote>
<blockquote>
<p>完善架构草图，将草图中空的、模糊的、错误的重新修改完善。</p>
<p>通过做复盘整理文档，强迫自己对不清楚的知识点加深理解；文档应该包括UML图、核心类的实现、代码设计技巧，但在形成文档时，只应该阐述核心几点，否则内容过多会导致内容混乱。</p>
<p>最后，可以将该源码中高效、可复用的代码记录放到自己的代码库中。</p>
</blockquote>
]]></content>
      <categories>
        <category>方法论</category>
      </categories>
      <tags>
        <tag>源码</tag>
        <tag>java源码分析</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux文件处理三剑客</title>
    <url>/2020/05/12/Linux%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86%E4%B8%89%E5%89%91%E5%AE%A2/</url>
    <content><![CDATA[<h2 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h2><blockquote>
<p>文本编辑工具。</p>
</blockquote>
<blockquote>
<p>sed 是非交互式的流编辑器(stream editor)。1973-1974年开发。</p>
</blockquote>
<h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><blockquote>
<p>在对文件进行一些编译/查询等操作时，sed的效率比vi/vim、cat、more、less高很多。</p>
</blockquote>
<blockquote>
<p>sed一次读取一行，而vi/vim、cat、more是将文件一次性都加载到内存(磁盘、内存读取速度)，所以sed读取超大文件时不会卡。</p>
</blockquote>
<h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><blockquote>
<p>sed 内部实现了一种编程语言、其中包含了大约25个指定文本操作的命令。sed的变量只有两个，叫作 <strong>模式空间</strong> 和 <strong>保持空间</strong>。sed具有类似GOTO的分支功能。</p>
<p>虽然sed极简单，但是sed是图灵完备的(具有无限存储能力的通用物理机器或编程语言)。所以用sed脚本可以写出比较复杂的游戏。</p>
</blockquote>
<blockquote>
<p><strong>模式空间：</strong>读取文件时存放内容的缓冲区，sed命令可以操作该区域的内容。</p>
<p><strong>保持空间：</strong>sed的另外一个缓冲区，只有少数几个sed命令才能操作该区域内容。</p>
</blockquote>
<blockquote>
<p>工作流程：</p>
<ol>
<li>sed从文件(&lt;&lt;) 或 输入流(|)中读取一行文本到一个叫做 <strong>模式空间</strong> 的内部缓冲区。</li>
<li>对 <strong>模式空间</strong> 中需要处理的内容执行sed命令（只处理文件副本，不处理原文件）。</li>
<li>将 <strong>模式空间</strong> 中的内容输出到屏幕或文件中。</li>
<li>循环对文件或输入流中的每一行执行以上三步。</li>
</ol>
</blockquote>
<h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sed [OPTIONS] &#39;COMMAND&#39; files</span><br><span class="line">sed [OPTIONS] -f SCRIPTFILE files</span><br></pre></td></tr></table></figure>

<h4 id="常见命令选项"><a href="#常见命令选项" class="headerlink" title="常见命令选项"></a>常见命令选项</h4><blockquote>
<p>-n    屏蔽默认输出；在默认情况下，sed会将所有STDIN的行列到屏幕上，-n参数会将经过sed处理过的行才列出来</p>
</blockquote>
<blockquote>
<p>-i    直接修改读取文本内容，而不是输出到屏幕上</p>
</blockquote>
<blockquote>
<p>-f    使用sed脚本；将sed动作写到文件sfile.txt中，执行时使用 -f sfile.txt</p>
</blockquote>
<blockquote>
<p>-e    可以指定多个处理动作</p>
</blockquote>
<blockquote>
<p>-r    启动扩展正则表达式，如果和其他选项一起使用，则把r放在最前面</p>
</blockquote>
<blockquote>
<p>-{}    可以组合多个命令，用分号分隔</p>
</blockquote>
<h4 id="常见处理动作"><a href="#常见处理动作" class="headerlink" title="常见处理动作"></a>常见处理动作</h4><blockquote>
<p>p    打印行，一般会和-n配合使用；例如：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4,6p  &#x2F;&#x2F;输出4，5，6行</span><br><span class="line">4p,6p &#x2F;&#x2F;输出4，6行</span><br></pre></td></tr></table></figure>

<blockquote>
<p>d    删除行；例如：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4,6d  &#x2F;&#x2F;删除4，5，6行</span><br></pre></td></tr></table></figure>

<blockquote>
<p>s    字符串替换；例如：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">s&#x2F;old&#x2F;new &#x2F;&#x2F;将每行的第一个old替换成new</span><br><span class="line">s&#x2F;old&#x2F;new&#x2F;3   &#x2F;&#x2F;将每行的第三个old替换成new</span><br><span class="line">s&#x2F;old&#x2F;new&#x2F;g   &#x2F;&#x2F;将全部的old替换成new</span><br></pre></td></tr></table></figure>

<h4 id="常见文本块处理"><a href="#常见文本块处理" class="headerlink" title="常见文本块处理"></a>常见文本块处理</h4><blockquote>
<p>i    行前插入文本</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2iAA  &#x2F;&#x2F;在第2行前面插入文本行AA</span><br><span class="line">2,4iAA  &#x2F;&#x2F;在第2，3，4行每行前面插入文本行AA</span><br></pre></td></tr></table></figure>

<blockquote>
<p>a    行后插入文本</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2aAA  &#x2F;&#x2F;在第2行后面插入文本行AA</span><br><span class="line">2,4aAA  &#x2F;&#x2F;在第2，3，4行每行后面插入文本行AA</span><br></pre></td></tr></table></figure>

<blockquote>
<p>c    替换当前行</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2cAA  &#x2F;&#x2F;把第2行内容替换成AA</span><br></pre></td></tr></table></figure>

<h4 id="常见导入操作"><a href="#常见导入操作" class="headerlink" title="常见导入操作"></a>常见导入操作</h4><blockquote>
<p>r    读取文本</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2r a.txt  &#x2F;&#x2F;在第2行的下面插入a.txt文件</span><br><span class="line">2,4r a.txt  &#x2F;&#x2F;在第2，3，4行每行的下面插入a.txt文件</span><br></pre></td></tr></table></figure>

<blockquote>
<p>w    保存到文件</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2w a.txt	&#x2F;&#x2F;将第2行的内容保存为a.txt文件</span><br><span class="line">2,4w a.txt	&#x2F;&#x2F;将第2，3，4行的内容保存为a.txt文件</span><br></pre></td></tr></table></figure>

<h4 id="常见剪切复制"><a href="#常见剪切复制" class="headerlink" title="常见剪切复制"></a>常见剪切复制</h4><h5 id="概念解释"><a href="#概念解释" class="headerlink" title="概念解释"></a>概念解释</h5><blockquote>
<p>模式空间：暂存 根据地址和正则匹配的所有行 内容；可以理解为 操作区。</p>
</blockquote>
<blockquote>
<p>保持空间：暂存 一些待用户定义的 内容；可以理解为暂存区。</p>
</blockquote>
<h5 id="高级编辑命令"><a href="#高级编辑命令" class="headerlink" title="高级编辑命令"></a>高级编辑命令</h5><blockquote>
<p>h 和 H    把 <strong>模式空间</strong> 中的内容覆盖或追加到 <strong>保存空间</strong></p>
</blockquote>
<blockquote>
<p>g 和 G    从 <strong>保持空间</strong> 取出数据覆盖或追加到 <strong>模式空间</strong></p>
</blockquote>
<blockquote>
<p>x     把 <strong>保持空间</strong> 和 <strong>模式空间</strong> 中的内容互换</p>
</blockquote>
<blockquote>
<p>n 和 N    读取匹配行的下一行，覆盖或追加到 <strong>模式空间</strong></p>
</blockquote>
<blockquote>
<p><strong>注：高级编辑命令分为大小和小写，大写表示追加、小写表示覆盖</strong></p>
</blockquote>
<h3 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h3><h4 id="s"><a href="#s" class="headerlink" title="s"></a>s</h4><h5 id="字符串替换"><a href="#字符串替换" class="headerlink" title="字符串替换"></a>字符串替换</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed <span class="string">'s/old/new/'</span> find.txt	//将每行的第一个old替换成new</span><br><span class="line">sed <span class="string">'s/old/new/3'</span> find.txt	//将每行的第三个old替换成new</span><br><span class="line">sed <span class="string">'s/old/new/g'</span> find.txt	//将所有的old都替换成new</span><br></pre></td></tr></table></figure>

<h5 id="替换某字符到结尾"><a href="#替换某字符到结尾" class="headerlink" title="替换某字符到结尾"></a>替换某字符到结尾</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed <span class="string">'s/:.*//'</span> source.txt &gt; output.txt	//把 从:开始到结尾 的字符串删除（或替换为空）</span><br></pre></td></tr></table></figure>

<h5 id="删除每行的第一个字符"><a href="#删除每行的第一个字符" class="headerlink" title="删除每行的第一个字符"></a>删除每行的第一个字符</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed <span class="string">'s/^.//'</span> find.txt	//.匹配任意单个字符，^指定匹配每一行的开头</span><br></pre></td></tr></table></figure>

<h5 id="删除每行的最后一个字符"><a href="#删除每行的最后一个字符" class="headerlink" title="删除每行的最后一个字符"></a>删除每行的最后一个字符</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed <span class="string">'s/.$//'</span> find.txt	//$匹配每一行字符串的结尾</span><br></pre></td></tr></table></figure>

<h5 id="同时移除每一行的第一个字符和最后一个字符"><a href="#同时移除每一行的第一个字符和最后一个字符" class="headerlink" title="同时移除每一行的第一个字符和最后一个字符"></a>同时移除每一行的第一个字符和最后一个字符</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed <span class="string">'s/^.//;s/.$//'</span> find.txt	//sed中的每个指令可以通过<span class="string">';'</span>分割</span><br></pre></td></tr></table></figure>

<h5 id="移除每行的匹配到的特定字符，没有匹配则不做处理"><a href="#移除每行的匹配到的特定字符，没有匹配则不做处理" class="headerlink" title="移除每行的匹配到的特定字符，没有匹配则不做处理"></a>移除每行的匹配到的特定字符，没有匹配则不做处理</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed <span class="string">'s/^F//'</span> find.txt</span><br></pre></td></tr></table></figure>

<h5 id="移除每行匹配到的特定字符，没有匹配则不做处理"><a href="#移除每行匹配到的特定字符，没有匹配则不做处理" class="headerlink" title="移除每行匹配到的特定字符，没有匹配则不做处理"></a>移除每行匹配到的特定字符，没有匹配则不做处理</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed <span class="string">'s/F$//'</span> find.txt</span><br></pre></td></tr></table></figure>

<h5 id="删除每行的第一到第三个字符"><a href="#删除每行的第一到第三个字符" class="headerlink" title="删除每行的第一到第三个字符"></a>删除每行的第一到第三个字符</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed <span class="string">'s/...//'</span> find.txt</span><br></pre></td></tr></table></figure>

<h5 id="删除每行的第一到第n个字符"><a href="#删除每行的第一到第n个字符" class="headerlink" title="删除每行的第一到第n个字符"></a>删除每行的第一到第n个字符</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed <span class="string">'s/.&#123;n&#125;//'</span> find.txt		// .&#123;n&#125; 匹配n次一个任意值</span><br></pre></td></tr></table></figure>

<h5 id="删除每行的最后n个字符"><a href="#删除每行的最后n个字符" class="headerlink" title="删除每行的最后n个字符"></a>删除每行的最后n个字符</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed <span class="string">'s/.&#123;3&#125;$//'</span> find.txt</span><br></pre></td></tr></table></figure>

<h5 id="除了每行的第一到第n个字符外，剩下的都要删除"><a href="#除了每行的第一到第n个字符外，剩下的都要删除" class="headerlink" title="除了每行的第一到第n个字符外，剩下的都要删除"></a>除了每行的第一到第n个字符外，剩下的都要删除</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed <span class="string">'s/(.&#123;n&#125;).*/\1/'</span> find.txt	//.&#123;n&#125;按顺序匹配n个字符；()表示分组；.*表示任意多个字符；\1表示第一个分组</span><br></pre></td></tr></table></figure>

<h5 id="删除每行所有字符且保留结尾的n个字符"><a href="#删除每行所有字符且保留结尾的n个字符" class="headerlink" title="删除每行所有字符且保留结尾的n个字符"></a>删除每行所有字符且保留结尾的n个字符</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed <span class="string">'s/.*(.&#123;n&#125;)/\1/'</span> find.txt</span><br></pre></td></tr></table></figure>

<h5 id="删除每行中出现的所有数字"><a href="#删除每行中出现的所有数字" class="headerlink" title="删除每行中出现的所有数字"></a>删除每行中出现的所有数字</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed <span class="string">'s/[0-9]//g'</span> find.txt		//[]指定需要匹配的多个字符</span><br></pre></td></tr></table></figure>

<h5 id="删除文件中行首-末空格"><a href="#删除文件中行首-末空格" class="headerlink" title="删除文件中行首/末空格"></a>删除文件中行首/末空格</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed <span class="string">'s/^[ \t]*//'</span> find.txt</span><br><span class="line">sed <span class="string">'s/[ \t]*$//g'</span> find.txt</span><br></pre></td></tr></table></figure>

<h4 id="d"><a href="#d" class="headerlink" title="d"></a>d</h4><h5 id="删除第一行"><a href="#删除第一行" class="headerlink" title="删除第一行"></a>删除第一行</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed <span class="string">'1d'</span> find.txt</span><br></pre></td></tr></table></figure>

<h5 id="删除最后一行"><a href="#删除最后一行" class="headerlink" title="删除最后一行"></a>删除最后一行</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed <span class="string">'$d'</span> find.txt</span><br></pre></td></tr></table></figure>

<h5 id="删除第n行到最后一行"><a href="#删除第n行到最后一行" class="headerlink" title="删除第n行到最后一行"></a>删除第n行到最后一行</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed <span class="string">'n,$d'</span> find.txt</span><br></pre></td></tr></table></figure>

<h4 id="n-amp-p"><a href="#n-amp-p" class="headerlink" title="n &amp; p"></a>n &amp; p</h4><h5 id="显示第n行"><a href="#显示第n行" class="headerlink" title="显示第n行"></a>显示第n行</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed -n <span class="string">'np'</span> find.txt</span><br></pre></td></tr></table></figure>

<h5 id="查询关键词test所在的所有行"><a href="#查询关键词test所在的所有行" class="headerlink" title="查询关键词test所在的所有行"></a>查询关键词test所在的所有行</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed -n <span class="string">'/test/p'</span> find.txt</span><br></pre></td></tr></table></figure>

<h5 id="增加指定-一行或多行-增加-一行或多行"><a href="#增加指定-一行或多行-增加-一行或多行" class="headerlink" title="增加指定 一行或多行 增加 一行或多行"></a>增加指定 一行或多行 增加 一行或多行</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed <span class="string">'n,$a addRow'</span> find.txt	//在第n行到最后一行增加addRow</span><br><span class="line">sed <span class="string">'na addRow1\naddRow2'</span> find.txt	//在第n行增加两行，使用\n换行</span><br></pre></td></tr></table></figure>

<h4 id="c"><a href="#c" class="headerlink" title="c"></a>c</h4><h5 id="代替一行或多行"><a href="#代替一行或多行" class="headerlink" title="代替一行或多行"></a>代替一行或多行</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed <span class="string">'n,$c replaceRow'</span>	find.txt	//将第n行到最后一行的内容替换成replaceRow</span><br></pre></td></tr></table></figure>

<h4 id="a"><a href="#a" class="headerlink" title="a"></a>a</h4><h5 id="在第n行后插入insert"><a href="#在第n行后插入insert" class="headerlink" title="在第n行后插入insert"></a>在第n行后插入insert</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed <span class="string">'na insert'</span> find.txt</span><br></pre></td></tr></table></figure>

<h5 id="去重"><a href="#去重" class="headerlink" title="去重"></a>去重</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sort -n find.txt | uniq</span><br></pre></td></tr></table></figure>



<h2 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h2><blockquote>
<p>文本分析工具 和 数据提取工具。</p>
</blockquote>
<h3 id="使用场景-1"><a href="#使用场景-1" class="headerlink" title="使用场景"></a>使用场景</h3><blockquote>
<p>将文本中有用的信息优雅的输出。</p>
<p>awk和sed类似，也是逐行读取文件或输入流，提取出有用的数据并进行二次处理后格式化输出。</p>
</blockquote>
<h3 id="工作原理-1"><a href="#工作原理-1" class="headerlink" title="工作原理"></a>工作原理</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">awk <span class="string">'BEGIN&#123;&#125;pattern&#123;&#125;END&#123;&#125;'</span> file.txt</span><br></pre></td></tr></table></figure>

<p><img src="https://www.runoob.com/wp-content/uploads/2018/10/20170719154838100.png" alt="img"></p>
<blockquote>
<p>工作流程：</p>
<ol>
<li>执行 BEGIN后面的内容。</li>
<li>执行BODY中的内容，从文件或输入流读取有 <strong>\n</strong> 分割的内容。</li>
<li>将内容按指定的域分隔符划分域，并填充域（域值每列中的列数据）。</li>
<li>匹配pattern部分内容，匹配到才执行 pattern 后面的 command 操作。</li>
<li>依次执行各个 pattern 匹配即其后的操作。</li>
<li>循环以 <strong>\n</strong> 分割读取文件或输入流，执行以上五步，直到全部读取完成。</li>
<li>执行END后面的内容。</li>
</ol>
</blockquote>
<h3 id="命令格式-1"><a href="#命令格式-1" class="headerlink" title="命令格式"></a>命令格式</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">awk [OPTIONS] <span class="string">'/PATTERN/&#123;ACTION&#125;'</span> files</span><br></pre></td></tr></table></figure>

<h4 id="常见命令选项-1"><a href="#常见命令选项-1" class="headerlink" title="常见命令选项"></a>常见命令选项</h4><blockquote>
<p>-F fs          fs指定输入文件折分隔符，fs是一个字符串或者一个正则表达式</p>
</blockquote>
<blockquote>
<p>-v var=value         var=value赋值一个用户定义变量</p>
</blockquote>
<blockquote>
<p>-f scripfile          scriptfile从脚本文件读取awk命令</p>
</blockquote>
<blockquote>
<p>-mf nnn         对nnn值设置内在限制，-mf选项限制分配给nnn的最大块数目；-mr选项限制记录的最大数目</p>
</blockquote>
<h4 id="模式和操作"><a href="#模式和操作" class="headerlink" title="模式和操作"></a>模式和操作</h4><blockquote>
<p>awk的模式可以是以下任意一个：</p>
<ul>
<li>/正则表达式/: 使用通配符的扩展集</li>
<li>关系表达式：使用运算进行操作，可以是字符串或者数字的比较测试</li>
<li>模式匹配表达式：用运算符<del>（匹配）和</del>！(不匹配)</li>
<li>BEGIN 语句块，pattern语句块，END语句块</li>
</ul>
</blockquote>
<blockquote>
<p>awk的操作由一个或多个命令、函数、表达式组成，之间由换行符或分号分割，并位于大括号内，主要部分是：</p>
<ul>
<li>变量或数组赋值</li>
<li>输出命令</li>
<li>内置函数</li>
<li>控制流语句</li>
</ul>
</blockquote>
<h3 id="awk支持的运算符"><a href="#awk支持的运算符" class="headerlink" title="awk支持的运算符"></a>awk支持的运算符</h3><table>
<thead>
<tr>
<th align="left">运算符</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">= += -= <em>= /= %= ^= *</em>=</td>
<td align="left">赋值</td>
</tr>
<tr>
<td align="left">?:</td>
<td align="left">C条件表达式</td>
</tr>
<tr>
<td align="left">||</td>
<td align="left">逻辑或</td>
</tr>
<tr>
<td align="left">&amp;&amp;</td>
<td align="left">逻辑与</td>
</tr>
<tr>
<td align="left">~ 和 !~</td>
<td align="left">匹配正则表达式和不匹配正则表达式</td>
</tr>
<tr>
<td align="left">&lt; &lt;= &gt; &gt;= != ==</td>
<td align="left">关系运算符</td>
</tr>
<tr>
<td align="left">空格</td>
<td align="left">连接</td>
</tr>
<tr>
<td align="left">+ -</td>
<td align="left">加，减</td>
</tr>
<tr>
<td align="left">* / %</td>
<td align="left">乘，除与求余</td>
</tr>
<tr>
<td align="left">+ - !</td>
<td align="left">一元加，减和逻辑非</td>
</tr>
<tr>
<td align="left">^ ***</td>
<td align="left">求幂</td>
</tr>
<tr>
<td align="left">++ –</td>
<td align="left">增加或减少，作为前缀或后缀</td>
</tr>
<tr>
<td align="left">$</td>
<td align="left">字段引用</td>
</tr>
<tr>
<td align="left">in</td>
<td align="left">数组成员</td>
</tr>
</tbody></table>
<h3 id="awk的内建变量"><a href="#awk的内建变量" class="headerlink" title="awk的内建变量"></a>awk的内建变量</h3><table>
<thead>
<tr>
<th align="left">变量</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">$n</td>
<td align="left">当前记录的第n个字段，字段间由FS分隔</td>
</tr>
<tr>
<td align="left">$0</td>
<td align="left">完整的输入记录</td>
</tr>
<tr>
<td align="left">ARGC</td>
<td align="left">命令行参数的数目</td>
</tr>
<tr>
<td align="left">ARGIND</td>
<td align="left">命令行中当前文件的位置(从0开始算)</td>
</tr>
<tr>
<td align="left">ARGV</td>
<td align="left">包含命令行参数的数组</td>
</tr>
<tr>
<td align="left">CONVFMT</td>
<td align="left">数字转换格式(默认值为%.6g)ENVIRON环境变量关联数组</td>
</tr>
<tr>
<td align="left">ERRNO</td>
<td align="left">最后一个系统错误的描述</td>
</tr>
<tr>
<td align="left">FIELDWIDTHS</td>
<td align="left">字段宽度列表(用空格键分隔)</td>
</tr>
<tr>
<td align="left">FILENAME</td>
<td align="left">当前文件名</td>
</tr>
<tr>
<td align="left">FNR</td>
<td align="left">各文件分别计数的行号</td>
</tr>
<tr>
<td align="left">FS</td>
<td align="left">字段分隔符(默认是任何空格)</td>
</tr>
<tr>
<td align="left">IGNORECASE</td>
<td align="left">如果为真，则进行忽略大小写的匹配</td>
</tr>
<tr>
<td align="left">NF</td>
<td align="left">一条记录的字段的数目</td>
</tr>
<tr>
<td align="left">NR</td>
<td align="left">已经读出的记录数，就是行号，从1开始</td>
</tr>
<tr>
<td align="left">OFMT</td>
<td align="left">数字的输出格式(默认值是%.6g)</td>
</tr>
<tr>
<td align="left">OFS</td>
<td align="left">输出记录分隔符（输出换行符），输出时用指定的符号代替换行符</td>
</tr>
<tr>
<td align="left">ORS</td>
<td align="left">输出记录分隔符(默认值是一个换行符)</td>
</tr>
<tr>
<td align="left">RLENGTH</td>
<td align="left">由match函数所匹配的字符串的长度</td>
</tr>
<tr>
<td align="left">RS</td>
<td align="left">记录分隔符(默认是一个换行符)</td>
</tr>
<tr>
<td align="left">RSTART</td>
<td align="left">由match函数所匹配的字符串的第一个位置</td>
</tr>
<tr>
<td align="left">SUBSEP</td>
<td align="left">数组下标分隔符(默认值是/034)</td>
</tr>
</tbody></table>
<h3 id="实际应用-1"><a href="#实际应用-1" class="headerlink" title="实际应用"></a>实际应用</h3><h4 id="输出文件的第n、第m行"><a href="#输出文件的第n、第m行" class="headerlink" title="输出文件的第n、第m行"></a>输出文件的第n、第m行</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">awk <span class="string">'&#123;print $n,$m&#125;'</span> test.txt	//每行按空格或TAB分割</span><br></pre></td></tr></table></figure>

<blockquote>
<p>awk ‘{pattern + action}’ {filename}</p>
<p>// pattern表示awk在数据中查找的内容；action是在找到匹配内容时所执行的一系列命令；{}对一系列指令进行分组，不需要始终出现</p>
</blockquote>
<h4 id="按-分割输出第n、第m行"><a href="#按-分割输出第n、第m行" class="headerlink" title="按:分割输出第n、第m行"></a>按:分割输出第n、第m行</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">awk -F: <span class="string">'&#123;print $n,$m&#125;'</span> test.txt	//-F指定分隔符</span><br></pre></td></tr></table></figure>

<h4 id="设置第二列为第一列的n倍"><a href="#设置第二列为第一列的n倍" class="headerlink" title="设置第二列为第一列的n倍"></a>设置第二列为第一列的n倍</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">awk -vm=n <span class="string">'&#123;print $1,$1*n&#125;'</span> test.txt	//-v设置变量</span><br></pre></td></tr></table></figure>

<h4 id="过滤第一列大于2并且第三列等于’test’的行"><a href="#过滤第一列大于2并且第三列等于’test’的行" class="headerlink" title="过滤第一列大于2并且第三列等于’test’的行"></a>过滤第一列大于2并且第三列等于’test’的行</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">awk <span class="string">'$1&gt;2 &amp;&amp; $3="test" &#123;print $1, $2, $3&#125;'</span> test.txt</span><br></pre></td></tr></table></figure>

<h4 id="整行中匹配test内容"><a href="#整行中匹配test内容" class="headerlink" title="整行中匹配test内容"></a>整行中匹配test内容</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat find.txt | awk <span class="string">'/test/&#123;print $1&#125;'</span></span><br></pre></td></tr></table></figure>

<h4 id="将目录下的-md文件批量修改为-txt"><a href="#将目录下的-md文件批量修改为-txt" class="headerlink" title="将目录下的.md文件批量修改为.txt"></a>将目录下的.md文件批量修改为.txt</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ls *.md | awk -F. <span class="string">'&#123;print "mv "$1"."$2" "$1".txt"&#125;'</span> | sh</span><br></pre></td></tr></table></figure>

<h4 id="查看文件的总行数"><a href="#查看文件的总行数" class="headerlink" title="查看文件的总行数"></a>查看文件的总行数</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">awk <span class="string">'END&#123;print NR&#125;'</span> find.txt</span><br></pre></td></tr></table></figure>

<h4 id="统计访问IP的次数"><a href="#统计访问IP的次数" class="headerlink" title="统计访问IP的次数"></a>统计访问IP的次数</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">awk <span class="string">'&#123;a[$1]++&#125; END&#123;for(v in a)print v,a[v]&#125;'</span> access.log</span><br></pre></td></tr></table></figure>

<h4 id="统计访问次数大于1次的IP"><a href="#统计访问次数大于1次的IP" class="headerlink" title="统计访问次数大于1次的IP"></a>统计访问次数大于1次的IP</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">awk <span class="string">'&#123;a[$1]++&#125; END&#123;for(v in a)&#123;if(a[v]&gt;1) print v,a[v]&#125;&#125;'</span> access.log</span><br></pre></td></tr></table></figure>

<h4 id="按访问次数排序取前3"><a href="#按访问次数排序取前3" class="headerlink" title="按访问次数排序取前3"></a>按访问次数排序取前3</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">awk <span class="string">'&#123;a[$1]++&#125; END&#123;for(v in a) print v,a[v] | "sort -k2 -nr | head -3"&#125;'</span> access.log</span><br></pre></td></tr></table></figure>

<h4 id="统计返回的HTTP状态码"><a href="#统计返回的HTTP状态码" class="headerlink" title="统计返回的HTTP状态码"></a>统计返回的HTTP状态码</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">awk <span class="string">'&#123;a[$1" "$9]++&#125; END&#123;for(v in a) print v&#125;'</span> access.log</span><br></pre></td></tr></table></figure>

<h4 id="统计404次数"><a href="#统计404次数" class="headerlink" title="统计404次数"></a>统计404次数</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">awk -v CNT=0 <span class="string">'&#123;if($9==404) CNT++&#125; END&#123;print $9,CNT&#125;'</span> access.log</span><br></pre></td></tr></table></figure>

<h4 id="统计占用swap内存比较多的进程ID"><a href="#统计占用swap内存比较多的进程ID" class="headerlink" title="统计占用swap内存比较多的进程ID"></a>统计占用swap内存比较多的进程ID</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># linux中的/proc/目录是linux内核提供的，在运行时访问内核内部数据结构、改变内核设置的文件系统</span></span><br><span class="line"><span class="comment"># /proc/$i/smaps 文件反应了linux运行时进程的内存情况</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $(<span class="built_in">cd</span> /proc;ls | grep <span class="string">"^[0-9]"</span> | awk <span class="string">'$0&gt;100'</span>); <span class="keyword">do</span> awk <span class="string">'/Swap:/&#123;a=a+$2&#125;END&#123;print '</span><span class="string">"<span class="variable">$i</span>"</span><span class="string">',a/1024"M"&#125;'</span> /proc/<span class="variable">$i</span>/smaps;<span class="keyword">done</span>| sort -k2nr | head</span><br></pre></td></tr></table></figure>



<h2 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h2><blockquote>
<p>文本查找工具。</p>
</blockquote>
<h3 id="工作原理-2"><a href="#工作原理-2" class="headerlink" title="工作原理"></a>工作原理</h3><blockquote>
<ol>
<li>将一行文本读取到 模式空间</li>
<li>根据指定的正则，搜索该行的文本，看是否有匹配的内容</li>
<li>如果，整行一次匹配都没有，删除并读入下一行</li>
<li>如果匹配成功，则打印改行并读入下一行</li>
</ol>
</blockquote>
<h3 id="命令格式-2"><a href="#命令格式-2" class="headerlink" title="命令格式"></a>命令格式</h3><blockquote>
<p>grep [选项] 模式 文件名</p>
</blockquote>
<h4 id="常见命令选项-2"><a href="#常见命令选项-2" class="headerlink" title="常见命令选项"></a>常见命令选项</h4><blockquote>
<p>c    仅列出文件中包含模式的行数</p>
</blockquote>
<blockquote>
<p>i    忽略模式中字母的大小写</p>
</blockquote>
<blockquote>
<p>l    列出带有匹配行的文件名</p>
</blockquote>
<blockquote>
<p>n    在每一行的最前面列出行号</p>
</blockquote>
<blockquote>
<p>v    列出没有匹配模式的行</p>
</blockquote>
<blockquote>
<p>w    把表达式当作一个完整的单字符搜索，忽略那些部分匹配的行</p>
</blockquote>
<h3 id="实际应用-2"><a href="#实际应用-2" class="headerlink" title="实际应用"></a>实际应用</h3><h4 id="找出文件中包含test的所有行"><a href="#找出文件中包含test的所有行" class="headerlink" title="找出文件中包含test的所有行"></a>找出文件中包含test的所有行</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">grep <span class="built_in">test</span> find.txt</span><br><span class="line">grep ^test2 find.txt	//找出以test2开头的行</span><br><span class="line">grep <span class="string">'[0-9]'</span> find.txt	//过滤出所有包含数字的行</span><br></pre></td></tr></table></figure>

<h4 id="只输出包含test的总行数"><a href="#只输出包含test的总行数" class="headerlink" title="只输出包含test的总行数"></a>只输出包含test的总行数</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">grep -c <span class="built_in">test</span> find.txt</span><br></pre></td></tr></table></figure>

<h4 id="去除所有空行和以’-’开头的行"><a href="#去除所有空行和以’-’开头的行" class="headerlink" title="去除所有空行和以’#’开头的行"></a>去除所有空行和以’#’开头的行</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">grep -v <span class="string">'^#'</span> /etc/crontab | grep -v <span class="string">'^$'</span></span><br></pre></td></tr></table></figure>



<h2 id="综合应用"><a href="#综合应用" class="headerlink" title="综合应用"></a>综合应用</h2><h3 id="打印乘法口诀"><a href="#打印乘法口诀" class="headerlink" title="打印乘法口诀"></a>打印乘法口诀</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">seq 9 | sed <span class="string">'H;g'</span> | awk -v RS=<span class="string">''</span> <span class="string">'&#123;for(i=1;i&lt;=NF;i++)printf("%dx%d=%d%s", i, NR, i*NR, i==NR?"\n":"\t")&#125;'</span></span><br></pre></td></tr></table></figure>

<h3 id="输出多个路径下的文件-全路径"><a href="#输出多个路径下的文件-全路径" class="headerlink" title="输出多个路径下的文件(全路径)"></a>输出多个路径下的文件(全路径)</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> -e <span class="string">"/usr/gooparts/batch/ranking/BACK\n/usr/gooparts/htdocs/common/img/BACK"</span> | awk <span class="string">'&#123;cmd="p="$1" &amp;&amp; (ls -al $p | sed s#.*[[:space:]]#$p/#)";system(cmd); &#125;'</span> | grep -v <span class="string">'\.\.$'</span> | grep -v <span class="string">'\.$'</span></span><br></pre></td></tr></table></figure>

<h3 id="删除文件中的空行"><a href="#删除文件中的空行" class="headerlink" title="删除文件中的空行"></a>删除文件中的空行</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed -i <span class="string">'/^[  ]*$/d'</span> 27155_back_dir.txt</span><br></pre></td></tr></table></figure>

<h3 id="删除以一-二-三个数字结尾，输出”-XXX-XXX”的行"><a href="#删除以一-二-三个数字结尾，输出”-XXX-XXX”的行" class="headerlink" title="删除以一/二/三个数字结尾，输出”/XXX.XXX”的行"></a>删除以一/二/三个数字结尾，输出”/XXX.XXX”的行</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat 27155_back_dir.txt | grep -v <span class="string">'.*/[0-9]$'</span> | grep -v <span class="string">'.*/[0-9][0-9]$'</span> | grep -v <span class="string">'.*/[0-9][0-9][0-9]$'</span> | grep <span class="string">'.*/.*\..*'</span></span><br></pre></td></tr></table></figure>



<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="AWK"><a href="#AWK" class="headerlink" title="AWK"></a><a href="https://man.linuxde.net/awk" target="_blank" rel="noopener">AWK</a></h3><h3 id="wiki-sed"><a href="#wiki-sed" class="headerlink" title="wiki-sed"></a><a href="https://zh.wikipedia.org/wiki/Sed" target="_blank" rel="noopener">wiki-sed</a></h3><h3 id="sed推箱子源码"><a href="#sed推箱子源码" class="headerlink" title="sed推箱子源码"></a><a href="https://github.com/aureliojargas/sokoban.sed" target="_blank" rel="noopener">sed推箱子源码</a></h3><h3 id="AWK经典应用"><a href="#AWK经典应用" class="headerlink" title="AWK经典应用"></a><a href="https://www.cnblogs.com/linuxprobe/p/11387906.html" target="_blank" rel="noopener">AWK经典应用</a></h3><h3 id="access-log"><a href="#access-log" class="headerlink" title="access.log"></a>access.log</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">123.59.146.153 - - [5&#x2F;Sep&#x2F;2017:06:10:14 +0800] &quot;USER test +iw test :Test Wuz Here&quot; 400 173 &quot;-&quot; &quot;-&quot; &quot;-&quot;</span><br><span class="line">182.138.215.168 - - [8&#x2F;Sep&#x2F;2017:13:54:26 +0800] &quot;GET http:&#x2F;&#x2F;dongtaiwang.com&#x2F; HTTP&#x2F;1.1&quot; 200 3700 &quot;-&quot; &quot;Mozilla&#x2F;5.0 (Windows NT 10.0; WOW64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;45.0.2454.101 Safari&#x2F;537.36&quot; &quot;-&quot;</span><br><span class="line">182.138.215.127 - - [11&#x2F;Sep&#x2F;2017:13:54:26 +0800] &quot;CONNECT www.voanews.com:443 HTTP&#x2F;1.1&quot; 400 173 &quot;-&quot; &quot;-&quot; &quot;-&quot;</span><br><span class="line">104.192.74.12 - - [3&#x2F;Sep&#x2F;2017:14:39:05 +0800] &quot;GET &#x2F;robots.txt HTTP&#x2F;1.1&quot; 404 3650 &quot;http:&#x2F;&#x2F;www.lishuoshuo.xyz&#x2F;robots.txt&quot; &quot;Mozilla&#x2F;5.0 (Windows NT 6.1; WOW64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;39.0.2171.95 Safari&#x2F;537.36&quot; &quot;-&quot;</span><br><span class="line">123.59.146.153 - - [21&#x2F;Sep&#x2F;2017:14:39:05 +0800] &quot;GET &#x2F;robots.txt HTTP&#x2F;1.1&quot; 404 3650 &quot;http:&#x2F;&#x2F;www.lishuoshuo.xyz&#x2F;robots.txt&quot; &quot;Mozilla&#x2F;5.0 (Windows NT 6.1; WOW64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;39.0.2171.95 Safari&#x2F;537.36&quot; &quot;-&quot;</span><br><span class="line">123.19.146.98 - - [21&#x2F;Sep&#x2F;2017:14:39:05 +0800] &quot;GET &#x2F;robots.txt HTTP&#x2F;1.1&quot; 404 3650 &quot;http:&#x2F;&#x2F;www.lishuoshuo.xyz&#x2F;robots.txt&quot; &quot;Mozilla&#x2F;5.0 (Windows NT 6.1; WOW64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;39.0.2171.95 Safari&#x2F;537.36&quot; &quot;-&quot;</span><br><span class="line">82.138.1.17 - - [325&#x2F;Sep&#x2F;2019:13:54:26 +0800] &quot;CONNECT www.voanews.com:443 HTTP&#x2F;1.1&quot; 400 173 &quot;-&quot; &quot;-&quot; &quot;-&quot;</span><br></pre></td></tr></table></figure>

<h3 id="awk项目使用"><a href="#awk项目使用" class="headerlink" title="awk项目使用"></a>awk项目使用</h3><blockquote>
<p>略</p>
</blockquote>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux文本处理</tag>
        <tag>sed</tag>
        <tag>awk</tag>
        <tag>grep</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql主从同步部署</title>
    <url>/2020/03/21/Mysql%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ol>
<li>服务器</li>
</ol>
<blockquote>
<p>4核16G Centos7.2</p>
<p>IP: 47.113.91.11</p>
<p>IP: 47.113.87.12</p>
</blockquote>
<ol>
<li>mysql二进制安装包</li>
</ol>
<blockquote>
<p>mysql-5.6.46-linux-glibc2.12-x86_64.tar.gz</p>
<p>url：<a href="https://cdn.mysql.com//Downloads/MySQL-5.6/mysql-5.6.46-linux-glibc2.12-x86_64.tar.gz" target="_blank" rel="noopener">https://cdn.mysql.com//Downloads/MySQL-5.6/mysql-5.6.46-linux-glibc2.12-x86_64.tar.gz</a></p>
</blockquote>
<ol>
<li>依赖包安装</li>
</ol>
<blockquote>
<p>yum -y install autoconf</p>
</blockquote>
<h2 id="主从服务器安装Mysql"><a href="#主从服务器安装Mysql" class="headerlink" title="主从服务器安装Mysql"></a>主从服务器安装Mysql</h2><h3 id="卸载老版本Mysql"><a href="#卸载老版本Mysql" class="headerlink" title="卸载老版本Mysql"></a>卸载老版本Mysql</h3><ol>
<li>删除mysql相关的文件</li>
</ol>
<blockquote>
<p>find / -name mysql</p>
<p>rm -rf mysql文件路径</p>
</blockquote>
<h3 id="解压mysql二进制包到安装目录"><a href="#解压mysql二进制包到安装目录" class="headerlink" title="解压mysql二进制包到安装目录"></a>解压mysql二进制包到安装目录</h3><blockquote>
<p>mkdir /usr/local/mysql</p>
<p>tar -zxvf mysql-5.6.46-linux-glibc2.12-x86_64.tar.gz -C /usr/local/mysql</p>
<p>mv /usr/local/mysql/mysql-5.6.46-linux-glibc2.12-x86_64 /usr/local/mysql/mysql-5.6.46</p>
</blockquote>
<h3 id="添加Mysql用户组和Mysql用户"><a href="#添加Mysql用户组和Mysql用户" class="headerlink" title="添加Mysql用户组和Mysql用户"></a>添加Mysql用户组和Mysql用户</h3><ol>
<li>先检查是否有msyql用户组</li>
</ol>
<blockquote>
<p>groups mysql</p>
</blockquote>
<ol>
<li>有则跳过，没有则添加用户和用户组</li>
</ol>
<blockquote>
<p>groupadd mysql</p>
<p>useradd -r -g mysql mysql</p>
</blockquote>
<h3 id="更改mysql安装目录权限"><a href="#更改mysql安装目录权限" class="headerlink" title="更改mysql安装目录权限"></a>更改mysql安装目录权限</h3><blockquote>
<p>cd /usr/local/mysql/mysql-5.6.46</p>
<p>chown -R mysql:mysql ./</p>
</blockquote>
<h3 id="Mysql安装"><a href="#Mysql安装" class="headerlink" title="Mysql安装"></a>Mysql安装</h3><ol>
<li>执行安装脚本</li>
</ol>
<blockquote>
<p>./scripts/mysql_install_db –user=mysql</p>
</blockquote>
<ol>
<li>更改安装脚本文件拥有者</li>
</ol>
<blockquote>
<p>chmod -R root:root ./</p>
</blockquote>
<h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><ol>
<li>Mysql默认配置文件是/etc/my.cnf，修改/etc/my.cnf文件：</li>
</ol>
<blockquote>
<p>[mysqld]</p>
<p>basedir=/usr/local/mysql/mysql-5.6.46 datadir=/usr/local/mysql/mysql-5.6.46/data</p>
<p>socket=/data/mysql/mysql.sock</p>
<p>[mysqld_safe]</p>
<p>log-error=/data/mysql/log/mysql_error.log</p>
<p>pid-file=/data/mysql/pid/mysql.pid</p>
</blockquote>
<ol>
<li>注：修改/etc/my.cnf后重新执行安装脚本才能启动mysql</li>
</ol>
<h3 id="更改Mysql密码"><a href="#更改Mysql密码" class="headerlink" title="更改Mysql密码"></a>更改Mysql密码</h3><ol>
<li>启动Mysql</li>
</ol>
<blockquote>
<p>./support-files/mysql.server start</p>
</blockquote>
<ol>
<li>更改Mysql密码</li>
</ol>
<blockquote>
<p>./bin/mysqladmin -u root -h localhost.localdomain password ‘密码’</p>
</blockquote>
<ol>
<li>登录Mysql</li>
</ol>
<blockquote>
<p>./bin/mysql -h 127.0.0.1 -uroot -p</p>
</blockquote>
<h3 id="增加远程登录权限"><a href="#增加远程登录权限" class="headerlink" title="增加远程登录权限"></a>增加远程登录权限</h3><ol>
<li>进入Mysql后执行：</li>
</ol>
<blockquote>
<p>grant all privileges on <em>.</em> to root@’%’ identified by ‘root’;</p>
<p>flush privileges;</p>
</blockquote>
<h3 id="将Mysql加入系统服务"><a href="#将Mysql加入系统服务" class="headerlink" title="将Mysql加入系统服务"></a>将Mysql加入系统服务</h3><blockquote>
<p>cp support-files/mysql.server /etc/init.d/mysqld</p>
<p>chkconfig –add mysqld</p>
<p>chkconfig mysqld on</p>
<p>service mysqld restart</p>
<p>service mysqld status</p>
</blockquote>
<h3 id="配置Mysql配置文件"><a href="#配置Mysql配置文件" class="headerlink" title="配置Mysql配置文件"></a>配置Mysql配置文件</h3><ol>
<li>编辑my.cnf</li>
</ol>
<blockquote>
<p>character-set-server=utf8 lower_case_table_names=1 max_allowed_packet=100M</p>
</blockquote>
<h2 id="Mysql主从同步配置"><a href="#Mysql主从同步配置" class="headerlink" title="Mysql主从同步配置"></a>Mysql主从同步配置</h2><blockquote>
<p>Master: 172.18.142.226</p>
<p>Slaver :172.18.142.225</p>
</blockquote>
<h3 id="设置Master的bin-log文件"><a href="#设置Master的bin-log文件" class="headerlink" title="设置Master的bin-log文件"></a>设置Master的bin-log文件</h3><ol>
<li>编辑/etc/my.cnf，在[mysqld]中加入下面配置，开启binlog功能</li>
</ol>
<blockquote>
<p>server-id=1 log-bin=/usr/local/mysql/mysql-5.6.46/mysql-bin.log</p>
<p>binlog-ignore-db=mysql binlog-do-db=test</p>
<p>binlog_cache_size=1M binlog_format=mixed expire_logs_days=3</p>
</blockquote>
<ol>
<li>重启mysql服务</li>
</ol>
<blockquote>
<p>service mysqld restart</p>
</blockquote>
<h3 id="创建复制帐号"><a href="#创建复制帐号" class="headerlink" title="创建复制帐号"></a>创建复制帐号</h3><blockquote>
<p>这个帐号必须具有 replication slave 的权限，可以为不同从库创建不同帐号，也可以使用统一帐号</p>
</blockquote>
<ol>
<li>进入Master的Mysql服务，创建replicate帐号</li>
</ol>
<blockquote>
<p>GRANT REPLICATION SLAVE ON <em>.</em> TO ‘replicate’@’%’ identified by ‘replicate’;</p>
<p>FLUSH PRIVILEGES;</p>
</blockquote>
<ol>
<li>获取Master二进制日志信息</li>
</ol>
<blockquote>
<p>FLUSH TABLES WITH READ LOCK;</p>
<p>SHOW MASTER STATUS;</p>
<p>UNLOCK TABLES;</p>
</blockquote>
<h3 id="对现有数据库文件备份"><a href="#对现有数据库文件备份" class="headerlink" title="对现有数据库文件备份"></a>对现有数据库文件备份</h3><ol>
<li>对Master上的数据执行mysqldump命令备份导出；</li>
<li>将备份的文件导入到Slaver中；</li>
</ol>
<h3 id="修改Slaver的-etc-my-cnf文件"><a href="#修改Slaver的-etc-my-cnf文件" class="headerlink" title="修改Slaver的/etc/my.cnf文件"></a>修改Slaver的/etc/my.cnf文件</h3><blockquote>
<p>server-id=2 relay-log=/usr/local/mysql/mysql-5.6.46/mysql-relay-bin relay-log-index=/usr/local/mysql/mysql-5.6.46/mysql-relay-bin.index read-only=1</p>
</blockquote>
<h3 id="配置Slaver连接Master进行数据同步"><a href="#配置Slaver连接Master进行数据同步" class="headerlink" title="配置Slaver连接Master进行数据同步"></a>配置Slaver连接Master进行数据同步</h3><ol>
<li>进入到Slaver的mysql服务，指定主机、用户名、密码、log文件、log位置</li>
</ol>
<blockquote>
<p>mysql&gt; CHANGE MASTER TO</p>
<p>​        -&gt; MASTER_HOST=’192.168.42.129’,</p>
<p>​        -&gt; MASTER_USER=’replicate’,</p>
<p>​        -&gt; MASTER_PASSWORD=’replicate’,</p>
<p>​        -&gt; MASTER_LOG_FILE=’replicate-bin.000001’,        ## 这个值是master status中的File值</p>
<p>​        -&gt; MASTER_LOG_POS=xxx;        ## xxx是master status中的Position值</p>
</blockquote>
<ol>
<li>开启同步，查看同步状态</li>
</ol>
<blockquote>
<p>Slave_IO_Running: Yes    Slave_SQL_Running: Yes        表示同步正在进行</p>
</blockquote>
<blockquote>
<p>START SLAVE;        开启同步</p>
<p>SHOW SLAVE STATUS \G        查看同步状态</p>
</blockquote>
<h3 id="关闭主从同步"><a href="#关闭主从同步" class="headerlink" title="关闭主从同步"></a>关闭主从同步</h3><ol>
<li>在Slave上停止主从同步</li>
</ol>
<blockquote>
<p>stop slave;</p>
</blockquote>
<ol>
<li>重置Slave信息</li>
</ol>
<blockquote>
<p>reset slave;        # 清除binlog文件及位置</p>
<p>reset slave all;        #清除slave的连接配置信息</p>
</blockquote>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="Mysql主从同步原理："><a href="#Mysql主从同步原理：" class="headerlink" title="Mysql主从同步原理："></a>Mysql主从同步原理：</h3><p>MySQL 的主从同步是一个异步复制的过程，其原理如下</p>
<blockquote>
<ol>
<li>Master 在执行完SQL 语句后，将相关的语句记录到binlog 文件中。</li>
<li>Slave 从Master 获取binlog 文件，并存于本地relay-log 文件中，然后读取master.info 文件，从上次同步时的position位置开始执行SQL 语句。</li>
</ol>
</blockquote>
<p>整个过程如下，主要由Master I/O 线程、Slave I/O 线程和Slave SQL 线程参与完成。</p>
<blockquote>
<ol>
<li>在Slave 上执行start slave，开启主从同步。</li>
<li>Slave I/O 线程通过Master 上的授权用户连接Master，并请求从指定的binlog 文件及位置开始的日志内容。</li>
<li>Master 接收到请求后，通过Master I/O 线程读取指定的binlog 内容并返回给Slave I/O 线程。同时返回本次读取的binlog 文件名及位置。</li>
<li>Slave I/O 线程将binlog 内容依次写入本地的relay-log 文件，并更新master.info 文件中的binlog 文件名和位置。</li>
<li>Slave SQL 线程实时检测本地relay-log 中新增的内容，解析成SQL 语句后在Slave 上顺序执行。</li>
<li>由此完成了从Master 到Slave 的基于SQL 执行语句的数据同步，确保数据的一致性。</li>
</ol>
</blockquote>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
        <tag>主从同步</tag>
      </tags>
  </entry>
  <entry>
    <title>文件编码</title>
    <url>/2020/03/21/%E6%96%87%E4%BB%B6%E7%BC%96%E7%A0%81/</url>
    <content><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><h3 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h3><h4 id="字符集是什么"><a href="#字符集是什么" class="headerlink" title="字符集是什么"></a>字符集是什么</h4><blockquote>
<p>字符是各种文字和符号的总称，包括国家文字、标点符号、图形符号、数字等。字符集是字符的集合。</p>
</blockquote>
<blockquote>
<p>​    虽然我们平时在计算机屏幕上看到的是实体化的汉字，但实际上在计算机存储介质中是按照01001这样的二进制流来存储的。</p>
<p>​    那么为了实现01二进制到实体化汉字的转换，就需要一个统一的转换标准。这种标准就是字符集标准（字符集）。</p>
</blockquote>
<blockquote>
<p>Q：为什么会有那么多的字符集标准呢？</p>
<p>A：很多规范和标准在最初制定时并没有意识到需要全球普适，于是，就出现了互不兼容的多个标准了</p>
</blockquote>
<h4 id="字符集有什么用"><a href="#字符集有什么用" class="headerlink" title="字符集有什么用"></a>字符集有什么用</h4><blockquote>
<p>字符集规定了 <strong>某个文字</strong> 和 <strong>某串二进制数字</strong>(文字的二进制存放方式) 的转换关系</p>
</blockquote>
<h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><blockquote>
<p>将<strong>字符(汉字)</strong>转换为<strong>字节序列(01二进制序列)</strong></p>
</blockquote>
<h3 id="解码"><a href="#解码" class="headerlink" title="解码"></a>解码</h3><blockquote>
<p>将<strong>字节序列(01二进制序列)</strong>转换为<strong>字符(汉字)</strong></p>
</blockquote>
<h3 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h3><blockquote>
<p>字符集只是一个规则集合的名字，对应到现实生活中，字符集就是某种语言的称谓，如：汉语、英语、日语…</p>
</blockquote>
<blockquote>
<p>对于有所有的字符集规则，要正确编码和解码一个字符，需要三个关键元素：<strong>字库表</strong>、<strong>编码字符集</strong>、 <strong>字符编码</strong></p>
</blockquote>
<h4 id="字库表"><a href="#字库表" class="headerlink" title="字库表"></a>字库表</h4><blockquote>
<p>是一个相当于所有可读或者可显示字符的数据库。字库表决定了可使用的素有字符的范围。</p>
</blockquote>
<h4 id="编码字符集"><a href="#编码字符集" class="headerlink" title="编码字符集"></a>编码字符集</h4><blockquote>
<p>即用一个编码值（code point）表示一个字符在字库中的位置</p>
</blockquote>
<h4 id="字符编码-1"><a href="#字符编码-1" class="headerlink" title="字符编码"></a>字符编码</h4><blockquote>
<p>编码字符集 和 实际存储值 之间的转换关系，一般来说都会直接将 code point 做为编码后的值直接存储的。</p>
<p>如：在ASCII表中，字符 A 在表中排在65位，而编码后的A的二进制是 01000001 ，转换成十进制也就是65</p>
</blockquote>
<h2 id="常用的-编码字符集-和-字符编码"><a href="#常用的-编码字符集-和-字符编码" class="headerlink" title="常用的 编码字符集 和 字符编码"></a>常用的 <strong>编码字符集</strong> 和 <strong>字符编码</strong></h2><h3 id="编码字符集-1"><a href="#编码字符集-1" class="headerlink" title="编码字符集"></a>编码字符集</h3><h4 id="Unicode"><a href="#Unicode" class="headerlink" title="Unicode"></a>Unicode</h4><blockquote>
<p>Unicode就是概念中提到的编码字符集。</p>
</blockquote>
<blockquote>
<p>随着互联网的发展，对同一字库集的要求越来越迫切，Unicode标准也就随之出现了。</p>
<p>Unicode字库集几乎涵盖了所有国家语言中出现的符号和问题，并为做了他们编号。</p>
<p>Unicode的编号从0000开始，一直到10FFFF公分为17个Plan，每个Plan有65535个字符。一些字符编码只是实现了其中的一个或几个Plan，如UTF-8只实现了第一个Plan</p>
</blockquote>
<h3 id="字符编码-2"><a href="#字符编码-2" class="headerlink" title="字符编码"></a>字符编码</h3><h4 id="UTF-8"><a href="#UTF-8" class="headerlink" title="UTF-8"></a>UTF-8</h4><blockquote>
<p>UTF-8就是概念中提到的字符编码，也就是Unicode字库集的一种实现。</p>
</blockquote>
<h4 id="ASCII"><a href="#ASCII" class="headerlink" title="ASCII"></a>ASCII</h4><blockquote>
<p>上世纪60年代，美国制定的一套对英语字符和二进制之间的对应关系。</p>
</blockquote>
<blockquote>
<p>我的理解是ASCII和Unicode是平等的关系。并且ASCII既是编码字符集又是字符编码(单字节字符编码)，ASCII表中的编号是直接存储在计算机中的。而Unicode只是定义了编号(用来和具体实现对应)，需要在实现它的字符编码中具体定义在计算机中存储的值。</p>
</blockquote>
<h4 id="GBK-GB2312-GB18030"><a href="#GBK-GB2312-GB18030" class="headerlink" title="GBK/GB2312/GB18030"></a>GBK/GB2312/GB18030</h4><blockquote>
<p>GB系列是中国国家标准中文字符集</p>
</blockquote>
<h4 id="EUC-JP"><a href="#EUC-JP" class="headerlink" title="EUC-JP"></a>EUC-JP</h4><blockquote>
<p>日本国家标准字符集</p>
</blockquote>
<h4 id="注："><a href="#注：" class="headerlink" title="注："></a>注：</h4><blockquote>
<p>ASCII、GB系列、EUC-JP既是编码字符集又是字符编码，即这些字符集中的编号可以直接存储到计算机中。</p>
</blockquote>
<blockquote>
<p>Unicode是为了统一所有国家的字符而制定的字符集，UTF-8是Unicode的实现之一。Unicode中的编号不能直接存储到计算机中，而是用来和UTF-8对应，UTF-8中的编码才是存储到计算机中的，这和ASCII、GB系列、EUC-JP的不同。</p>
</blockquote>
<blockquote>
<p>所以，GBK、EUC-JP和UTF-8的转换都需要通过Unicode，即：</p>
<p>GBK 转 UTF-8 ： GBK -&gt; Unicode -&gt; UTF-8</p>
<p>UTF-8 转 GBK：UTF-8 -&gt; Unicode -&gt; GBK</p>
</blockquote>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="为什么出现乱码"><a href="#为什么出现乱码" class="headerlink" title="为什么出现乱码"></a>为什么出现乱码</h3><blockquote>
<p>简单来说，出现乱码原因是编码和解码时用了不同或者不兼容的字符集</p>
</blockquote>
<blockquote>
<p>比如：</p>
<p>​        「中国」两个字用UTF-8编码后为下面（可用附录中在线转换工具），所以在计算机中存储的是E4B8ADE59BBD的二进制值</p>
</blockquote>
<table>
<thead>
<tr>
<th align="left"><strong>字符</strong></th>
<th align="left"><strong>编码10进制</strong></th>
<th align="left"><strong>编码16进制</strong></th>
<th align="left"><strong>Unicode编码10进制</strong></th>
<th align="left"><strong>Unicode编码16进制</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left">中</td>
<td align="left">14989485</td>
<td align="left">E4B8AD</td>
<td align="left">20013</td>
<td align="left">4E2D</td>
</tr>
<tr>
<td align="left">国</td>
<td align="left">15047613</td>
<td align="left">E59BBD</td>
<td align="left">22269</td>
<td align="left">56FD</td>
</tr>
</tbody></table>
<blockquote>
<p>然后，在解码的时候用GBK解码，就会出现乱码的情况</p>
</blockquote>
<h3 id="乱码转换"><a href="#乱码转换" class="headerlink" title="乱码转换"></a>乱码转换</h3><ul>
<li>在已知页面编码的情况下，把乱码通过在线工具，编码成计算机中存储的二进制码</li>
<li>在得到二进制码的情况下，按照各类字符编码的规则，猜测原来的编码方式</li>
<li>按照猜测的编码方式，将二进制码解码出来</li>
</ul>
<h2 id="Linux编码操作"><a href="#Linux编码操作" class="headerlink" title="Linux编码操作"></a>Linux编码操作</h2><h3 id="locale"><a href="#locale" class="headerlink" title="locale"></a>locale</h3><blockquote>
<p>Linux中的locale是表达程序用户地区方面的软件设定。</p>
<p>locale的设定包括 数据格式、货币金额格式、小数点符号、千分位符号、度量衡单位、通货符号、日期写法、日历类型、文字排序、姓名格式、地址等等。</p>
</blockquote>
<blockquote>
<ol>
<li>LANGUAGE 指定个人对语言环境值的主次偏好，例如zh_CN:en_US:en</li>
<li>LC_ALL 这不是一个环境变量，是一个可被C语言库函数setlocale设置的宏，其值可覆盖所有其他的locale设定。因此缺省时此值为空</li>
<li>LC_xxx 可设定locale各方面（category）的值，可以覆盖LANG的值。</li>
<li>LANG 指定默认使用的locale值</li>
</ol>
</blockquote>
<h3 id="file"><a href="#file" class="headerlink" title="file"></a>file</h3><blockquote>
<p>file -i filename    查看文件的字符集</p>
</blockquote>
<h3 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h3><blockquote>
<p>在vim中使用 :set fileencoding 查看文件编码格式</p>
</blockquote>
<h3 id="iconv"><a href="#iconv" class="headerlink" title="iconv"></a>iconv</h3><blockquote>
<p>Iconv -f encoding -t encoding sourcefile &gt;&gt; output</p>
</blockquote>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="在线查看字符集-编码关系"><a href="#在线查看字符集-编码关系" class="headerlink" title="在线查看字符集/编码关系"></a><a href="http://www.mytju.com/classcode/tools/encode_utf8.asp" target="_blank" rel="noopener">在线查看字符集/编码关系</a></h3><h3 id="Unicode-1"><a href="#Unicode-1" class="headerlink" title="Unicode"></a><a href="https://en.wikipedia.org/wiki/Unicode" target="_blank" rel="noopener">Unicode</a></h3><h3 id="locale-1"><a href="#locale-1" class="headerlink" title="locale"></a><a href="[https://zh.wikipedia.org/wiki/区域设置](https://zh.wikipedia.org/wiki/区域设置)">locale</a></h3><h3 id="ASCII码表"><a href="#ASCII码表" class="headerlink" title="ASCII码表"></a>ASCII码表</h3><p><img src="https://res.cloudinary.com/tg10020617/image/upload/v1584787379/20190408173150892_w78xlp.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>Linux字符集</tag>
        <tag>字符编码</tag>
        <tag>文件编码</tag>
      </tags>
  </entry>
  <entry>
    <title>Kafka Connect</title>
    <url>/2020/03/21/Kafka-Connect/</url>
    <content><![CDATA[<h2 id="Kafka-Connect-介绍（kafka-connect-是什么）"><a href="#Kafka-Connect-介绍（kafka-connect-是什么）" class="headerlink" title="Kafka Connect 介绍（kafka connect 是什么）"></a>Kafka Connect 介绍（kafka connect 是什么）</h2><h3 id="消息中间件"><a href="#消息中间件" class="headerlink" title="消息中间件"></a>消息中间件</h3><blockquote>
<p>消息中间件是利用高效可靠的消息传递机制进行异步的数据传输，并且可以进行分布式系统的集成。</p>
<p>消息中间件一般有两种传递模式：</p>
<ol>
<li>点对点模式：消息生产者将消息发送到队列中，消息消费者从队列中接收消息。</li>
<li>发布-订阅模式：该模式通过一个内容节点(topic)发布和订阅消息，消息发布者将消息发布到topic，消息订阅者订阅这个topic的消息。</li>
</ol>
</blockquote>
<h3 id="kafka"><a href="#kafka" class="headerlink" title="kafka"></a>kafka</h3><blockquote>
<p>kafka是消息中间件的一种。</p>
<p>kafka可以用于两大类别的应用：</p>
<ol>
<li>构建实时流数据管道，它可以在系统和应用之间可靠的获取数据，相当于消息队列。</li>
<li>构建实时流式应用程序，对这些流数据进行转换和影响，也就是流处理。</li>
</ol>
</blockquote>
<h3 id="kafka-connect介绍"><a href="#kafka-connect介绍" class="headerlink" title="kafka connect介绍"></a>kafka connect介绍</h3><blockquote>
<p>kafka是linkedin公司的架构师jay kreps，为了解决数据管道问题研发出的消息传递系统。</p>
<p>kafka connect是由 当时开发出kafka团队的核心成员成立的新公司 Confluent公司开发的confluent platform的核心功能。</p>
<p>注：kafka0.9及以上版本中已内置kafka connect。</p>
</blockquote>
<blockquote>
<p>kafka connect是一款可扩展并且可靠的在kafka和其他系统之间进行数据传输的工具。</p>
<p>kafka connect有两个核心概念（他们都称为connector）：</p>
<ol>
<li>Source：负责导入数据到kafka。</li>
<li>Sink：负责从kafka导出数据。</li>
</ol>
</blockquote>
<h2 id="Kafka-Connect优势（Kafka-Connect有什么用）"><a href="#Kafka-Connect优势（Kafka-Connect有什么用）" class="headerlink" title="Kafka Connect优势（Kafka Connect有什么用）"></a>Kafka Connect优势（Kafka Connect有什么用）</h2><h3 id="解决的问题"><a href="#解决的问题" class="headerlink" title="解决的问题"></a>解决的问题</h3><blockquote>
<p>程序员在构架kafka平台是遇到了下面问题：</p>
<ol>
<li>Schema管理</li>
<li>容错</li>
<li>并行化</li>
<li>数据延迟</li>
<li>分发担保</li>
<li>运营与监控</li>
</ol>
<p>Kafka Connect作为一个统一的框架，在大大减少程序员工作量的基础上，也负责解决上面的问题。</p>
</blockquote>
<h2 id="Kafka-Connect主要概念"><a href="#Kafka-Connect主要概念" class="headerlink" title="Kafka Connect主要概念"></a>Kafka Connect主要概念</h2><h3 id="connectors"><a href="#connectors" class="headerlink" title="connectors"></a>connectors</h3><blockquote>
<p>在kafka connect中，connector决定了数据应该从哪里复制过来已经数据应该写入到哪里去。</p>
<p>一个connector实例是一个需要负责在kafka和其他系统之间复制数据的逻辑作业。</p>
</blockquote>
<h3 id="tasks"><a href="#tasks" class="headerlink" title="tasks"></a>tasks</h3><blockquote>
<p>task是数据写入kafka和数据从kafka读出的具体实现。</p>
<p>每一个connector都会协调一系列的task去执行任务，connector可以把一项工作分割成许多的task，然后再把task分发到各个worker中去执行，</p>
</blockquote>
<h3 id="workers"><a href="#workers" class="headerlink" title="workers"></a>workers</h3><blockquote>
<p>运行connectors和tasks的进程。</p>
<p>connectors和tasks都是逻辑工作单位，必须安排在进程中执行。而在kafka connect中，这些进程就是workers，workers分为两种：</p>
<ol>
<li>standalone(单机)：在单机模式下，所有的工作都在一个进程中执行，但这不利于kafka connect的容错。</li>
<li>distributed(分布式)：提供了可扩展性和自动容错的功能。可以使用group.ip来启动多个worker进程，在有效的进程中，它们会自动协调执行connector和task；如果新增或挂掉了一个worker，其他worker会检测到然后重新分配connector和task。 </li>
</ol>
</blockquote>
<h3 id="converters"><a href="#converters" class="headerlink" title="converters"></a>converters</h3><blockquote>
<p>converter会把bytes数据转换成kafka connect内部的格式，也可以把kafka connect内部格式转化成bytes。</p>
</blockquote>
<h2 id="Kafka-Connect的使用（Kafka-Connect怎么用）"><a href="#Kafka-Connect的使用（Kafka-Connect怎么用）" class="headerlink" title="Kafka Connect的使用（Kafka Connect怎么用）"></a>Kafka Connect的使用（Kafka Connect怎么用）</h2><h3 id="kafka-connect的启动"><a href="#kafka-connect的启动" class="headerlink" title="kafka connect的启动"></a>kafka connect的启动</h3><h4 id="standalone模式"><a href="#standalone模式" class="headerlink" title="standalone模式"></a>standalone模式</h4><blockquote>
<p>在kafka0.9+版本以上，在kafka的安装目录下执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bin&#x2F;connect-standalone.sh config&#x2F;connect-standalone.properties connector1.properties [connector2.properties ...]</span><br></pre></td></tr></table></figure>

<p>注意：单机模式的connector的配置直接通过命令行传递</p>
</blockquote>
<h4 id="distributed模式"><a href="#distributed模式" class="headerlink" title="distributed模式"></a>distributed模式</h4><blockquote>
<p>在kafka0.9+版本以上，在kafka的安装目录下执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bin&#x2F;connect-distributed.sh config&#x2F;connect-distributed.properties</span><br></pre></td></tr></table></figure>

<p>注意：分布式模式的connector的配置不通过命令行传递。会使用REST API来创建、修改和销毁connector。</p>
</blockquote>
<h4 id="config-connect-xxx-properties配置文件"><a href="#config-connect-xxx-properties配置文件" class="headerlink" title="config/connect-xxx.properties配置文件"></a>config/connect-xxx.properties配置文件</h4><h5 id="公共配置文件（单机-amp-分布式都需要的一些配置）"><a href="#公共配置文件（单机-amp-分布式都需要的一些配置）" class="headerlink" title="公共配置文件（单机&amp;分布式都需要的一些配置）"></a>公共配置文件（单机&amp;分布式都需要的一些配置）</h5><blockquote>
<p>bootstrap.servers：用于连接到Kafka的Kafka服务器列表。</p>
<p>key.converter：Converter类，用于在Kafka连接格式和写入Kafka的序列化格式之间进行转换。这控制了向Kafka写入或从Kafka读取的消息中键的格式，并且由于这与连接器无关，因此允许任何连接器使用任何序列化格式。常见格式的例子包括JSON和Avro。</p>
<p>value.converte：Converter类，用于在Kafka连接格式和写入Kafka的序列化格式之间进行转换。这控制了向Kafka写入或从Kafka读取的消息中的值的格式，并且由于这与连接器无关，因此允许任何连接器使用任何序列化格式。常见格式的例子包括JSON和Avro。</p>
</blockquote>
<h5 id="standalone模式的重要配置"><a href="#standalone模式的重要配置" class="headerlink" title="standalone模式的重要配置"></a>standalone模式的重要配置</h5><blockquote>
<p>offset.storage.file.filename：存储 offset 数据的文件。</p>
<p>注：默认配置是config/server.properties文件。</p>
</blockquote>
<h5 id="distributed模式的重要配置"><a href="#distributed模式的重要配置" class="headerlink" title="distributed模式的重要配置"></a>distributed模式的重要配置</h5><blockquote>
<p>group.id：（默认连接群集）-群集的唯一名称，用于形成连接群集组；请注意，这不能与使用者组ID冲突。</p>
<p>config.storage.topic：（默认连接配置）-用于存储连接器和任务配置的主题；请注意，这应该是一个单分区、高度复制、压缩的主题。您可能需要手动创建主题以确保正确的配置，因为自动创建的主题可能有多个分区，或者自动配置为删除而不是压缩。</p>
<p>offset.storage.topic：（默认连接偏移量）-用于存储偏移量的主题；此主题应具有多个分区、被复制并配置为压缩。</p>
<p>status.storage.topic：（默认连接状态）-用于存储状态的主题；此主题可以有多个分区，应复制并配置为压缩。</p>
</blockquote>
<h4 id="自定义connectors"><a href="#自定义connectors" class="headerlink" title="自定义connectors"></a>自定义connectors</h4><h3 id="kafka-connect的查看-amp-管理（REST接口）"><a href="#kafka-connect的查看-amp-管理（REST接口）" class="headerlink" title="kafka connect的查看&amp;管理（REST接口）"></a>kafka connect的查看&amp;管理（REST接口）</h3><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="Kafka-Connect官方中文文档"><a href="#Kafka-Connect官方中文文档" class="headerlink" title="Kafka Connect官方中文文档"></a>Kafka Connect官方中文文档</h3><blockquote>
<p><a href="http://kafka.apachecn.org/documentation.html#connect" target="_blank" rel="noopener">KAFKA CONNECT</a></p>
</blockquote>
<h3 id="Confluent连接器仓库"><a href="#Confluent连接器仓库" class="headerlink" title="Confluent连接器仓库"></a>Confluent连接器仓库</h3><blockquote>
<p><a href="https://www.confluent.io/hub/" target="_blank" rel="noopener">CONFLUENT HUB</a></p>
</blockquote>
<h3 id="Confluent官方文档"><a href="#Confluent官方文档" class="headerlink" title="Confluent官方文档"></a>Confluent官方文档</h3><blockquote>
<p><a href="https://docs.confluent.io/2.0.0/connect/index.html" target="_blank" rel="noopener">CONFLUENT</a></p>
</blockquote>
<h3 id="MongoDB官方Source-Sink配置文件说明"><a href="#MongoDB官方Source-Sink配置文件说明" class="headerlink" title="MongoDB官方Source/Sink配置文件说明"></a>MongoDB官方Source/Sink配置文件说明</h3><blockquote>
<p><a href="https://docs.mongodb.com/kafka-connector/current/kafka-source/" target="_blank" rel="noopener">Source/Sink</a></p>
</blockquote>
]]></content>
      <categories>
        <category>MQ</category>
      </categories>
      <tags>
        <tag>kafka</tag>
        <tag>kafka connect</tag>
        <tag>confluent</tag>
      </tags>
  </entry>
  <entry>
    <title>JDK 安装</title>
    <url>/2020/03/21/JDK-%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h3 id="下载JDK1-8至本地机器"><a href="#下载JDK1-8至本地机器" class="headerlink" title="下载JDK1.8至本地机器"></a>下载JDK1.8至本地机器</h3><blockquote>
<p>wget + JDK地址</p>
</blockquote>
<h3 id="将JDK上传到服务器"><a href="#将JDK上传到服务器" class="headerlink" title="将JDK上传到服务器"></a>将JDK上传到服务器</h3><blockquote>
<p>rz  选择JDK文件</p>
</blockquote>
<h3 id="创建安装目录并将JDK安装到指定目录"><a href="#创建安装目录并将JDK安装到指定目录" class="headerlink" title="创建安装目录并将JDK安装到指定目录"></a>创建安装目录并将JDK安装到指定目录</h3><blockquote>
<p>mkdir /usr/local/java</p>
<p>tar -zxvf jdk-8u211-linux-x64.tar.gz -C /usr/local/java/</p>
</blockquote>
<h3 id="设置-JAVA-HOME-和-PATH-变量"><a href="#设置-JAVA-HOME-和-PATH-变量" class="headerlink" title="设置 JAVA_HOME 和 PATH 变量"></a>设置 JAVA_HOME 和 PATH 变量</h3><blockquote>
<p>vim /etc/profile</p>
<p>将下面几行插入到profile文件末尾：</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;java&#x2F;jdk1.8.0_211</span><br><span class="line">export JRE_HOME&#x3D;$&#123;JAVA_HOME&#125;&#x2F;jre</span><br><span class="line">export CLASSPATH&#x3D;.:$&#123;JAVA_HOME&#125;&#x2F;lib:$&#123;JRE_HOME&#125;&#x2F;lib</span><br><span class="line">export PATH&#x3D;$&#123;JAVA_HOME&#125;&#x2F;bin:$PATH</span><br></pre></td></tr></table></figure>
</blockquote>
</blockquote>
<h3 id="重新加载-profile"><a href="#重新加载-profile" class="headerlink" title="重新加载 profile"></a>重新加载 profile</h3><blockquote>
<p>source /etc/profile</p>
</blockquote>
<h3 id="将-java-命令加入系统"><a href="#将-java-命令加入系统" class="headerlink" title="将 java 命令加入系统"></a>将 java 命令加入系统</h3><blockquote>
<p>ln -s /usr/local/java/jdk1.8.0_211/bin/java /usr/bin/java</p>
</blockquote>
]]></content>
      <categories>
        <category>环境配置</category>
      </categories>
      <tags>
        <tag>jdk</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker安装（Centos）</title>
    <url>/2020/03/21/Docker%E5%AE%89%E8%A3%85%EF%BC%88Centos%EF%BC%89/</url>
    <content><![CDATA[<h2 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h2><h3 id="卸载旧版本"><a href="#卸载旧版本" class="headerlink" title="卸载旧版本"></a>卸载旧版本</h3><blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo yum remove docker \</span><br><span class="line">               docker-client \</span><br><span class="line">               docker-client-latest \</span><br><span class="line">               docker-common \</span><br><span class="line">               docker-latest \</span><br><span class="line">               docker-latest-logrotate \</span><br><span class="line">               docker-logrotate \</span><br><span class="line">               docker-engine</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>Docker 安装有三种方式：</p>
<ol>
<li>使用repository安装；</li>
<li>下载RPM包手动安装；</li>
<li>使用 <a href="https://get.docker.com" target="_blank" rel="noopener">https://get.docker.com</a> 的get-docker.sh脚本安装；</li>
</ol>
<p>官方推荐使用第一种方式安装</p>
</blockquote>
<h3 id="安装需要的软件包"><a href="#安装需要的软件包" class="headerlink" title="安装需要的软件包"></a>安装需要的软件包</h3><blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo yum install -y yum-utils \</span><br><span class="line">device-mapper-persistent-data \</span><br><span class="line">lvm2</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="设置存储库"><a href="#设置存储库" class="headerlink" title="设置存储库"></a>设置存储库</h3><blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo yum-config-manager \</span><br><span class="line"> --add-repo \</span><br><span class="line"> http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h3><h4 id="1-安装最新版本的Docker"><a href="#1-安装最新版本的Docker" class="headerlink" title="1. 安装最新版本的Docker"></a>1. 安装最新版本的Docker</h4><blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="2-或者安装特定版本的Docker"><a href="#2-或者安装特定版本的Docker" class="headerlink" title="2. 或者安装特定版本的Docker"></a>2. 或者安装特定版本的Docker</h4><h5 id="列出可用版本"><a href="#列出可用版本" class="headerlink" title="列出可用版本"></a>列出可用版本</h5><blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ yum list docker-ce --showduplicates | sort -r</span><br><span class="line"></span><br><span class="line">docker-ce.x86_64  3:18.09.1-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64  3:18.09.0-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64  18.06.1.ce-3.el7                    docker-ce-stable</span><br><span class="line">docker-ce.x86_64  18.06.0.ce-3.el7                    docker-ce-stable</span><br></pre></td></tr></table></figure>
</blockquote>
<h5 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h5><blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo yum install -y docker-ce-18.06.1.ce docker-ce-cli-18.09.1 containerd.io</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="启动Docker"><a href="#启动Docker" class="headerlink" title="启动Docker"></a>启动Docker</h3><blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo systemctl start docker</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="Docker-Compose安装"><a href="#Docker-Compose安装" class="headerlink" title="Docker Compose安装"></a>Docker Compose安装</h2><h3 id="按照github-releases中对应版本，根据Docker版本安装相应的Compose"><a href="#按照github-releases中对应版本，根据Docker版本安装相应的Compose" class="headerlink" title="按照github releases中对应版本，根据Docker版本安装相应的Compose"></a>按照github releases中对应版本，根据Docker版本安装相应的Compose</h3><blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -L https:&#x2F;&#x2F;github.com&#x2F;docker&#x2F;compose&#x2F;releases&#x2F;download&#x2F;1.25.3&#x2F;docker-compose-&#96;uname -s&#96;-&#96;uname -m&#96; -o &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="添加可执行权限"><a href="#添加可执行权限" class="headerlink" title="添加可执行权限"></a>添加可执行权限</h3><blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod +x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="Docker安装官方教程"><a href="#Docker安装官方教程" class="headerlink" title="Docker安装官方教程"></a>Docker安装官方教程</h3><blockquote>
<p><a href="https://docs.docker.com/install/linux/docker-ce/centos/" target="_blank" rel="noopener">    DOCKER</a></p>
</blockquote>
<h3 id="Docker-Compose安装官方教程"><a href="#Docker-Compose安装官方教程" class="headerlink" title="Docker Compose安装官方教程"></a>Docker Compose安装官方教程</h3><blockquote>
<p><a href="https://docs.docker.com/compose/install/" target="_blank" rel="noopener">DOCKER COMPOSE</a></p>
</blockquote>
<h3 id="Docker-Compose-github-Releases"><a href="#Docker-Compose-github-Releases" class="headerlink" title="Docker Compose github Releases"></a>Docker Compose github Releases</h3><blockquote>
<p><a href="https://github.com/docker/compose/releases" target="_blank" rel="noopener">COMPOSE RELEASES</a></p>
</blockquote>
]]></content>
      <categories>
        <category>环境配置</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>dockerfile</tag>
        <tag>docker compose</tag>
      </tags>
  </entry>
  <entry>
    <title>CSERVICE命令</title>
    <url>/2020/03/21/CSERVICE%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><h3 id="容器IP"><a href="#容器IP" class="headerlink" title="容器IP"></a>容器IP</h3><blockquote>
<p>docker inspect 容器ID | grep IPAddr</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker inspect 5941fb0c8204|grep IPAddr</span><br></pre></td></tr></table></figure>

<h3 id="宿主-容器文件拷贝"><a href="#宿主-容器文件拷贝" class="headerlink" title="宿主/容器文件拷贝"></a>宿主/容器文件拷贝</h3><h4 id="宿主机-gt-容器"><a href="#宿主机-gt-容器" class="headerlink" title="宿主机 =&gt; 容器"></a>宿主机 =&gt; 容器</h4><blockquote>
<p>docker cp 宿主机文件目录位置 容器名称:容器目录位置</p>
<p>eg: <code>docker cp ./test.txt cservice-kafka-1:/opt/kafka</code></p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker cp ./test.txt cservice-kafka-1:/opt/kafka</span><br></pre></td></tr></table></figure>

<h4 id="容器-gt-宿主机"><a href="#容器-gt-宿主机" class="headerlink" title="容器 =&gt; 宿主机"></a>容器 =&gt; 宿主机</h4><blockquote>
<p>docker cp 容器名称:容器文件目录位置 宿主机文件目录位置</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker cp cservice-kafka-1:/opt/kafka /User/tangguoqiang</span><br></pre></td></tr></table></figure>

<h3 id="root用户启动容器（root用户启动后passwd修改root密码）"><a href="#root用户启动容器（root用户启动后passwd修改root密码）" class="headerlink" title="root用户启动容器（root用户启动后passwd修改root密码）"></a>root用户启动容器（root用户启动后passwd修改root密码）</h3><blockquote>
<p>docker exec -it -u root 容器名 /bin/bash</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it -u root cservice-jenkins-1 /bin/bash</span><br></pre></td></tr></table></figure>

<h3 id="查看docker启动日志"><a href="#查看docker启动日志" class="headerlink" title="查看docker启动日志"></a>查看docker启动日志</h3><blockquote>
<p>实时加载的日志信息：docker logs -f –tail=200 容器ID</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker logs -f --tail=200 9166c619e12f</span><br></pre></td></tr></table></figure>



<h2 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a>Zookeeper</h2><h2 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h2><h3 id="Kafka-topic"><a href="#Kafka-topic" class="headerlink" title="Kafka topic"></a>Kafka topic</h3><h4 id="Kafka-topics-list"><a href="#Kafka-topics-list" class="headerlink" title="Kafka topics list"></a>Kafka topics list</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kafka-topics.sh --zookeeper cservice-zookeeper-1:2181 --list</span><br></pre></td></tr></table></figure>

<h4 id="Kafka-topic内容"><a href="#Kafka-topic内容" class="headerlink" title="Kafka topic内容"></a>Kafka topic内容</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">bin/kafka-console-consumer.sh --bootstrap-server cservice-kafka-1:9092 --topic <span class="built_in">test</span> --from-beginning</span><br></pre></td></tr></table></figure>

<h3 id="Kafka-connect-启动"><a href="#Kafka-connect-启动" class="headerlink" title="Kafka connect 启动"></a>Kafka connect 启动</h3><h4 id="standalone模式"><a href="#standalone模式" class="headerlink" title="standalone模式"></a>standalone模式</h4><blockquote>
<p>connect-standalone.sh standalone配置文件 Sources配置文件 Sink配置文件 </p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">bin/connect-standalone.sh config/connect-standalone.properties config/connect-file-source.properties config/connect-file-sink.properties</span><br></pre></td></tr></table></figure>

<h4 id="distributed模式"><a href="#distributed模式" class="headerlink" title="distributed模式"></a>distributed模式</h4><blockquote>
<p>connect-distributed.sh distributed配置文件</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">bin/connect-distributed.sh config/connect-distributed.properties</span><br></pre></td></tr></table></figure>





<h2 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h2><h3 id="数据备份"><a href="#数据备份" class="headerlink" title="数据备份"></a>数据备份</h3><h4 id="导入-导出-和-备份-恢复的区别"><a href="#导入-导出-和-备份-恢复的区别" class="headerlink" title="导入/导出 和 备份/恢复的区别"></a>导入/导出 和 备份/恢复的区别</h4><blockquote>
<p>导出/导出命令：<code>mongoexport</code> / <code>mongoimport</code></p>
<p>备份/恢复命令：<code>mongodump</code> / <code>mongorestore</code></p>
</blockquote>
<blockquote>
<ul>
<li>mongodump导出的数据是bson格式的，而二进制形式的数据，不过可以使用mongo自带的bsondump命令查看里面的内容，而mongoexport导出的是文本，可以是csv/json格式的数据</li>
<li>json可读性强但体积大，bson可读性低但体积小</li>
<li>不同mongo版本之间，通过bson进行数据迁移可能会出现兼容性问题</li>
<li>json虽然不会出现兼容性问题，但导出后只保留了数据部分，不保留索引、账户等基础信息</li>
</ul>
</blockquote>
<h4 id="导入和导出"><a href="#导入和导出" class="headerlink" title="导入和导出"></a>导入和导出</h4><blockquote>
<p><code>mongoexport</code> 命令参数：</p>
<ul>
<li>-h : MongoDB所在服务器地址</li>
<li>-d : 需要恢复的数据库实例</li>
<li>-c : 需要恢复的集合</li>
<li>-f : 需要导出的字段</li>
<li>-o : 表示导出的文件名</li>
<li>-q : 查询条件</li>
</ul>
</blockquote>
<blockquote>
<p><code>mongoimport</code> 命令参数：</p>
<ul>
<li>-type : 指明要导入的文件格式json(默认)、csv、tsv</li>
<li>-headerline : 指明不要导入第一行，因为第一行是列明</li>
<li>-file : 指明要导入的文件路径</li>
</ul>
</blockquote>
<h5 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mongoexport -h 127.0.0.1 -u user -p <span class="built_in">pwd</span> -d DATABASE -c <span class="built_in">log</span> -q <span class="string">'&#123;"createTime":&#123;"$gte":"20200830"&#125;&#125;'</span> -o /tmp/export.log --authenticationDatabase=admin</span><br></pre></td></tr></table></figure>

<h5 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mongoimport -h 127.0.0.1 -u user -p <span class="built_in">pwd</span> -d DATABASE -c <span class="built_in">log</span> --<span class="built_in">type</span>=json --file=/tmp/export.log --authenticationDatabase=admin</span><br></pre></td></tr></table></figure>



<h4 id="备份和恢复"><a href="#备份和恢复" class="headerlink" title="备份和恢复"></a>备份和恢复</h4><h5 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 备份单个表</span></span><br><span class="line">mongodump --host 172.18.142.225 --port 27018 --username <span class="string">"admin"</span> -p <span class="string">"BTZ1107"</span> --authenticationDatabase admin -d policy -c polices --out backup.bak</span><br><span class="line"></span><br><span class="line"><span class="comment"># 备份单个库</span></span><br><span class="line">mongodump --host 127.0.0.1 --port 27017 --username <span class="string">"admin"</span> -p <span class="string">"BTZ1102"</span> --authenticationDatabase admin -d policy --out backup.bak</span><br></pre></td></tr></table></figure>

<h5 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 恢复单个表</span></span><br><span class="line">mongorestore --host 172.18.142.225 --port 27018 --username <span class="string">"admin"</span> -p <span class="string">"BTZ1107"</span> --authenticationDatabase admin -d policy -c polices backup.bak/policy/policies.bson</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复单个库</span></span><br><span class="line">mongorestore --host 172.18.142.225 --port 27018 --username <span class="string">"admin"</span> -p <span class="string">"BTZ1107"</span> --authenticationDatabase admin -d policy backup.bak</span><br></pre></td></tr></table></figure>



<h3 id="Docker容器中配置Mongo副本集"><a href="#Docker容器中配置Mongo副本集" class="headerlink" title="Docker容器中配置Mongo副本集"></a>Docker容器中配置Mongo副本集</h3><blockquote>
<ol>
<li>mongod 以副本集形式启动 <code>mongod --replSet rs0</code></li>
<li>查看各mongo节点的IP及端口（docker容器中查询方式如上）</li>
<li>进入任意一mongo节点的命令行，执行 <code>conf={ &quot;_id&quot;:&quot;rs0&quot;, &quot;members&quot;:[ {&quot;_id&quot;:0,&quot;host&quot;:&quot;172.19.0.2:27017&quot;}, {&quot;_id&quot;:1,&quot;host&quot;:&quot;172.19.0.3:27017&quot;}, {&quot;_id&quot;:2,&quot;host&quot;:&quot;172.19.0.5:27017&quot;} ] }</code></li>
<li>进入其他节点的mongo命令行，执行 <code>rs.slaveOk()</code>开始同步数据</li>
</ol>
</blockquote>
<h3 id="Mongo副本集"><a href="#Mongo副本集" class="headerlink" title="Mongo副本集"></a>Mongo副本集</h3><h4 id="增加副本集"><a href="#增加副本集" class="headerlink" title="增加副本集"></a>增加副本集</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">rs.add(<span class="string">"ip:port"</span>);</span><br></pre></td></tr></table></figure>



<h4 id="删除副本集"><a href="#删除副本集" class="headerlink" title="删除副本集"></a>删除副本集</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">rs.remove(<span class="string">"ip:port"</span>);</span><br></pre></td></tr></table></figure>



<h4 id="修改conf"><a href="#修改conf" class="headerlink" title="修改conf"></a>修改conf</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cfg = rs.conf();</span><br><span class="line">cfg.members[2].host=[<span class="string">"ip:port"</span>];</span><br><span class="line">rs.reconfig(cfg);</span><br></pre></td></tr></table></figure>



<h2 id="打-解包"><a href="#打-解包" class="headerlink" title="打/解包"></a>打/解包</h2><h3 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打包</span></span><br><span class="line">zip -r xxx.zip ./filename</span><br><span class="line"><span class="comment"># 解包</span></span><br><span class="line">unzip -d ./filedir xxx.zip</span><br></pre></td></tr></table></figure>

<h3 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打包</span></span><br><span class="line">tar zcvf csweb.tar /usr/<span class="built_in">local</span>/src/csweb</span><br><span class="line">tar zcvf csweb.tar.gz /usr/<span class="built_in">local</span>/src/csweb</span><br><span class="line"><span class="comment"># 解包</span></span><br><span class="line">tar zxvf csweb.tar</span><br><span class="line">tar zxvf csweb.tar.gz</span><br></pre></td></tr></table></figure>

<h3 id="rar"><a href="#rar" class="headerlink" title="rar"></a>rar</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 解包</span></span><br><span class="line">unrar x Shadowsocks-4.3.2.146.rar</span><br><span class="line"><span class="comment"># 打包</span></span><br><span class="line">rar a -r Shadowsocks.rar ./Shadowsocks-4.3.2.146</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>CSERVICE</category>
      </categories>
  </entry>
</search>
